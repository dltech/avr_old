Итак, в еханизме работы событий всегда есть три участника:
- Event source - собственно, сам источник события.
- Thread - поток, который заинтересован в событии.
- Event lictener - прослушиватель событий - его задача состоит в том, чтобы оповестить все заинтересованные потоки когда определенное событие произойдет.
Итак, сначала необходимо объявить и инициализировать событие, далее нужно объявить и инициализировать прослушиватель событий. После чего необходимо соединить событие и поток, данная процедура называется регистрацией (register). Само собой, прослушиватель событий оповещает только зарегистрированные потоки.
Когда событие происходит, нужно осуществить вещание (brodcast). Тем временем зарегистрированный на данное событие поток будет оповещен и, например, если он находился в режиме ожидания (wait), он проснется и начнет выполнение нужных операций.



Структура потока имеет маску прослушиваемых флагов событий. Операции определенные с флагами событий:
- wait - поток уходит в спячку и ждет определенной комбинации флагов событий (и или).
- clear - маска или флаг события очищается из маски активных событий, возвращается очищенная маска
- signal - маска событий орится с маской отигналенного потока
- broadcast - каждый поток регистрирует сигналящий источник события, в соответствии с флагами событий, определенными в его слушателе событий
- Dispatch - сканируется маска событий и для каждого установленого бита вызывается функция обработчика. Маски сканируются с нулевого бита вверх

Источники событий могут делать broadcast, от чего потокам, которые зарегистрированы на этих источниках событий, будет просигналено в соответствии с их маской событий.


Для того чтобы разбудить поток событием не обращая внимания на флаги нужно:
сначала

объявить:	EventSource es1;
инициализировать: chEvtInit(&es1);
в потоке:
объявить:   EventListener el1;
зарегистрировать: chEvtRegister(&es1, &el1, 0);

chEvtBroadcast(&es1); что квивалентно chEvtBroadcastFlags(esp, 0);
внутри потока:
chEvtWaitAll(EVENT_MASK(0));

