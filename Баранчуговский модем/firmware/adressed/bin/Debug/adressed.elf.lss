
bin/Debug/adressed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000864  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000864  00000918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000108  0080007a  0080007a  00000932  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  00000932  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000026d0  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000fcb  00000000  00000000  00003008  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00003fd3  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	ae c0       	rjmp	.+348    	; 0x160 <__vector_1>
   4:	d3 c0       	rjmp	.+422    	; 0x1ac <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	64 c0       	rjmp	.+200    	; 0xe0 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e6       	ldi	r30, 0x64	; 100
  3a:	f8 e0       	ldi	r31, 0x08	; 8
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 37       	cpi	r26, 0x7A	; 122
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	aa e7       	ldi	r26, 0x7A	; 122
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 38       	cpi	r26, 0x82	; 130
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	f2 d3       	rcall	.+2020   	; 0x83e <main>
  5a:	02 c4       	rjmp	.+2052   	; 0x860 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <led_flash>:


/* отладочная функция (тупо мигает светодиодами) */

void led_flash(register uint8_t i, uint8_t type) {
	uint8_t led = LED_PIN, flash1, flash2;
  5e:	a0 b3       	in	r26, 0x10	; 16
  60:	61 50       	subi	r22, 0x01	; 1
  62:	63 30       	cpi	r22, 0x03	; 3
  64:	50 f4       	brcc	.+20     	; 0x7a <led_flash+0x1c>
  66:	70 e0       	ldi	r23, 0x00	; 0
  68:	fb 01       	movw	r30, r22
  6a:	e0 5a       	subi	r30, 0xA0	; 160
  6c:	ff 4f       	sbci	r31, 0xFF	; 255
  6e:	90 81       	ld	r25, Z
  70:	fb 01       	movw	r30, r22
  72:	ed 59       	subi	r30, 0x9D	; 157
  74:	ff 4f       	sbci	r31, 0xFF	; 255
  76:	60 81       	ld	r22, Z
  78:	02 c0       	rjmp	.+4      	; 0x7e <led_flash+0x20>
  7a:	60 e0       	ldi	r22, 0x00	; 0
  7c:	90 e0       	ldi	r25, 0x00	; 0
				 flash2=0;
				 break;
		default : flash1=0;
                  flash2=0;
		}
	++i;
  7e:	8f 5f       	subi	r24, 0xFF	; 255
	while(--i) {
		LED_PORT |= flash1;
		LED_PORT &= ~flash2;
  80:	76 2f       	mov	r23, r22
  82:	70 95       	com	r23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  84:	48 ec       	ldi	r20, 0xC8	; 200
  86:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(200);
		LED_PORT |= flash2;
		LED_PORT &= ~flash1;
  88:	b9 2f       	mov	r27, r25
  8a:	b0 95       	com	r27
				 break;
		default : flash1=0;
                  flash2=0;
		}
	++i;
	while(--i) {
  8c:	1c c0       	rjmp	.+56     	; 0xc6 <led_flash+0x68>
		LED_PORT |= flash1;
  8e:	22 b3       	in	r18, 0x12	; 18
  90:	29 2b       	or	r18, r25
  92:	22 bb       	out	0x12, r18	; 18
		LED_PORT &= ~flash2;
  94:	22 b3       	in	r18, 0x12	; 18
  96:	27 23       	and	r18, r23
  98:	22 bb       	out	0x12, r18	; 18
  9a:	20 ed       	ldi	r18, 0xD0	; 208
  9c:	37 e0       	ldi	r19, 0x07	; 7
  9e:	fa 01       	movw	r30, r20
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <led_flash+0x42>
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	31 09       	sbc	r19, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a8:	d1 f7       	brne	.-12     	; 0x9e <led_flash+0x40>
		_delay_ms(200);
		LED_PORT |= flash2;
  aa:	22 b3       	in	r18, 0x12	; 18
  ac:	26 2b       	or	r18, r22
  ae:	22 bb       	out	0x12, r18	; 18
		LED_PORT &= ~flash1;
  b0:	22 b3       	in	r18, 0x12	; 18
  b2:	2b 23       	and	r18, r27
  b4:	22 bb       	out	0x12, r18	; 18
  b6:	20 ed       	ldi	r18, 0xD0	; 208
  b8:	37 e0       	ldi	r19, 0x07	; 7
  ba:	fa 01       	movw	r30, r20
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <led_flash+0x5e>
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	31 09       	sbc	r19, r1
  c4:	d1 f7       	brne	.-12     	; 0xba <led_flash+0x5c>
				 break;
		default : flash1=0;
                  flash2=0;
		}
	++i;
	while(--i) {
  c6:	81 50       	subi	r24, 0x01	; 1
  c8:	11 f7       	brne	.-60     	; 0x8e <led_flash+0x30>
		_delay_ms(200);
		LED_PORT |= flash2;
		LED_PORT &= ~flash1;
		_delay_ms(200);
		}
	LED_PORT = led;
  ca:	a2 bb       	out	0x12, r26	; 18
  cc:	80 ea       	ldi	r24, 0xA0	; 160
  ce:	9f e0       	ldi	r25, 0x0F	; 15
  d0:	28 ec       	ldi	r18, 0xC8	; 200
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	f9 01       	movw	r30, r18
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <led_flash+0x78>
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	d9 f7       	brne	.-10     	; 0xd4 <led_flash+0x76>
	_delay_ms(400);
	}
  de:	08 95       	ret

000000e0 <__vector_11>:



/*   обработчики прерываний   */

ISR (USART_RXC_vect) {                              // если модем разбудил пакет, пришедший по RS485
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31

	cli();                                          // выключает прерывания
 102:	f8 94       	cli

	rs485_receive_packet();                         // принимает пакет по RS485
 104:	37 d3       	rcall	.+1646   	; 0x774 <rs485_receive_packet>

    if (packet_condition == 0xff) {
 106:	80 91 7b 00 	lds	r24, 0x007B
 10a:	8f 3f       	cpi	r24, 0xFF	; 255
 10c:	b9 f4       	brne	.+46     	; 0x13c <__vector_11+0x5c>

        rfm_22_write(0x3d, connect_address);
 10e:	60 91 7e 01 	lds	r22, 0x017E
 112:	8d e3       	ldi	r24, 0x3D	; 61
 114:	28 d1       	rcall	.+592    	; 0x366 <rfm_22_write>

        if (npack == 256) {
 116:	80 91 7c 00 	lds	r24, 0x007C
 11a:	90 91 7d 00 	lds	r25, 0x007D
 11e:	81 15       	cp	r24, r1
 120:	91 40       	sbci	r25, 0x01	; 1
 122:	29 f4       	brne	.+10     	; 0x12e <__vector_11+0x4e>
            rfm_22_write(0x3b,0x02);
 124:	62 e0       	ldi	r22, 0x02	; 2
 126:	8b e3       	ldi	r24, 0x3B	; 59
 128:	1e d1       	rcall	.+572    	; 0x366 <rfm_22_write>
            rfm_22_transmit_packet_256();
 12a:	5d d2       	rcall	.+1210   	; 0x5e6 <rfm_22_transmit_packet_256>
 12c:	04 c0       	rjmp	.+8      	; 0x136 <__vector_11+0x56>
            }
        else {
            rfm_22_write(0x3b,0x01);
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	8b e3       	ldi	r24, 0x3B	; 59
 132:	19 d1       	rcall	.+562    	; 0x366 <rfm_22_write>
            rfm_22_transmit_packet();
 134:	16 d2       	rcall	.+1068   	; 0x562 <rfm_22_transmit_packet>
            }
    packet_condition = 0x10;        // обнуляет состояние пакета для исключения еще одной пересылки
 136:	80 e1       	ldi	r24, 0x10	; 16
 138:	80 93 7b 00 	sts	0x007B, r24
    }

    register uint8_t rubbish = UDR;
 13c:	8c b1       	in	r24, 0x0c	; 12

	return;
	}
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	7f 91       	pop	r23
 14c:	6f 91       	pop	r22
 14e:	5f 91       	pop	r21
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_1>:




ISR (INT0_vect) {									// если RFM принял пакет
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	4f 93       	push	r20
 170:	5f 93       	push	r21
 172:	6f 93       	push	r22
 174:	7f 93       	push	r23
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	af 93       	push	r26
 17c:	bf 93       	push	r27
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31

	cli();                                          // выключает прерывания
 182:	f8 94       	cli

    packet_handler();                               // запуск обработчика пакета
 184:	82 d0       	rcall	.+260    	; 0x28a <packet_handler>

    GIFR = 0xc0; 						            // обнуляет прерывания
 186:	80 ec       	ldi	r24, 0xC0	; 192
 188:	8a bf       	out	0x3a, r24	; 58

    return;
	}
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	bf 91       	pop	r27
 190:	af 91       	pop	r26
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	7f 91       	pop	r23
 198:	6f 91       	pop	r22
 19a:	5f 91       	pop	r21
 19c:	4f 91       	pop	r20
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__vector_2>:




ISR (INT1_vect) {									// если была нажата кнопка reset
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	6f 93       	push	r22
 1c0:	7f 93       	push	r23
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31

	cli();
 1ce:	f8 94       	cli

    led_flash(2,1);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	44 df       	rcall	.-376    	; 0x5e <led_flash>

    GIFR = 0xc0; 						            // обнуляет прерывания
 1d6:	80 ec       	ldi	r24, 0xC0	; 192
 1d8:	8a bf       	out	0x3a, r24	; 58

    return;
	}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <init>:



/*  инициализация модема  */

void init (void) {
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	84 ef       	ldi	r24, 0xF4	; 244
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	28 ec       	ldi	r18, 0xC8	; 200
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	f9 01       	movw	r30, r18
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <init+0x10>
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	d9 f7       	brne	.-10     	; 0x20a <init+0xe>

	uint8_t temp;

    _delay_ms(50);

	LED_DDR |= GREEN_LED + RED_LED;				// инициалиация светодиодов
 214:	81 b3       	in	r24, 0x11	; 17
 216:	80 66       	ori	r24, 0x60	; 96
 218:	81 bb       	out	0x11, r24	; 17

	device_address = eeprom_read_byte(&device_address_eep);	    // считывет адрес устроства
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	18 d3       	rcall	.+1584   	; 0x850 <__eerd_byte_m8>
 220:	80 93 7a 00 	sts	0x007A, r24
//    connect_address = eeprom_read_byte(&connect_address_eep);   // считывает адрес устройства на радиоканале

//    if (connect_address == 0)   LED_PORT |= RED_LED;


	temp = rfm_22_init();						// инициализация RFM
 224:	b9 d0       	rcall	.+370    	; 0x398 <rfm_22_init>

	if(temp == 1) {
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	a1 f4       	brne	.+40     	; 0x252 <init+0x56>
 22a:	15 e0       	ldi	r17, 0x05	; 5
 22c:	c0 ea       	ldi	r28, 0xA0	; 160
 22e:	df e0       	ldi	r29, 0x0F	; 15

		for (i=0 ; i<5 ; ++i) {
		RFM_22_SDN_PORT |= RFM_22_SDN_EN;		// если RFM не отвечает, выключает, пробует инициализировать еще 5 раз
 230:	aa 9a       	sbi	0x15, 2	; 21
 232:	ce 01       	movw	r24, r28
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <init+0x38>
		_delay_ms(2);
		temp = rfm_22_init();
 238:	af d0       	rcall	.+350    	; 0x398 <rfm_22_init>
		if (temp == 0) break;
 23a:	88 23       	and	r24, r24
 23c:	51 f0       	breq	.+20     	; 0x252 <init+0x56>
 23e:	11 50       	subi	r17, 0x01	; 1

	temp = rfm_22_init();						// инициализация RFM

	if(temp == 1) {

		for (i=0 ; i<5 ; ++i) {
 240:	b9 f7       	brne	.-18     	; 0x230 <init+0x34>
		_delay_ms(2);
		temp = rfm_22_init();
		if (temp == 0) break;
		}

		if (temp == 1) {						// если все равно не отвечает - выключает RFM
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	31 f4       	brne	.+12     	; 0x252 <init+0x56>
			RFM_22_SDN_PORT |= RFM_22_SDN_EN;
 246:	aa 9a       	sbi	0x15, 2	; 21
			device_address = 0;
 248:	10 92 7a 00 	sts	0x007A, r1

			led_flash(2,3);
 24c:	63 e0       	ldi	r22, 0x03	; 3
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	06 df       	rcall	.-500    	; 0x5e <led_flash>
			}
		}


	if ( device_address == 0 ) {
 252:	80 91 7a 00 	lds	r24, 0x007A
 256:	81 11       	cpse	r24, r1
 258:	02 c0       	rjmp	.+4      	; 0x25e <init+0x62>
		LED_PORT |= RED_LED;			// если адрес устройства отсутствует, или RFM не была инициализирована включает красный светодиод
 25a:	95 9a       	sbi	0x12, 5	; 18
 25c:	12 c0       	rjmp	.+36     	; 0x282 <init+0x86>
		}
	else {

		LED_PORT |= GREEN_LED; 			// если RFM инициализирован успешно и адрес устройтва успешно считан - включает зеленый светодиод
 25e:	96 9a       	sbi	0x12, 6	; 18
//		BUTTON_PORT |= BUTTON_EN;		// вкл подтягивающий резистор на кнопке, не включаем, тк с внутренней подтяжкой работа нестабильна

		TCCR1B = INIT_TCCR1B;           // инициализация таймера для формирования задержек
 260:	85 e0       	ldi	r24, 0x05	; 5
 262:	8e bd       	out	0x2e, r24	; 46

		MCUCR = INIT_MCUCR;				// конфигурирует внешние прерывания
 264:	83 e8       	ldi	r24, 0x83	; 131
 266:	85 bf       	out	0x35, r24	; 53
		GICR = INIT_GICR;
 268:	80 ec       	ldi	r24, 0xC0	; 192
 26a:	8b bf       	out	0x3b, r24	; 59

        rs485_init();
 26c:	76 d2       	rcall	.+1260   	; 0x75a <rs485_init>

		rfm_22_write(0x07,0x05);		// вкл приемник
 26e:	65 e0       	ldi	r22, 0x05	; 5
 270:	87 e0       	ldi	r24, 0x07	; 7
 272:	79 d0       	rcall	.+242    	; 0x366 <rfm_22_write>
 274:	80 e9       	ldi	r24, 0x90	; 144
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <init+0x7c>
		_delay_us(200);

        DDRD &= ~0x0c;
 27c:	81 b3       	in	r24, 0x11	; 17
 27e:	83 7f       	andi	r24, 0xF3	; 243
 280:	81 bb       	out	0x11, r24	; 17

		}
	}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	08 95       	ret

0000028a <packet_handler>:

/* Обработчик пакетов */

void packet_handler(void) {

	rfm_22_read_burst(0x47, header , 3);				// считывает заголовок
 28a:	43 e0       	ldi	r20, 0x03	; 3
 28c:	6f e7       	ldi	r22, 0x7F	; 127
 28e:	71 e0       	ldi	r23, 0x01	; 1
 290:	87 e4       	ldi	r24, 0x47	; 71
 292:	41 d0       	rcall	.+130    	; 0x316 <rfm_22_read_burst>

    switch (header[1]) {
 294:	80 91 80 01 	lds	r24, 0x0180
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	a9 f0       	breq	.+42     	; 0x2c6 <packet_handler+0x3c>
 29c:	28 f4       	brcc	.+10     	; 0x2a8 <packet_handler+0x1e>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	41 f0       	breq	.+16     	; 0x2b2 <packet_handler+0x28>
 2a2:	82 30       	cpi	r24, 0x02	; 2
 2a4:	b9 f5       	brne	.+110    	; 0x314 <packet_handler+0x8a>
 2a6:	0d c0       	rjmp	.+26     	; 0x2c2 <packet_handler+0x38>
 2a8:	84 30       	cpi	r24, 0x04	; 4
 2aa:	99 f0       	breq	.+38     	; 0x2d2 <packet_handler+0x48>
 2ac:	86 30       	cpi	r24, 0x06	; 6
 2ae:	91 f5       	brne	.+100    	; 0x314 <packet_handler+0x8a>
 2b0:	1b c0       	rjmp	.+54     	; 0x2e8 <packet_handler+0x5e>

        case 0x01 : rfm_22_receive_packet();
 2b2:	cb d1       	rcall	.+918    	; 0x64a <rfm_22_receive_packet>
                    if (packet_condition == 0xff)      // если пакет успешно принят и находится в буфере
 2b4:	80 91 7b 00 	lds	r24, 0x007B
 2b8:	8f 3f       	cpi	r24, 0xFF	; 255
 2ba:	09 f4       	brne	.+2      	; 0x2be <packet_handler+0x34>
                        rs485_transmit_packet();       // передает пакет по RS485
 2bc:	a3 c2       	rjmp	.+1350   	; 0x804 <rs485_transmit_packet>
                    else
                        rfm_22_transmit_command(0x06); // иначе просит переслать его снова
 2be:	86 e0       	ldi	r24, 0x06	; 6
 2c0:	3f c1       	rjmp	.+638    	; 0x540 <rfm_22_transmit_command>
                    break;

        case 0x02 : rfm_22_receive_packet_256();
 2c2:	fe d1       	rcall	.+1020   	; 0x6c0 <rfm_22_receive_packet_256>
 2c4:	f7 cf       	rjmp	.-18     	; 0x2b4 <packet_handler+0x2a>
                        rs485_transmit_packet();
                    else
                        rfm_22_transmit_command(0x06);
                    break;

        case 0x03 : if (packet_condition == 0x01) {
 2c6:	80 91 7b 00 	lds	r24, 0x007B
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	09 f5       	brne	.+66     	; 0x310 <packet_handler+0x86>
                        rfm_22_receive_packet();
 2ce:	bd d1       	rcall	.+890    	; 0x64a <rfm_22_receive_packet>
 2d0:	05 c0       	rjmp	.+10     	; 0x2dc <packet_handler+0x52>
                            rs485_transmit_packet();    // передает пакет по RS485
                        }
                    packet_condition = 0x00;
                    break;

        case 0x04 : if (packet_condition == 0x01) {
 2d2:	80 91 7b 00 	lds	r24, 0x007B
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	d9 f4       	brne	.+54     	; 0x310 <packet_handler+0x86>
                        rfm_22_receive_packet_256();
 2da:	f2 d1       	rcall	.+996    	; 0x6c0 <rfm_22_receive_packet_256>
                        if (packet_condition == 0xff)   // если пакет успешно принят и находится в буфере
 2dc:	80 91 7b 00 	lds	r24, 0x007B
 2e0:	8f 3f       	cpi	r24, 0xFF	; 255
 2e2:	b1 f4       	brne	.+44     	; 0x310 <packet_handler+0x86>
                            rs485_transmit_packet();    // передает пакет по RS485
 2e4:	8f d2       	rcall	.+1310   	; 0x804 <rs485_transmit_packet>
 2e6:	14 c0       	rjmp	.+40     	; 0x310 <packet_handler+0x86>
                        }
                    packet_condition = 0x00;
                    break;

        case 0x06 : if (packet_condition == 0x10) {
 2e8:	80 91 7b 00 	lds	r24, 0x007B
 2ec:	80 31       	cpi	r24, 0x10	; 16
 2ee:	91 f4       	brne	.+36     	; 0x314 <packet_handler+0x8a>
                        if (npack == 256) {
 2f0:	80 91 7c 00 	lds	r24, 0x007C
 2f4:	90 91 7d 00 	lds	r25, 0x007D
 2f8:	81 15       	cp	r24, r1
 2fa:	91 40       	sbci	r25, 0x01	; 1
 2fc:	29 f4       	brne	.+10     	; 0x308 <packet_handler+0x7e>
                            rfm_22_write(0x3b,0x04);
 2fe:	64 e0       	ldi	r22, 0x04	; 4
 300:	8b e3       	ldi	r24, 0x3B	; 59
 302:	31 d0       	rcall	.+98     	; 0x366 <rfm_22_write>
                            rfm_22_transmit_packet_256();
 304:	70 d1       	rcall	.+736    	; 0x5e6 <rfm_22_transmit_packet_256>
 306:	04 c0       	rjmp	.+8      	; 0x310 <packet_handler+0x86>
                            }
                        else {
                            rfm_22_write(0x3b,0x03);
 308:	63 e0       	ldi	r22, 0x03	; 3
 30a:	8b e3       	ldi	r24, 0x3B	; 59
 30c:	2c d0       	rcall	.+88     	; 0x366 <rfm_22_write>
                            rfm_22_transmit_packet();
 30e:	29 d1       	rcall	.+594    	; 0x562 <rfm_22_transmit_packet>
                            }
                        packet_condition = 0x00;        // обнуляет состояние пакета для исключения еще одной пересылки
 310:	10 92 7b 00 	sts	0x007B, r1
 314:	08 95       	ret

00000316 <rfm_22_read_burst>:

void  rfm_22_read_burst  (uint8_t address, volatile uint8_t *data, uint8_t lenght) {

	register uint8_t i=0;

	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;
 316:	a8 98       	cbi	0x15, 0	; 21

	SPDR = address;		 			// записывает адрес
 318:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR<<7));
 31a:	8e b1       	in	r24, 0x0e	; 14
 31c:	88 23       	and	r24, r24
 31e:	e9 f3       	breq	.-6      	; 0x31a <rfm_22_read_burst+0x4>
 320:	fb 01       	movw	r30, r22

	for(i=0 ; i<lenght ; ++i) {		// считывает данные
		SPDR=0xff;
 322:	9f ef       	ldi	r25, 0xFF	; 255
 324:	06 c0       	rjmp	.+12     	; 0x332 <rfm_22_read_burst+0x1c>
 326:	9f b9       	out	0x0f, r25	; 15
		while (!(SPSR<<7));
 328:	8e b1       	in	r24, 0x0e	; 14
 32a:	88 23       	and	r24, r24
 32c:	e9 f3       	breq	.-6      	; 0x328 <rfm_22_read_burst+0x12>
		*(data+i) = SPDR;
 32e:	8f b1       	in	r24, 0x0f	; 15
 330:	81 93       	st	Z+, r24
	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;

	SPDR = address;		 			// записывает адрес
	while (!(SPSR<<7));

	for(i=0 ; i<lenght ; ++i) {		// считывает данные
 332:	8e 2f       	mov	r24, r30
 334:	86 1b       	sub	r24, r22
 336:	84 17       	cp	r24, r20
 338:	b0 f3       	brcs	.-20     	; 0x326 <rfm_22_read_burst+0x10>
		SPDR=0xff;
		while (!(SPSR<<7));
		*(data+i) = SPDR;
		}

	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
 33a:	a8 9a       	sbi	0x15, 0	; 21
 33c:	08 95       	ret

0000033e <rfm_22_write_burst>:

void rfm_22_write_burst (uint8_t address, volatile uint8_t *data, uint8_t lenght) {

	register uint8_t i=0;

	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;
 33e:	a8 98       	cbi	0x15, 0	; 21

	SPDR = address | (1 << 7);		 // записывает адрес
 340:	80 68       	ori	r24, 0x80	; 128
 342:	8f b9       	out	0x0f, r24	; 15

	while(!(SPSR<<7));
 344:	8e b1       	in	r24, 0x0e	; 14
 346:	88 23       	and	r24, r24
 348:	e9 f3       	breq	.-6      	; 0x344 <rfm_22_write_burst+0x6>
 34a:	fb 01       	movw	r30, r22
 34c:	06 c0       	rjmp	.+12     	; 0x35a <rfm_22_write_burst+0x1c>

	for(i=0 ; i<lenght ; ++i) {		// записывает данные
		SPDR = *(data+i);
 34e:	80 81       	ld	r24, Z
 350:	8f b9       	out	0x0f, r24	; 15
		while (!(SPSR<<7));
 352:	8e b1       	in	r24, 0x0e	; 14
 354:	88 23       	and	r24, r24
 356:	e9 f3       	breq	.-6      	; 0x352 <rfm_22_write_burst+0x14>
 358:	31 96       	adiw	r30, 0x01	; 1

	SPDR = address | (1 << 7);		 // записывает адрес

	while(!(SPSR<<7));

	for(i=0 ; i<lenght ; ++i) {		// записывает данные
 35a:	8e 2f       	mov	r24, r30
 35c:	86 1b       	sub	r24, r22
 35e:	84 17       	cp	r24, r20
 360:	b0 f3       	brcs	.-20     	; 0x34e <rfm_22_write_burst+0x10>
		SPDR = *(data+i);
		while (!(SPSR<<7));
		}

	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
 362:	a8 9a       	sbi	0x15, 0	; 21
 364:	08 95       	ret

00000366 <rfm_22_write>:

/* Записывает по SPI data по адресу address */

void rfm_22_write (unsigned char address,unsigned char data) {

	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;
 366:	a8 98       	cbi	0x15, 0	; 21

	SPDR = address | (1<<7);		 // записывает адрес
 368:	80 68       	ori	r24, 0x80	; 128
 36a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR<<7));
 36c:	8e b1       	in	r24, 0x0e	; 14
 36e:	88 23       	and	r24, r24
 370:	e9 f3       	breq	.-6      	; 0x36c <rfm_22_write+0x6>

	SPDR = data;         			// записывает данные
 372:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR<<7));
 374:	8e b1       	in	r24, 0x0e	; 14
 376:	88 23       	and	r24, r24
 378:	e9 f3       	breq	.-6      	; 0x374 <rfm_22_write+0xe>

	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
 37a:	a8 9a       	sbi	0x15, 0	; 21
 37c:	08 95       	ret

0000037e <rfm_22_read>:

uint8_t rfm_22_read(unsigned char address) {

	unsigned char data;

	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;
 37e:	a8 98       	cbi	0x15, 0	; 21

	SPDR = address;		 		// записывает адрес
 380:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR<<7));
 382:	8e b1       	in	r24, 0x0e	; 14
 384:	88 23       	and	r24, r24
 386:	e9 f3       	breq	.-6      	; 0x382 <rfm_22_read+0x4>

	SPDR = 0xff;         		// записывает пустые данные
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	8f b9       	out	0x0f, r24	; 15

	while (!(SPSR<<7));
 38c:	8e b1       	in	r24, 0x0e	; 14
 38e:	88 23       	and	r24, r24
 390:	e9 f3       	breq	.-6      	; 0x38c <rfm_22_read+0xe>

	data = SPDR;
 392:	8f b1       	in	r24, 0x0f	; 15

	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
 394:	a8 9a       	sbi	0x15, 0	; 21

	return data;
	}
 396:	08 95       	ret

00000398 <rfm_22_init>:



/* Записывает все необходимые конфигурационные регистры в RFM, проверяет связь с RFM. Если RFM не отвечает - возвращает 1, иначе - 0 */

uint8_t rfm_22_init(void) {
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	67 97       	sbiw	r28, 0x17	; 23
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	f8 94       	cli
 3a6:	de bf       	out	0x3e, r29	; 62
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	cd bf       	out	0x3d, r28	; 61

uint8_t		init_table_io[3] = {0x53, 0x5c, 0x56},
 3ac:	83 e5       	ldi	r24, 0x53	; 83
 3ae:	8d 8b       	std	Y+21, r24	; 0x15
 3b0:	8c e5       	ldi	r24, 0x5C	; 92
 3b2:	8e 8b       	std	Y+22, r24	; 0x16
 3b4:	86 e5       	ldi	r24, 0x56	; 86
 3b6:	8f 8b       	std	Y+23, r24	; 0x17
            init_table_freq[6] = {0x5e, 0x01, 0x5d, 0x86, 0x03, 0x7e},
 3b8:	86 e0       	ldi	r24, 0x06	; 6
 3ba:	e6 e6       	ldi	r30, 0x66	; 102
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	de 01       	movw	r26, r28
 3c0:	11 96       	adiw	r26, 0x01	; 1
 3c2:	01 90       	ld	r0, Z+
 3c4:	0d 92       	st	X+, r0
 3c6:	8a 95       	dec	r24
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <rfm_22_init+0x2a>
            init_table_ph[4] = {0x11, 0x46, 0x0a, 0x20},
 3ca:	81 e1       	ldi	r24, 0x11	; 17
 3cc:	8b 87       	std	Y+11, r24	; 0x0b
 3ce:	86 e4       	ldi	r24, 0x46	; 70
 3d0:	8c 87       	std	Y+12, r24	; 0x0c
 3d2:	8a e0       	ldi	r24, 0x0A	; 10
 3d4:	8d 87       	std	Y+13, r24	; 0x0d
 3d6:	80 e2       	ldi	r24, 0x20	; 32
 3d8:	8e 87       	std	Y+14, r24	; 0x0e
            init_table_synch[4] = {0x28, 0x15, 0x23, 0x42},
 3da:	88 e2       	ldi	r24, 0x28	; 40
 3dc:	8f 83       	std	Y+7, r24	; 0x07
 3de:	85 e1       	ldi	r24, 0x15	; 21
 3e0:	88 87       	std	Y+8, r24	; 0x08
 3e2:	83 e2       	ldi	r24, 0x23	; 35
 3e4:	89 87       	std	Y+9, r24	; 0x09
 3e6:	92 e4       	ldi	r25, 0x42	; 66
 3e8:	9a 87       	std	Y+10, r25	; 0x0a
            init_table_mod[3] = {0x0c, 0x23, 0x50},
 3ea:	9c e0       	ldi	r25, 0x0C	; 12
 3ec:	9a 8b       	std	Y+18, r25	; 0x12
 3ee:	8b 8b       	std	Y+19, r24	; 0x13
 3f0:	80 e5       	ldi	r24, 0x50	; 80
 3f2:	8c 8b       	std	Y+20, r24	; 0x14
            init_table_freqdiv[3] = {0x73, 0x64, 0x00};
 3f4:	83 e7       	ldi	r24, 0x73	; 115
 3f6:	8f 87       	std	Y+15, r24	; 0x0f
 3f8:	84 e6       	ldi	r24, 0x64	; 100
 3fa:	88 8b       	std	Y+16, r24	; 0x10
 3fc:	19 8a       	std	Y+17, r1	; 0x11

	uint8_t error;

	RFM_22_SDN_DDR |= RFM_22_SDN_EN;					//включает RFM
 3fe:	a2 9a       	sbi	0x14, 2	; 20
	RFM_22_SDN_PORT &= ~RFM_22_SDN_EN;
 400:	aa 98       	cbi	0x15, 2	; 21

	RFM_22_SPI_DDR |= RFM_22_SPI_PIN; 					//инициализация SPI
 402:	87 b3       	in	r24, 0x17	; 23
 404:	8c 62       	ori	r24, 0x2C	; 44
 406:	87 bb       	out	0x17, r24	; 23
	RFM_22_SPI_EN_DDR |= RFM_22_SPI_EN_PIN;
 408:	a0 9a       	sbi	0x14, 0	; 20
	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
 40a:	a8 9a       	sbi	0x15, 0	; 21
	SPCR = RFM_22_SPCR;
 40c:	81 e5       	ldi	r24, 0x51	; 81
 40e:	8d b9       	out	0x0d, r24	; 13

	rfm_22_write(0x07,0x00); 							// режим standby
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	87 e0       	ldi	r24, 0x07	; 7
 414:	a8 df       	rcall	.-176    	; 0x366 <rfm_22_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 416:	2f ef       	ldi	r18, 0xFF	; 255
 418:	80 e7       	ldi	r24, 0x70	; 112
 41a:	92 e0       	ldi	r25, 0x02	; 2
 41c:	21 50       	subi	r18, 0x01	; 1
 41e:	80 40       	sbci	r24, 0x00	; 0
 420:	90 40       	sbci	r25, 0x00	; 0
 422:	e1 f7       	brne	.-8      	; 0x41c <rfm_22_init+0x84>
 424:	00 c0       	rjmp	.+0      	; 0x426 <rfm_22_init+0x8e>
 426:	00 00       	nop

    _delay_ms(100);                                     // ждет пока RFM включится

	rfm_22_write(0x05,0x33);							// включает прерывания
 428:	63 e3       	ldi	r22, 0x33	; 51
 42a:	85 e0       	ldi	r24, 0x05	; 5
 42c:	9c df       	rcall	.-200    	; 0x366 <rfm_22_write>
	rfm_22_write(0x06,0x00);
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	86 e0       	ldi	r24, 0x06	; 6
 432:	99 df       	rcall	.-206    	; 0x366 <rfm_22_write>

	rfm_22_read(0x03);						 			// обнуляет прерывания
 434:	83 e0       	ldi	r24, 0x03	; 3
 436:	a3 df       	rcall	.-186    	; 0x37e <rfm_22_read>
	rfm_22_read(0x04);
 438:	84 e0       	ldi	r24, 0x04	; 4
 43a:	a1 df       	rcall	.-190    	; 0x37e <rfm_22_read>

	rfm_22_write(0x09,0x7f);							// емкость 12,5пФ
 43c:	6f e7       	ldi	r22, 0x7F	; 127
 43e:	89 e0       	ldi	r24, 0x09	; 9
 440:	92 df       	rcall	.-220    	; 0x366 <rfm_22_write>

	rfm_22_write_burst(0x0b, init_table_io, 3);			// порты вода-вывода
 442:	43 e0       	ldi	r20, 0x03	; 3
 444:	be 01       	movw	r22, r28
 446:	6b 5e       	subi	r22, 0xEB	; 235
 448:	7f 4f       	sbci	r23, 0xFF	; 255
 44a:	8b e0       	ldi	r24, 0x0B	; 11
 44c:	78 df       	rcall	.-272    	; 0x33e <rfm_22_write_burst>

	rfm_22_write(0x6d,0x1f);    						// мощность 13dBm
 44e:	6f e1       	ldi	r22, 0x1F	; 31
 450:	8d e6       	ldi	r24, 0x6D	; 109
 452:	89 df       	rcall	.-238    	; 0x366 <rfm_22_write>

	rfm_22_write(0x1c,0x95);
 454:	65 e9       	ldi	r22, 0x95	; 149
 456:	8c e1       	ldi	r24, 0x1C	; 28
 458:	86 df       	rcall	.-244    	; 0x366 <rfm_22_write>
	rfm_22_write(0x1d,0x40);
 45a:	60 e4       	ldi	r22, 0x40	; 64
 45c:	8d e1       	ldi	r24, 0x1D	; 29
 45e:	83 df       	rcall	.-250    	; 0x366 <rfm_22_write>

	rfm_22_write_burst(0x20, init_table_freq, 6);		// частоты
 460:	46 e0       	ldi	r20, 0x06	; 6
 462:	be 01       	movw	r22, r28
 464:	6f 5f       	subi	r22, 0xFF	; 255
 466:	7f 4f       	sbci	r23, 0xFF	; 255
 468:	80 e2       	ldi	r24, 0x20	; 32
 46a:	69 df       	rcall	.-302    	; 0x33e <rfm_22_write_burst>

	rfm_22_write(0x27,0x1e);							// порог RSSI
 46c:	6e e1       	ldi	r22, 0x1E	; 30
 46e:	87 e2       	ldi	r24, 0x27	; 39
 470:	7a df       	rcall	.-268    	; 0x366 <rfm_22_write>

	rfm_22_write(0x30, 0x8d);
 472:	6d e8       	ldi	r22, 0x8D	; 141
 474:	80 e3       	ldi	r24, 0x30	; 48
 476:	77 df       	rcall	.-274    	; 0x366 <rfm_22_write>

	rfm_22_write_burst(0x32, init_table_ph, 4);			// обработчик пакетов
 478:	44 e0       	ldi	r20, 0x04	; 4
 47a:	be 01       	movw	r22, r28
 47c:	65 5f       	subi	r22, 0xF5	; 245
 47e:	7f 4f       	sbci	r23, 0xFF	; 255
 480:	82 e3       	ldi	r24, 0x32	; 50
 482:	5d df       	rcall	.-326    	; 0x33e <rfm_22_write_burst>

	rfm_22_write_burst(0x36, init_table_synch, 4);		// синхронизация
 484:	44 e0       	ldi	r20, 0x04	; 4
 486:	be 01       	movw	r22, r28
 488:	69 5f       	subi	r22, 0xF9	; 249
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	86 e3       	ldi	r24, 0x36	; 54
 48e:	57 df       	rcall	.-338    	; 0x33e <rfm_22_write_burst>

	rfm_22_write(0x3a, device_address);					// адрес возврата
 490:	60 91 7a 00 	lds	r22, 0x007A
 494:	8a e3       	ldi	r24, 0x3A	; 58
 496:	67 df       	rcall	.-306    	; 0x366 <rfm_22_write>
//	rfm_22_write(0x3d, connect_address);
	rfm_22_write(0x42, device_address);					// адрес устройства
 498:	60 91 7a 00 	lds	r22, 0x007A
 49c:	82 e4       	ldi	r24, 0x42	; 66
 49e:	63 df       	rcall	.-314    	; 0x366 <rfm_22_write>
	rfm_22_write(0x46,0xff);							// маска адреса
 4a0:	6f ef       	ldi	r22, 0xFF	; 255
 4a2:	86 e4       	ldi	r24, 0x46	; 70
 4a4:	60 df       	rcall	.-320    	; 0x366 <rfm_22_write>



	rfm_22_write(0x6e,0x10);							// скорость передачи
 4a6:	60 e1       	ldi	r22, 0x10	; 16
 4a8:	8e e6       	ldi	r24, 0x6E	; 110
 4aa:	5d df       	rcall	.-326    	; 0x366 <rfm_22_write>
	rfm_22_write(0x6f,0x62);
 4ac:	62 e6       	ldi	r22, 0x62	; 98
 4ae:	8f e6       	ldi	r24, 0x6F	; 111
 4b0:	5a df       	rcall	.-332    	; 0x366 <rfm_22_write>

	rfm_22_write_burst(0x70, init_table_mod, 3);		// модуляция
 4b2:	43 e0       	ldi	r20, 0x03	; 3
 4b4:	be 01       	movw	r22, r28
 4b6:	6e 5e       	subi	r22, 0xEE	; 238
 4b8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ba:	80 e7       	ldi	r24, 0x70	; 112
 4bc:	40 df       	rcall	.-384    	; 0x33e <rfm_22_write_burst>

	rfm_22_write_burst(0x75, init_table_freqdiv, 3);	// конфигурация несущей частоты и девиации
 4be:	43 e0       	ldi	r20, 0x03	; 3
 4c0:	be 01       	movw	r22, r28
 4c2:	61 5f       	subi	r22, 0xF1	; 241
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	85 e7       	ldi	r24, 0x75	; 117
 4c8:	3a df       	rcall	.-396    	; 0x33e <rfm_22_write_burst>

    rfm_22_write(0x7d,0x0a);                            // нижний порог fifo передатчика
 4ca:	6a e0       	ldi	r22, 0x0A	; 10
 4cc:	8d e7       	ldi	r24, 0x7D	; 125
 4ce:	4b df       	rcall	.-362    	; 0x366 <rfm_22_write>
	rfm_22_write(0x7e,0x00);							// порог заполнения fifo приемника
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	8e e7       	ldi	r24, 0x7E	; 126
 4d4:	48 df       	rcall	.-368    	; 0x366 <rfm_22_write>

	error=rfm_22_read(0x20);
 4d6:	80 e2       	ldi	r24, 0x20	; 32
 4d8:	52 df       	rcall	.-348    	; 0x37e <rfm_22_read>

	if (  *init_table_freq != error ) error=1;			// проверка модуля
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	29 81       	ldd	r18, Y+1	; 0x01
 4de:	28 13       	cpse	r18, r24
 4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <__stack+0x85>
 4e2:	90 e0       	ldi	r25, 0x00	; 0
	else error=0;

	return error;
	}
 4e4:	89 2f       	mov	r24, r25
 4e6:	67 96       	adiw	r28, 0x17	; 23
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <rfm_22_clear>:

/* Обнуляет FIFO и прерывания RFM, включая режим приемника */

void rfm_22_clear(void) {

    rfm_22_write(0x07,0x05);            // переключает RFM в режим приемника
 4f8:	65 e0       	ldi	r22, 0x05	; 5
 4fa:	87 e0       	ldi	r24, 0x07	; 7
 4fc:	34 df       	rcall	.-408    	; 0x366 <rfm_22_write>

    rfm_22_write(0x7e,0x00);            // Порог заполнения FIFO 0.
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	8e e7       	ldi	r24, 0x7E	; 126
 502:	31 df       	rcall	.-414    	; 0x366 <rfm_22_write>

    rfm_22_write(0x08,0x03);			// стирает fifo RFM
 504:	63 e0       	ldi	r22, 0x03	; 3
 506:	88 e0       	ldi	r24, 0x08	; 8
 508:	2e df       	rcall	.-420    	; 0x366 <rfm_22_write>
    rfm_22_write(0x08,0x00);
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	88 e0       	ldi	r24, 0x08	; 8
 50e:	2b df       	rcall	.-426    	; 0x366 <rfm_22_write>

    rfm_22_read(0x03);                  // обнуляет прерывания
 510:	83 e0       	ldi	r24, 0x03	; 3
 512:	35 df       	rcall	.-406    	; 0x37e <rfm_22_read>
    rfm_22_read(0x04);
 514:	84 e0       	ldi	r24, 0x04	; 4
 516:	33 cf       	rjmp	.-410    	; 0x37e <rfm_22_read>

00000518 <rfm_22_wait_event>:


/* Функция ожидания определенного события. Ждет пока не сработает определенное прерывание в RFM. В качестве аргумента передается ожидаемый регистр флагов прерываний RFM.
    Если событие не произошло - срабатывает таймаут. Возвращает последний считанный регистр флагов или ноль (если ничего не происходило).   */

uint8_t rfm_22_wait_event (uint8_t event) {
 518:	cf 93       	push	r28
 51a:	c8 2f       	mov	r28, r24

    uint8_t interrupt = 0;

    TCNT1 = 0;
 51c:	1d bc       	out	0x2d, r1	; 45
 51e:	1c bc       	out	0x2c, r1	; 44
/* Функция ожидания определенного события. Ждет пока не сработает определенное прерывание в RFM. В качестве аргумента передается ожидаемый регистр флагов прерываний RFM.
    Если событие не произошло - срабатывает таймаут. Возвращает последний считанный регистр флагов или ноль (если ничего не происходило).   */

uint8_t rfm_22_wait_event (uint8_t event) {

    uint8_t interrupt = 0;
 520:	80 e0       	ldi	r24, 0x00	; 0

    TCNT1 = 0;

    while (((interrupt & event) == 0) & (TCNT1<RFM_22_WAIT_TIME))
 522:	04 c0       	rjmp	.+8      	; 0x52c <rfm_22_wait_event+0x14>
        if ((RFM_22_NIRQ_PIN & RFM_22_NIRQ_EN) == 0)
 524:	99 99       	sbic	0x13, 1	; 19
 526:	02 c0       	rjmp	.+4      	; 0x52c <rfm_22_wait_event+0x14>
            interrupt = rfm_22_read(0x03);
 528:	83 e0       	ldi	r24, 0x03	; 3
 52a:	29 df       	rcall	.-430    	; 0x37e <rfm_22_read>

    uint8_t interrupt = 0;

    TCNT1 = 0;

    while (((interrupt & event) == 0) & (TCNT1<RFM_22_WAIT_TIME))
 52c:	2c b5       	in	r18, 0x2c	; 44
 52e:	3d b5       	in	r19, 0x2d	; 45
 530:	98 2f       	mov	r25, r24
 532:	9c 23       	and	r25, r28
 534:	19 f4       	brne	.+6      	; 0x53c <rfm_22_wait_event+0x24>
 536:	21 15       	cp	r18, r1
 538:	34 40       	sbci	r19, 0x04	; 4
 53a:	a0 f3       	brcs	.-24     	; 0x524 <rfm_22_wait_event+0xc>
        if ((RFM_22_NIRQ_PIN & RFM_22_NIRQ_EN) == 0)
            interrupt = rfm_22_read(0x03);

    return interrupt;
    }
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <rfm_22_transmit_command>:


/* Функция для передачи команд. Передает пакет состоящий из заголовка и одного байта. Задержка, связанная с ожиданием передачи пакета учтена.
    В качестве аргумента передается команда.    */

void rfm_22_transmit_command(uint8_t command) {
 540:	cf 93       	push	r28
 542:	c8 2f       	mov	r28, r24

    rfm_22_write(0x3e,0x01);						// костыль из за долбанутых настроек порта RFM
 544:	61 e0       	ldi	r22, 0x01	; 1
 546:	8e e3       	ldi	r24, 0x3E	; 62
 548:	0e df       	rcall	.-484    	; 0x366 <rfm_22_write>
    rfm_22_write(0x7f,0xee);
 54a:	6e ee       	ldi	r22, 0xEE	; 238
 54c:	8f e7       	ldi	r24, 0x7F	; 127
 54e:	0b df       	rcall	.-490    	; 0x366 <rfm_22_write>

    rfm_22_write(0x3b,command);
 550:	6c 2f       	mov	r22, r28
 552:	8b e3       	ldi	r24, 0x3B	; 59
 554:	08 df       	rcall	.-496    	; 0x366 <rfm_22_write>

	rfm_22_write(0x07,0x09);					    // вкл режим передатчика
 556:	69 e0       	ldi	r22, 0x09	; 9
 558:	87 e0       	ldi	r24, 0x07	; 7
 55a:	05 df       	rcall	.-502    	; 0x366 <rfm_22_write>

    rfm_22_wait_event(0x04);                        // ждет пока пакет дойдет окончательно
 55c:	84 e0       	ldi	r24, 0x04	; 4

	return;
	}
 55e:	cf 91       	pop	r28

    rfm_22_write(0x3b,command);

	rfm_22_write(0x07,0x09);					    // вкл режим передатчика

    rfm_22_wait_event(0x04);                        // ждет пока пакет дойдет окончательно
 560:	db cf       	rjmp	.-74     	; 0x518 <rfm_22_wait_event>

00000562 <rfm_22_transmit_packet>:


/* Отправляет пакет длиной от 1 до 255 байт. Пакет считывается из буфера, размер пакета определяется глобальной переменной npack.
    Задержка, связанная с ожиданием передачи пакета учтена. Также подразумевается что первые 64 байта уже есть в fifo. */

void rfm_22_transmit_packet(void) {
 562:	ff 92       	push	r15
 564:	0f 93       	push	r16
 566:	1f 93       	push	r17
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29

    uint8_t nbyte = npack;
 56c:	60 91 7c 00 	lds	r22, 0x007C
 570:	70 91 7d 00 	lds	r23, 0x007D
 574:	c6 2f       	mov	r28, r22

//	rfm_22_write(0x07,0x05);							        // вкл приемник

    rfm_22_write(0x3e,nbyte);						            // размер пакета данных в RFM
 576:	8e e3       	ldi	r24, 0x3E	; 62
 578:	f6 de       	rcall	.-532    	; 0x366 <rfm_22_write>
    rfm_22_write(0x07,0x09);						            // вкл режим передатчика
 57a:	69 e0       	ldi	r22, 0x09	; 9
 57c:	87 e0       	ldi	r24, 0x07	; 7
 57e:	f3 de       	rcall	.-538    	; 0x366 <rfm_22_write>

    if ( nbyte>64 ) {
 580:	c1 34       	cpi	r28, 0x41	; 65
 582:	50 f1       	brcs	.+84     	; 0x5d8 <rfm_22_transmit_packet+0x76>
        nbyte -= 64;                                            // корректирует количество оставшихся байт в пакете
 584:	1c 2f       	mov	r17, r28
 586:	10 54       	subi	r17, 0x40	; 64

        while (nbyte>32) {
 588:	d0 e0       	ldi	r29, 0x00	; 0


/* Отправляет пакет длиной от 1 до 255 байт. Пакет считывается из буфера, размер пакета определяется глобальной переменной npack.
    Задержка, связанная с ожиданием передачи пакета учтена. Также подразумевается что первые 64 байта уже есть в fifo. */

void rfm_22_transmit_packet(void) {
 58a:	0c 2f       	mov	r16, r28
 58c:	00 52       	subi	r16, 0x20	; 32
    rfm_22_write(0x07,0x09);						            // вкл режим передатчика

    if ( nbyte>64 ) {
        nbyte -= 64;                                            // корректирует количество оставшихся байт в пакете

        while (nbyte>32) {
 58e:	0d c0       	rjmp	.+26     	; 0x5aa <rfm_22_transmit_packet+0x48>

            rfm_22_wait_event(0x20);                            // ждет пока FIFO опустеет
 590:	80 e2       	ldi	r24, 0x20	; 32
 592:	c2 df       	rcall	.-124    	; 0x518 <rfm_22_wait_event>
            rfm_22_write_burst(0x7f,buffer+npack-nbyte,32);     // шлет очередную порцию данных в FIFO
 594:	60 91 7c 00 	lds	r22, 0x007C
 598:	70 91 7d 00 	lds	r23, 0x007D
 59c:	6f 19       	sub	r22, r15
 59e:	71 09       	sbc	r23, r1
 5a0:	62 58       	subi	r22, 0x82	; 130
 5a2:	7f 4f       	sbci	r23, 0xFF	; 255
 5a4:	40 e2       	ldi	r20, 0x20	; 32
 5a6:	8f e7       	ldi	r24, 0x7F	; 127
 5a8:	ca de       	rcall	.-620    	; 0x33e <rfm_22_write_burst>


/* Отправляет пакет длиной от 1 до 255 байт. Пакет считывается из буфера, размер пакета определяется глобальной переменной npack.
    Задержка, связанная с ожиданием передачи пакета учтена. Также подразумевается что первые 64 байта уже есть в fifo. */

void rfm_22_transmit_packet(void) {
 5aa:	f1 2e       	mov	r15, r17
 5ac:	fd 0e       	add	r15, r29
 5ae:	d0 52       	subi	r29, 0x20	; 32
    rfm_22_write(0x07,0x09);						            // вкл режим передатчика

    if ( nbyte>64 ) {
        nbyte -= 64;                                            // корректирует количество оставшихся байт в пакете

        while (nbyte>32) {
 5b0:	80 2f       	mov	r24, r16
 5b2:	8d 0f       	add	r24, r29
 5b4:	81 32       	cpi	r24, 0x21	; 33
 5b6:	60 f7       	brcc	.-40     	; 0x590 <rfm_22_transmit_packet+0x2e>


/* Отправляет пакет длиной от 1 до 255 байт. Пакет считывается из буфера, размер пакета определяется глобальной переменной npack.
    Задержка, связанная с ожиданием передачи пакета учтена. Также подразумевается что первые 64 байта уже есть в fifo. */

void rfm_22_transmit_packet(void) {
 5b8:	c1 54       	subi	r28, 0x41	; 65
 5ba:	c0 7e       	andi	r28, 0xE0	; 224
 5bc:	1c 1b       	sub	r17, r28
            rfm_22_write_burst(0x7f,buffer+npack-nbyte,32);     // шлет очередную порцию данных в FIFO
            nbyte -= 32;
            }


        rfm_22_wait_event(0x20);                                // ждет пока FIFO опустеет окончательно
 5be:	80 e2       	ldi	r24, 0x20	; 32
 5c0:	ab df       	rcall	.-170    	; 0x518 <rfm_22_wait_event>

        rfm_22_write_burst(0x7f,buffer+npack-nbyte,nbyte);      // шлет оставшиеся байты в FIFO
 5c2:	60 91 7c 00 	lds	r22, 0x007C
 5c6:	70 91 7d 00 	lds	r23, 0x007D
 5ca:	61 1b       	sub	r22, r17
 5cc:	71 09       	sbc	r23, r1
 5ce:	62 58       	subi	r22, 0x82	; 130
 5d0:	7f 4f       	sbci	r23, 0xFF	; 255
 5d2:	41 2f       	mov	r20, r17
 5d4:	8f e7       	ldi	r24, 0x7F	; 127
 5d6:	b3 de       	rcall	.-666    	; 0x33e <rfm_22_write_burst>
        }

    rfm_22_wait_event(0x04);                                    // ждет пока пакет дойдет окончательно
 5d8:	84 e0       	ldi	r24, 0x04	; 4

	return;
	}
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	1f 91       	pop	r17
 5e0:	0f 91       	pop	r16
 5e2:	ff 90       	pop	r15
        rfm_22_wait_event(0x20);                                // ждет пока FIFO опустеет окончательно

        rfm_22_write_burst(0x7f,buffer+npack-nbyte,nbyte);      // шлет оставшиеся байты в FIFO
        }

    rfm_22_wait_event(0x04);                                    // ждет пока пакет дойдет окончательно
 5e4:	99 cf       	rjmp	.-206    	; 0x518 <rfm_22_wait_event>

000005e6 <rfm_22_transmit_packet_256>:

/* Специальная функция для передачи пакета в 256 байт. 256й байт пихается в заголовок. */

void rfm_22_transmit_packet_256(void) {

    --npack;
 5e6:	80 91 7c 00 	lds	r24, 0x007C
 5ea:	90 91 7d 00 	lds	r25, 0x007D
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	90 93 7d 00 	sts	0x007D, r25
 5f4:	80 93 7c 00 	sts	0x007C, r24
    rfm_22_write(0x3a,buffer[255]);
 5f8:	60 91 7d 01 	lds	r22, 0x017D
 5fc:	8a e3       	ldi	r24, 0x3A	; 58
 5fe:	b3 de       	rcall	.-666    	; 0x366 <rfm_22_write>

    rfm_22_transmit_packet();                       // передает остальной пакет
 600:	b0 cf       	rjmp	.-160    	; 0x562 <rfm_22_transmit_packet>

00000602 <rfm_22_transmit_small_packet>:


/* Отправляет пакет, предварительно проверяя уровень сигнала. startn - указатель на передаваемые данные, lenght - длина пакета.
	Если вызвать с параметрами 0,0 - передает пустой пакет (команду). Задержка, связанная с ожиданием передачи пакета учтена. */

void rfm_22_transmit_small_packet(uint8_t startn, unsigned char lenght) {
 602:	1f 93       	push	r17
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	1f 92       	push	r1
 60a:	cd b7       	in	r28, 0x3d	; 61
 60c:	de b7       	in	r29, 0x3e	; 62
 60e:	18 2f       	mov	r17, r24
 610:	46 2f       	mov	r20, r22
//	rfm_22_write(0x07,0x05);							// вкл приемник

//	rfm_22_write(0x08,0x01);							// стирает fifo
//	rfm_22_write(0x08,0x00);

	if (lenght) {										// если размер пакета не 0
 612:	66 23       	and	r22, r22
 614:	59 f0       	breq	.+22     	; 0x62c <rfm_22_transmit_small_packet+0x2a>

		rfm_22_write(0x3e,lenght);						// размер пакета данных
 616:	8e e3       	ldi	r24, 0x3E	; 62
 618:	49 83       	std	Y+1, r20	; 0x01
 61a:	a5 de       	rcall	.-694    	; 0x366 <rfm_22_write>
		rfm_22_write_burst(0x7f,buffer+startn,lenght);	// отправляет пакет в fifo
 61c:	61 2f       	mov	r22, r17
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	62 58       	subi	r22, 0x82	; 130
 622:	7f 4f       	sbci	r23, 0xFF	; 255
 624:	49 81       	ldd	r20, Y+1	; 0x01
 626:	8f e7       	ldi	r24, 0x7F	; 127
 628:	8a de       	rcall	.-748    	; 0x33e <rfm_22_write_burst>
 62a:	08 c0       	rjmp	.+16     	; 0x63c <rfm_22_transmit_small_packet+0x3a>
		}
	else if (startn) {	 								// если размер пакета 0
 62c:	88 23       	and	r24, r24
 62e:	31 f0       	breq	.+12     	; 0x63c <rfm_22_transmit_small_packet+0x3a>

		rfm_22_write(0x3e,0x01);						//костыль из за долбанутых настроек порта RFM
 630:	61 e0       	ldi	r22, 0x01	; 1
 632:	8e e3       	ldi	r24, 0x3E	; 62
 634:	98 de       	rcall	.-720    	; 0x366 <rfm_22_write>
		rfm_22_write(0x7f,0xee);
 636:	6e ee       	ldi	r22, 0xEE	; 238
 638:	8f e7       	ldi	r24, 0x7F	; 127
 63a:	95 de       	rcall	.-726    	; 0x366 <rfm_22_write>

//	_delay_us(220);

//	while(!(RFM_22_GPIO0_PIN & RFM_22_GPIO0_EN));		// проверяет эфир

	rfm_22_write(0x07,0x09);							// вкл режим передатчика
 63c:	69 e0       	ldi	r22, 0x09	; 9
 63e:	87 e0       	ldi	r24, 0x07	; 7

//	delay_timer(lenght+20);								// задержка, чтобы при передаче пакета не беспокоить RFM

	return;
	}
 640:	0f 90       	pop	r0
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	1f 91       	pop	r17

//	_delay_us(220);

//	while(!(RFM_22_GPIO0_PIN & RFM_22_GPIO0_EN));		// проверяет эфир

	rfm_22_write(0x07,0x09);							// вкл режим передатчика
 648:	8e ce       	rjmp	.-740    	; 0x366 <rfm_22_write>

0000064a <rfm_22_receive_packet>:


/* Принимает пакет длиной от 1 до 255 байт. Пакет считывается в буфер, размер пакета записывается в глобальную переменную npack.
    Также проверяет контрольную сумму и корректирует байт состояния пакета. */

void rfm_22_receive_packet(void) {
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29

    uint8_t nbyte, interrupt=0;

    rfm_22_write(0x7e,0x36);
 64e:	66 e3       	ldi	r22, 0x36	; 54
 650:	8e e7       	ldi	r24, 0x7E	; 126
 652:	89 de       	rcall	.-750    	; 0x366 <rfm_22_write>

    rfm_22_read(0x03);                                                      // обнуляет прерывания RFM
 654:	83 e0       	ldi	r24, 0x03	; 3
 656:	93 de       	rcall	.-730    	; 0x37e <rfm_22_read>

    nbyte = rfm_22_read(0x4b);							                    // считывает длину пакета
 658:	8b e4       	ldi	r24, 0x4B	; 75
 65a:	91 de       	rcall	.-734    	; 0x37e <rfm_22_read>
 65c:	c8 2f       	mov	r28, r24
    npack = nbyte;
 65e:	28 2f       	mov	r18, r24
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	30 93 7d 00 	sts	0x007D, r19
 666:	20 93 7c 00 	sts	0x007C, r18

    while (nbyte>64) {                                                      // пока количество непринятых байт больше 64
 66a:	0e c0       	rjmp	.+28     	; 0x688 <rfm_22_receive_packet+0x3e>

        rfm_22_wait_event(0x10);                                            // ждет пока FIFO не заполнится
 66c:	80 e1       	ldi	r24, 0x10	; 16
 66e:	54 df       	rcall	.-344    	; 0x518 <rfm_22_wait_event>

        rfm_22_read_burst(0x7f, buffer+npack-nbyte, 32);	                // считывает данные
 670:	60 91 7c 00 	lds	r22, 0x007C
 674:	70 91 7d 00 	lds	r23, 0x007D
 678:	6c 1b       	sub	r22, r28
 67a:	71 09       	sbc	r23, r1
 67c:	62 58       	subi	r22, 0x82	; 130
 67e:	7f 4f       	sbci	r23, 0xFF	; 255
 680:	40 e2       	ldi	r20, 0x20	; 32
 682:	8f e7       	ldi	r24, 0x7F	; 127
 684:	48 de       	rcall	.-880    	; 0x316 <rfm_22_read_burst>
        nbyte -= 32;                                                        // коректирует количество оставшихся байт
 686:	c0 52       	subi	r28, 0x20	; 32
    rfm_22_read(0x03);                                                      // обнуляет прерывания RFM

    nbyte = rfm_22_read(0x4b);							                    // считывает длину пакета
    npack = nbyte;

    while (nbyte>64) {                                                      // пока количество непринятых байт больше 64
 688:	c1 34       	cpi	r28, 0x41	; 65
 68a:	80 f7       	brcc	.-32     	; 0x66c <rfm_22_receive_packet+0x22>

        rfm_22_read_burst(0x7f, buffer+npack-nbyte, 32);	                // считывает данные
        nbyte -= 32;                                                        // коректирует количество оставшихся байт
        }

    interrupt = rfm_22_wait_event(0x02);                                    // ждет пока дойдет весь пакет
 68c:	82 e0       	ldi	r24, 0x02	; 2
 68e:	44 df       	rcall	.-376    	; 0x518 <rfm_22_wait_event>
 690:	d8 2f       	mov	r29, r24

    rfm_22_read_burst(0x7f, buffer+npack-nbyte, nbyte);                    // считывает последние байты
 692:	60 91 7c 00 	lds	r22, 0x007C
 696:	70 91 7d 00 	lds	r23, 0x007D
 69a:	6c 1b       	sub	r22, r28
 69c:	71 09       	sbc	r23, r1
 69e:	62 58       	subi	r22, 0x82	; 130
 6a0:	7f 4f       	sbci	r23, 0xFF	; 255
 6a2:	4c 2f       	mov	r20, r28
 6a4:	8f e7       	ldi	r24, 0x7F	; 127
 6a6:	37 de       	rcall	.-914    	; 0x316 <rfm_22_read_burst>

    if ((interrupt & 0x01) | (interrupt == 0)) packet_condition = 0x01;     // проверяет контрольную сумму
 6a8:	d0 fd       	sbrc	r29, 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <rfm_22_receive_packet+0x66>
 6ac:	d1 11       	cpse	r29, r1
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <rfm_22_receive_packet+0x6a>
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <rfm_22_receive_packet+0x6c>
    else                                       packet_condition = 0xff;
 6b4:	8f ef       	ldi	r24, 0xFF	; 255
 6b6:	80 93 7b 00 	sts	0x007B, r24

	return;
	}
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	08 95       	ret

000006c0 <rfm_22_receive_packet_256>:

/* Специальная функция для приема пакета в 256 байт. 256й байт считывается из заголовка. */

void rfm_22_receive_packet_256(void) {

    rfm_22_receive_packet();
 6c0:	c4 df       	rcall	.-120    	; 0x64a <rfm_22_receive_packet>

    buffer[255] = rfm_22_read(0x47);
 6c2:	87 e4       	ldi	r24, 0x47	; 71
 6c4:	5c de       	rcall	.-840    	; 0x37e <rfm_22_read>
 6c6:	80 93 7d 01 	sts	0x017D, r24
    ++npack;
 6ca:	80 91 7c 00 	lds	r24, 0x007C
 6ce:	90 91 7d 00 	lds	r25, 0x007D
 6d2:	01 96       	adiw	r24, 0x01	; 1
 6d4:	90 93 7d 00 	sts	0x007D, r25
 6d8:	80 93 7c 00 	sts	0x007C, r24
 6dc:	08 95       	ret

000006de <rfm_22_read_small_packet>:



/* Считывает данные пакета */

uint8_t rfm_22_read_small_packet(uint8_t startn) {
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	d8 2f       	mov	r29, r24

	uint8_t lenght;

		lenght = rfm_22_read(0x4b);							//считывает длину пакета
 6e4:	8b e4       	ldi	r24, 0x4B	; 75
 6e6:	4b de       	rcall	.-874    	; 0x37e <rfm_22_read>
 6e8:	c8 2f       	mov	r28, r24

		rfm_22_read_burst(0x7f, buffer+startn, lenght);	    //считывает данные
 6ea:	6d 2f       	mov	r22, r29
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	62 58       	subi	r22, 0x82	; 130
 6f0:	7f 4f       	sbci	r23, 0xFF	; 255
 6f2:	48 2f       	mov	r20, r24
 6f4:	8f e7       	ldi	r24, 0x7F	; 127
 6f6:	0f de       	rcall	.-994    	; 0x316 <rfm_22_read_burst>

		rfm_22_write(0x07,0x05);
 6f8:	65 e0       	ldi	r22, 0x05	; 5
 6fa:	87 e0       	ldi	r24, 0x07	; 7
 6fc:	34 de       	rcall	.-920    	; 0x366 <rfm_22_write>

	rfm_22_write(0x08,0x02);								//стирает fifo
 6fe:	62 e0       	ldi	r22, 0x02	; 2
 700:	88 e0       	ldi	r24, 0x08	; 8
 702:	31 de       	rcall	.-926    	; 0x366 <rfm_22_write>
	rfm_22_write(0x08,0x00);
 704:	60 e0       	ldi	r22, 0x00	; 0
 706:	88 e0       	ldi	r24, 0x08	; 8
 708:	2e de       	rcall	.-932    	; 0x366 <rfm_22_write>

	return lenght;
	}
 70a:	8c 2f       	mov	r24, r28
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	08 95       	ret

00000712 <rs485_set_baudrate>:



/* Установка скорости RS485 */

void rs485_set_baudrate(uint8_t nbaudrate) {
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
 71a:	2d 97       	sbiw	r28, 0x0d	; 13
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	f8 94       	cli
 720:	de bf       	out	0x3e, r29	; 62
 722:	0f be       	out	0x3f, r0	; 63
 724:	cd bf       	out	0x3d, r28	; 61

    uint8_t baudrate_table[13] = {207, 103, 51, 34, 25, 16, 12, 8, 6, 3, 1, 1, 0};
 726:	9d e0       	ldi	r25, 0x0D	; 13
 728:	ec e6       	ldi	r30, 0x6C	; 108
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	de 01       	movw	r26, r28
 72e:	11 96       	adiw	r26, 0x01	; 1
 730:	01 90       	ld	r0, Z+
 732:	0d 92       	st	X+, r0
 734:	9a 95       	dec	r25
 736:	e1 f7       	brne	.-8      	; 0x730 <rs485_set_baudrate+0x1e>

    UBRRL = baudrate_table[nbaudrate];
 738:	e1 e0       	ldi	r30, 0x01	; 1
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	ec 0f       	add	r30, r28
 73e:	fd 1f       	adc	r31, r29
 740:	e8 0f       	add	r30, r24
 742:	f1 1d       	adc	r31, r1
 744:	80 81       	ld	r24, Z
 746:	89 b9       	out	0x09, r24	; 9
    }
 748:	2d 96       	adiw	r28, 0x0d	; 13
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	f8 94       	cli
 74e:	de bf       	out	0x3e, r29	; 62
 750:	0f be       	out	0x3f, r0	; 63
 752:	cd bf       	out	0x3d, r28	; 61
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	08 95       	ret

0000075a <rs485_init>:



void rs485_init(void) {

	UCSRA = RS485_UCSRA;				// конфигурация UART
 75a:	82 e0       	ldi	r24, 0x02	; 2
 75c:	8b b9       	out	0x0b, r24	; 11
	UCSRB = RS485_UCSRB;
 75e:	88 e9       	ldi	r24, 0x98	; 152
 760:	8a b9       	out	0x0a, r24	; 10
	UCSRC = RS485_UCSRC;
 762:	8e e8       	ldi	r24, 0x8E	; 142
 764:	80 bd       	out	0x20, r24	; 32


    UBRRL = 103;
 766:	87 e6       	ldi	r24, 0x67	; 103
 768:	89 b9       	out	0x09, r24	; 9
//	rs485_set_baudrate(RS485_DEFAULT_BAUDRATE);
	UBRRH = 0;
 76a:	10 bc       	out	0x20, r1	; 32

	TCCR0 = RS485_TCCR0;
 76c:	84 e0       	ldi	r24, 0x04	; 4
 76e:	83 bf       	out	0x33, r24	; 51

	RS485_DDR |= RS485_EN_PIN;
 770:	a5 9a       	sbi	0x14, 5	; 20
 772:	08 95       	ret

00000774 <rs485_receive_packet>:



void rs485_receive_packet(void) {

    packet_condition = 0xff;
 774:	8f ef       	ldi	r24, 0xFF	; 255
 776:	80 93 7b 00 	sts	0x007B, r24
	npack=0;
 77a:	10 92 7d 00 	sts	0x007D, r1
 77e:	10 92 7c 00 	sts	0x007C, r1

	TCNT0 = 0;
 782:	12 be       	out	0x32, r1	; 50

    connect_address = UDR;
 784:	8c b1       	in	r24, 0x0c	; 12
 786:	80 93 7e 01 	sts	0x017E, r24

	while(TCNT0<PACKET_DELAY_TIME) {
 78a:	29 c0       	rjmp	.+82     	; 0x7de <rs485_receive_packet+0x6a>
		if (UCSRA & 0x80) {
 78c:	5f 9b       	sbis	0x0b, 7	; 11
 78e:	27 c0       	rjmp	.+78     	; 0x7de <rs485_receive_packet+0x6a>

			if(TCNT0 > SYMBOL_DELAY_TIME)   packet_condition = 0;	// если задержка более 1,5 символов - пакет игнорируется
 790:	82 b7       	in	r24, 0x32	; 50
 792:	87 33       	cpi	r24, 0x37	; 55
 794:	10 f0       	brcs	.+4      	; 0x79a <rs485_receive_packet+0x26>
 796:	10 92 7b 00 	sts	0x007B, r1

			*(buffer+npack)=UDR;								    // записывает байт в буфер
 79a:	e0 91 7c 00 	lds	r30, 0x007C
 79e:	f0 91 7d 00 	lds	r31, 0x007D
 7a2:	e2 58       	subi	r30, 0x82	; 130
 7a4:	ff 4f       	sbci	r31, 0xFF	; 255
 7a6:	8c b1       	in	r24, 0x0c	; 12
 7a8:	80 83       	st	Z, r24
			if (npack<64) rfm_22_write(0x7f,*(buffer+npack));	    // записывает приятый байт в RFM
 7aa:	80 91 7c 00 	lds	r24, 0x007C
 7ae:	90 91 7d 00 	lds	r25, 0x007D
 7b2:	80 34       	cpi	r24, 0x40	; 64
 7b4:	91 05       	cpc	r25, r1
 7b6:	48 f4       	brcc	.+18     	; 0x7ca <rs485_receive_packet+0x56>
 7b8:	e0 91 7c 00 	lds	r30, 0x007C
 7bc:	f0 91 7d 00 	lds	r31, 0x007D
 7c0:	e2 58       	subi	r30, 0x82	; 130
 7c2:	ff 4f       	sbci	r31, 0xFF	; 255
 7c4:	60 81       	ld	r22, Z
 7c6:	8f e7       	ldi	r24, 0x7F	; 127
 7c8:	ce dd       	rcall	.-1124   	; 0x366 <rfm_22_write>
			++npack;
 7ca:	80 91 7c 00 	lds	r24, 0x007C
 7ce:	90 91 7d 00 	lds	r25, 0x007D
 7d2:	01 96       	adiw	r24, 0x01	; 1
 7d4:	90 93 7d 00 	sts	0x007D, r25
 7d8:	80 93 7c 00 	sts	0x007C, r24

			TCNT0=0;											    // обнуляет таймер - счетчик
 7dc:	12 be       	out	0x32, r1	; 50

	TCNT0 = 0;

    connect_address = UDR;

	while(TCNT0<PACKET_DELAY_TIME) {
 7de:	82 b7       	in	r24, 0x32	; 50
 7e0:	8d 37       	cpi	r24, 0x7D	; 125
 7e2:	a0 f2       	brcs	.-88     	; 0x78c <rs485_receive_packet+0x18>

			TCNT0=0;											    // обнуляет таймер - счетчик
			}
		}

    if ((npack > 256) | (npack == 0)) packet_condition = 0;
 7e4:	80 91 7c 00 	lds	r24, 0x007C
 7e8:	90 91 7d 00 	lds	r25, 0x007D
 7ec:	20 91 7c 00 	lds	r18, 0x007C
 7f0:	30 91 7d 00 	lds	r19, 0x007D
 7f4:	23 2b       	or	r18, r19
 7f6:	19 f0       	breq	.+6      	; 0x7fe <rs485_receive_packet+0x8a>
 7f8:	81 30       	cpi	r24, 0x01	; 1
 7fa:	91 40       	sbci	r25, 0x01	; 1
 7fc:	10 f0       	brcs	.+4      	; 0x802 <rs485_receive_packet+0x8e>
 7fe:	10 92 7b 00 	sts	0x007B, r1
 802:	08 95       	ret

00000804 <rs485_transmit_packet>:
 804:	ad 9a       	sbi	0x15, 5	; 21
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	08 c0       	rjmp	.+16     	; 0x81c <rs485_transmit_packet+0x18>
 80c:	5d 9b       	sbis	0x0b, 5	; 11
 80e:	fe cf       	rjmp	.-4      	; 0x80c <rs485_transmit_packet+0x8>
 810:	fc 01       	movw	r30, r24
 812:	e2 58       	subi	r30, 0x82	; 130
 814:	ff 4f       	sbci	r31, 0xFF	; 255
 816:	20 81       	ld	r18, Z
 818:	2c b9       	out	0x0c, r18	; 12
 81a:	01 96       	adiw	r24, 0x01	; 1
 81c:	20 91 7c 00 	lds	r18, 0x007C
 820:	30 91 7d 00 	lds	r19, 0x007D
 824:	82 17       	cp	r24, r18
 826:	93 07       	cpc	r25, r19
 828:	88 f3       	brcs	.-30     	; 0x80c <rs485_transmit_packet+0x8>
 82a:	5e 9a       	sbi	0x0b, 6	; 11
 82c:	5e 9b       	sbis	0x0b, 6	; 11
 82e:	fe cf       	rjmp	.-4      	; 0x82c <rs485_transmit_packet+0x28>
 830:	ad 98       	cbi	0x15, 5	; 21
 832:	8c b1       	in	r24, 0x0c	; 12
 834:	8c b1       	in	r24, 0x0c	; 12
 836:	8c b1       	in	r24, 0x0c	; 12
 838:	10 92 7b 00 	sts	0x007B, r1
 83c:	08 95       	ret

0000083e <main>:
 83e:	de dc       	rcall	.-1604   	; 0x1fc <init>
 840:	c0 ec       	ldi	r28, 0xC0	; 192
 842:	5a de       	rcall	.-844    	; 0x4f8 <rfm_22_clear>
 844:	ca bf       	out	0x3a, r28	; 58
 846:	8c b1       	in	r24, 0x0c	; 12
 848:	8c b1       	in	r24, 0x0c	; 12
 84a:	78 94       	sei
 84c:	88 95       	sleep
 84e:	f9 cf       	rjmp	.-14     	; 0x842 <main+0x4>

00000850 <__eerd_byte_m8>:
 850:	e1 99       	sbic	0x1c, 1	; 28
 852:	fe cf       	rjmp	.-4      	; 0x850 <__eerd_byte_m8>
 854:	9f bb       	out	0x1f, r25	; 31
 856:	8e bb       	out	0x1e, r24	; 30
 858:	e0 9a       	sbi	0x1c, 0	; 28
 85a:	99 27       	eor	r25, r25
 85c:	8d b3       	in	r24, 0x1d	; 29
 85e:	08 95       	ret

00000860 <_exit>:
 860:	f8 94       	cli

00000862 <__stop_program>:
 862:	ff cf       	rjmp	.-2      	; 0x862 <__stop_program>
