
bin/Debug/modem_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a72  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00001a72  00001b26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000014a  0080006e  0080006e  00001b34  2**0
                  ALLOC
  3 .eeprom       00000046  00810000  00810000  00001b34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00003348  00000000  00000000  00001b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000112c  00000000  00000000  00004ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005ff0  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	aa c0       	rjmp	.+340    	; 0x158 <__vector_1>
       4:	1a c1       	rjmp	.+564    	; 0x23a <__vector_2>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	67 c0       	rjmp	.+206    	; 0xe6 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e2 e7       	ldi	r30, 0x72	; 114
      3a:	fa e1       	ldi	r31, 0x1A	; 26
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	ae 36       	cpi	r26, 0x6E	; 110
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	11 e0       	ldi	r17, 0x01	; 1
      4a:	ae e6       	ldi	r26, 0x6E	; 110
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a8 3b       	cpi	r26, 0xB8	; 184
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	97 dc       	rcall	.-1746   	; 0xfffff988 <__eeprom_end+0xff7ef942>
      5a:	09 cd       	rjmp	.-1518   	; 0xfffffa6e <__eeprom_end+0xff7efa28>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <led_flash>:


/* отладочная функция (тупо мигает светодиодами) */

void led_flash(register uint8_t i, uint8_t type) {
	uint8_t led = LED_PIN, flash1, flash2;
      5e:	a0 b3       	in	r26, 0x10	; 16
	switch(type) {
      60:	61 30       	cpi	r22, 0x01	; 1
      62:	31 f0       	breq	.+12     	; 0x70 <led_flash+0x12>
      64:	68 f0       	brcs	.+26     	; 0x80 <led_flash+0x22>
      66:	62 30       	cpi	r22, 0x02	; 2
      68:	41 f0       	breq	.+16     	; 0x7a <led_flash+0x1c>
      6a:	63 30       	cpi	r22, 0x03	; 3
      6c:	59 f4       	brne	.+22     	; 0x84 <led_flash+0x26>
      6e:	02 c0       	rjmp	.+4      	; 0x74 <led_flash+0x16>
		case 0 : flash1=0;
				 flash2=0;
				 break;
		case 1 : flash1=RED_LED;
				 flash2=GREEN_LED;
      70:	70 e4       	ldi	r23, 0x40	; 64
      72:	01 c0       	rjmp	.+2      	; 0x76 <led_flash+0x18>
				 break;
		case 3 : flash1=RED_LED;
				 flash2=0;
      74:	70 e0       	ldi	r23, 0x00	; 0
				 flash2=0;
				 break;
		case 1 : flash1=RED_LED;
				 flash2=GREEN_LED;
				 break;
		case 3 : flash1=RED_LED;
      76:	90 e2       	ldi	r25, 0x20	; 32
				 flash2=0;
				 break;
      78:	05 c0       	rjmp	.+10     	; 0x84 <led_flash+0x26>
		case 2 : flash1=GREEN_LED;
				 flash2=0;
      7a:	70 e0       	ldi	r23, 0x00	; 0
				 flash2=GREEN_LED;
				 break;
		case 3 : flash1=RED_LED;
				 flash2=0;
				 break;
		case 2 : flash1=GREEN_LED;
      7c:	90 e4       	ldi	r25, 0x40	; 64
				 flash2=0;
				 break;
      7e:	02 c0       	rjmp	.+4      	; 0x84 <led_flash+0x26>

void led_flash(register uint8_t i, uint8_t type) {
	uint8_t led = LED_PIN, flash1, flash2;
	switch(type) {
		case 0 : flash1=0;
				 flash2=0;
      80:	70 e0       	ldi	r23, 0x00	; 0
/* отладочная функция (тупо мигает светодиодами) */

void led_flash(register uint8_t i, uint8_t type) {
	uint8_t led = LED_PIN, flash1, flash2;
	switch(type) {
		case 0 : flash1=0;
      82:	90 e0       	ldi	r25, 0x00	; 0
				 break;
		case 2 : flash1=GREEN_LED;
				 flash2=0;
				 break;
		}
	++i;
      84:	8f 5f       	subi	r24, 0xFF	; 255
	while(--i) {
		LED_PORT |= flash1;
		LED_PORT &= ~flash2;
      86:	67 2f       	mov	r22, r23
      88:	60 95       	com	r22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      8a:	48 ec       	ldi	r20, 0xC8	; 200
      8c:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(200);
		LED_PORT |= flash2;
		LED_PORT &= ~flash1;
      8e:	b9 2f       	mov	r27, r25
      90:	b0 95       	com	r27
		case 2 : flash1=GREEN_LED;
				 flash2=0;
				 break;
		}
	++i;
	while(--i) {
      92:	1c c0       	rjmp	.+56     	; 0xcc <led_flash+0x6e>
		LED_PORT |= flash1;
      94:	22 b3       	in	r18, 0x12	; 18
      96:	29 2b       	or	r18, r25
      98:	22 bb       	out	0x12, r18	; 18
		LED_PORT &= ~flash2;
      9a:	22 b3       	in	r18, 0x12	; 18
      9c:	26 23       	and	r18, r22
      9e:	22 bb       	out	0x12, r18	; 18
      a0:	20 ed       	ldi	r18, 0xD0	; 208
      a2:	37 e0       	ldi	r19, 0x07	; 7
      a4:	fa 01       	movw	r30, r20
      a6:	31 97       	sbiw	r30, 0x01	; 1
      a8:	f1 f7       	brne	.-4      	; 0xa6 <led_flash+0x48>
      aa:	21 50       	subi	r18, 0x01	; 1
      ac:	31 09       	sbc	r19, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      ae:	d1 f7       	brne	.-12     	; 0xa4 <led_flash+0x46>
		_delay_ms(200);
		LED_PORT |= flash2;
      b0:	22 b3       	in	r18, 0x12	; 18
      b2:	27 2b       	or	r18, r23
      b4:	22 bb       	out	0x12, r18	; 18
		LED_PORT &= ~flash1;
      b6:	22 b3       	in	r18, 0x12	; 18
      b8:	2b 23       	and	r18, r27
      ba:	22 bb       	out	0x12, r18	; 18
      bc:	20 ed       	ldi	r18, 0xD0	; 208
      be:	37 e0       	ldi	r19, 0x07	; 7
      c0:	fa 01       	movw	r30, r20
      c2:	31 97       	sbiw	r30, 0x01	; 1
      c4:	f1 f7       	brne	.-4      	; 0xc2 <led_flash+0x64>
      c6:	21 50       	subi	r18, 0x01	; 1
      c8:	31 09       	sbc	r19, r1
      ca:	d1 f7       	brne	.-12     	; 0xc0 <led_flash+0x62>
		case 2 : flash1=GREEN_LED;
				 flash2=0;
				 break;
		}
	++i;
	while(--i) {
      cc:	81 50       	subi	r24, 0x01	; 1
      ce:	11 f7       	brne	.-60     	; 0x94 <led_flash+0x36>
		_delay_ms(200);
		LED_PORT |= flash2;
		LED_PORT &= ~flash1;
		_delay_ms(200);
		}
	LED_PORT = led;
      d0:	a2 bb       	out	0x12, r26	; 18
      d2:	80 ea       	ldi	r24, 0xA0	; 160
      d4:	9f e0       	ldi	r25, 0x0F	; 15
      d6:	28 ec       	ldi	r18, 0xC8	; 200
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	f9 01       	movw	r30, r18
      dc:	31 97       	sbiw	r30, 0x01	; 1
      de:	f1 f7       	brne	.-4      	; 0xdc <led_flash+0x7e>
      e0:	01 97       	sbiw	r24, 0x01	; 1
      e2:	d9 f7       	brne	.-10     	; 0xda <led_flash+0x7c>
	_delay_ms(400);
	}
      e4:	08 95       	ret

000000e6 <__vector_11>:



/*   обработчики прерываний   */

ISR (USART_RXC_vect) {
      e6:	1f 92       	push	r1
      e8:	0f 92       	push	r0
      ea:	0f b6       	in	r0, 0x3f	; 63
      ec:	0f 92       	push	r0
      ee:	11 24       	eor	r1, r1
      f0:	2f 93       	push	r18
      f2:	3f 93       	push	r19
      f4:	4f 93       	push	r20
      f6:	5f 93       	push	r21
      f8:	6f 93       	push	r22
      fa:	7f 93       	push	r23
      fc:	8f 93       	push	r24
      fe:	9f 93       	push	r25
     100:	af 93       	push	r26
     102:	bf 93       	push	r27
     104:	ef 93       	push	r30
     106:	ff 93       	push	r31

	cli();
     108:	f8 94       	cli

	rfm_22_write(0x08,0x01);						//стирает fifo
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	88 e0       	ldi	r24, 0x08	; 8
     10e:	32 d5       	rcall	.+2660   	; 0xb74 <rfm_22_write>
	rfm_22_write(0x08,0x00);
     110:	60 e0       	ldi	r22, 0x00	; 0
     112:	88 e0       	ldi	r24, 0x08	; 8
     114:	2f d5       	rcall	.+2654   	; 0xb74 <rfm_22_write>

	rs485_receive_packet();
     116:	a2 d6       	rcall	.+3396   	; 0xe5c <rs485_receive_packet>

	if ( npack > 0 ) {								//если пакет принят
     118:	80 91 71 00 	lds	r24, 0x0071
     11c:	88 23       	and	r24, r24
     11e:	59 f0       	breq	.+22     	; 0x136 <__vector_11+0x50>
		switch (device_type) {
     120:	80 91 b6 01 	lds	r24, 0x01B6
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	19 f0       	breq	.+6      	; 0x12e <__vector_11+0x48>
     128:	83 30       	cpi	r24, 0x03	; 3
     12a:	29 f4       	brne	.+10     	; 0x136 <__vector_11+0x50>
     12c:	03 c0       	rjmp	.+6      	; 0x134 <__vector_11+0x4e>
			case 1 : RS485_PORT |= RS485_EN_PIN;
     12e:	ad 9a       	sbi	0x15, 5	; 21
					transmit_data_packet();			//отсылает пакет по радиоканалу
     130:	5f d3       	rcall	.+1726   	; 0x7f0 <transmit_data_packet>
					break;
     132:	01 c0       	rjmp	.+2      	; 0x136 <__vector_11+0x50>
			case 3 : master_transmit();	break;		//отсылает пакет по радиоканалу
     134:	9b d3       	rcall	.+1846   	; 0x86c <master_transmit>
			}
		}
	}
     136:	ff 91       	pop	r31
     138:	ef 91       	pop	r30
     13a:	bf 91       	pop	r27
     13c:	af 91       	pop	r26
     13e:	9f 91       	pop	r25
     140:	8f 91       	pop	r24
     142:	7f 91       	pop	r23
     144:	6f 91       	pop	r22
     146:	5f 91       	pop	r21
     148:	4f 91       	pop	r20
     14a:	3f 91       	pop	r19
     14c:	2f 91       	pop	r18
     14e:	0f 90       	pop	r0
     150:	0f be       	out	0x3f, r0	; 63
     152:	0f 90       	pop	r0
     154:	1f 90       	pop	r1
     156:	18 95       	reti

00000158 <__vector_1>:




ISR (INT0_vect) {									//если RFM принял пакет
     158:	1f 92       	push	r1
     15a:	0f 92       	push	r0
     15c:	0f b6       	in	r0, 0x3f	; 63
     15e:	0f 92       	push	r0
     160:	11 24       	eor	r1, r1
     162:	2f 93       	push	r18
     164:	3f 93       	push	r19
     166:	4f 93       	push	r20
     168:	5f 93       	push	r21
     16a:	6f 93       	push	r22
     16c:	7f 93       	push	r23
     16e:	8f 93       	push	r24
     170:	9f 93       	push	r25
     172:	af 93       	push	r26
     174:	bf 93       	push	r27
     176:	ef 93       	push	r30
     178:	ff 93       	push	r31

	cli();
     17a:	f8 94       	cli

	led_flash(2,2);
     17c:	62 e0       	ldi	r22, 0x02	; 2
     17e:	82 e0       	ldi	r24, 0x02	; 2
     180:	6e df       	rcall	.-292    	; 0x5e <led_flash>

	switch (device_type) {
     182:	80 91 b6 01 	lds	r24, 0x01B6
     186:	82 30       	cpi	r24, 0x02	; 2
     188:	31 f0       	breq	.+12     	; 0x196 <__vector_1+0x3e>
     18a:	83 30       	cpi	r24, 0x03	; 3
     18c:	31 f0       	breq	.+12     	; 0x19a <__vector_1+0x42>
     18e:	81 30       	cpi	r24, 0x01	; 1
     190:	29 f4       	brne	.+10     	; 0x19c <__vector_1+0x44>
		case 1 : packet_handler_slave();	break;	//запускает обработчики пакетов
     192:	44 d2       	rcall	.+1160   	; 0x61c <packet_handler_slave>
     194:	03 c0       	rjmp	.+6      	; 0x19c <__vector_1+0x44>
		case 2 : packet_handler_master();	break;
     196:	df d1       	rcall	.+958    	; 0x556 <packet_handler_master>
     198:	01 c0       	rjmp	.+2      	; 0x19c <__vector_1+0x44>
		case 3 : packet_handler_retx();  	break;
     19a:	b9 d3       	rcall	.+1906   	; 0x90e <packet_handler_retx>
		}
	}
     19c:	ff 91       	pop	r31
     19e:	ef 91       	pop	r30
     1a0:	bf 91       	pop	r27
     1a2:	af 91       	pop	r26
     1a4:	9f 91       	pop	r25
     1a6:	8f 91       	pop	r24
     1a8:	7f 91       	pop	r23
     1aa:	6f 91       	pop	r22
     1ac:	5f 91       	pop	r21
     1ae:	4f 91       	pop	r20
     1b0:	3f 91       	pop	r19
     1b2:	2f 91       	pop	r18
     1b4:	0f 90       	pop	r0
     1b6:	0f be       	out	0x3f, r0	; 63
     1b8:	0f 90       	pop	r0
     1ba:	1f 90       	pop	r1
     1bc:	18 95       	reti

000001be <reset_slave>:

/*  функции сброса  */

void reset_slave (void) {

	eeprom_write_byte(&master_address_eep, 0);			// в случае ведомого устройства сбрасывает master_address и списки ведущего
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	82 e4       	ldi	r24, 0x42	; 66
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	47 dc       	rcall	.-1906   	; 0xfffffa54 <__eeprom_end+0xff7efa0e>
	eeprom_write_byte(&nmodem_eep, 0);
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	80 e4       	ldi	r24, 0x40	; 64
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	43 dc       	rcall	.-1914   	; 0xfffffa54 <__eeprom_end+0xff7efa0e>
	eeprom_write_byte(&nretx_eep, 0);
     1ce:	60 e0       	ldi	r22, 0x00	; 0
     1d0:	81 e4       	ldi	r24, 0x41	; 65
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	3f dc       	rcall	.-1922   	; 0xfffffa54 <__eeprom_end+0xff7efa0e>
	master_address=0;
     1d6:	10 92 6f 00 	sts	0x006F, r1
	nmodem=0;
     1da:	10 92 b2 00 	sts	0x00B2, r1
	nretx=0;
     1de:	10 92 b7 01 	sts	0x01B7, r1
	LED_PORT |= RED_LED; 								// включает красный светодиод
     1e2:	95 9a       	sbi	0x12, 5	; 18
     1e4:	08 95       	ret

000001e6 <reset_master>:
	}




void reset_master (void) {
     1e6:	cf 93       	push	r28

	register uint8_t i=0;
	uint8_t temp;

	temp = nmodem;
     1e8:	c0 91 b2 00 	lds	r28, 0x00B2
	nmodem = ping(0x08, modem_address, nmodem);												// опрашивает устройства, дополняет список
     1ec:	40 91 b2 00 	lds	r20, 0x00B2
     1f0:	62 e7       	ldi	r22, 0x72	; 114
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	88 e0       	ldi	r24, 0x08	; 8
     1f6:	bd d5       	rcall	.+2938   	; 0xd72 <ping>
     1f8:	80 93 b2 00 	sts	0x00B2, r24
	for (i=temp ; i<nmodem ; ++i)	eeprom_write_byte(&modem_address_eep[i],modem_address[i]);	// записывает в eeprom
     1fc:	0a c0       	rjmp	.+20     	; 0x212 <reset_master+0x2c>
     1fe:	8c 2f       	mov	r24, r28
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	fc 01       	movw	r30, r24
     204:	ee 58       	subi	r30, 0x8E	; 142
     206:	ff 4f       	sbci	r31, 0xFF	; 255
     208:	60 81       	ld	r22, Z
     20a:	80 5f       	subi	r24, 0xF0	; 240
     20c:	9f 4f       	sbci	r25, 0xFF	; 255
     20e:	22 dc       	rcall	.-1980   	; 0xfffffa54 <__eeprom_end+0xff7efa0e>
     210:	cf 5f       	subi	r28, 0xFF	; 255
     212:	80 91 b2 00 	lds	r24, 0x00B2
     216:	c8 17       	cp	r28, r24
     218:	90 f3       	brcs	.-28     	; 0x1fe <reset_master+0x18>
	if (nmodem + nretx)  	LED_PORT &= ~RED_LED;												// если количество устройств в сети не 0 выключает красный светодиод
     21a:	20 91 b2 00 	lds	r18, 0x00B2
     21e:	80 91 b7 01 	lds	r24, 0x01B7
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	82 0f       	add	r24, r18
     226:	91 1d       	adc	r25, r1
     228:	89 2b       	or	r24, r25
     22a:	11 f0       	breq	.+4      	; 0x230 <reset_master+0x4a>
     22c:	95 98       	cbi	0x12, 5	; 18
     22e:	01 c0       	rjmp	.+2      	; 0x232 <reset_master+0x4c>
	else	LED_PORT |= RED_LED;																// иначе включает
     230:	95 9a       	sbi	0x12, 5	; 18
	led_flash(2,1);
     232:	61 e0       	ldi	r22, 0x01	; 1
     234:	82 e0       	ldi	r24, 0x02	; 2
	}
     236:	cf 91       	pop	r28
	temp = nmodem;
	nmodem = ping(0x08, modem_address, nmodem);												// опрашивает устройства, дополняет список
	for (i=temp ; i<nmodem ; ++i)	eeprom_write_byte(&modem_address_eep[i],modem_address[i]);	// записывает в eeprom
	if (nmodem + nretx)  	LED_PORT &= ~RED_LED;												// если количество устройств в сети не 0 выключает красный светодиод
	else	LED_PORT |= RED_LED;																// иначе включает
	led_flash(2,1);
     238:	12 cf       	rjmp	.-476    	; 0x5e <led_flash>

0000023a <__vector_2>:
	}




ISR (INT1_vect) {									//если была нажата кнопка reset
     23a:	1f 92       	push	r1
     23c:	0f 92       	push	r0
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	0f 92       	push	r0
     242:	11 24       	eor	r1, r1
     244:	2f 93       	push	r18
     246:	3f 93       	push	r19
     248:	4f 93       	push	r20
     24a:	5f 93       	push	r21
     24c:	6f 93       	push	r22
     24e:	7f 93       	push	r23
     250:	8f 93       	push	r24
     252:	9f 93       	push	r25
     254:	af 93       	push	r26
     256:	bf 93       	push	r27
     258:	ef 93       	push	r30
     25a:	ff 93       	push	r31

	cli();
     25c:	f8 94       	cli
     25e:	80 e2       	ldi	r24, 0x20	; 32
     260:	9e e4       	ldi	r25, 0x4E	; 78
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <__vector_2+0x28>

//	BUTTON_PORT |= BUTTON_EN;						// вкл подтягивающий резистор на кнопке

	_delay_ms(10);									//задержка от дребезга

	if (~(BUTTON_PIN & BUTTON_EN)) {
     266:	80 b3       	in	r24, 0x10	; 16
		led_flash(2,3);
     268:	63 e0       	ldi	r22, 0x03	; 3
     26a:	82 e0       	ldi	r24, 0x02	; 2
     26c:	f8 de       	rcall	.-528    	; 0x5e <led_flash>
		switch (device_type) {
     26e:	80 91 b6 01 	lds	r24, 0x01B6
     272:	82 30       	cpi	r24, 0x02	; 2
     274:	31 f0       	breq	.+12     	; 0x282 <__vector_2+0x48>
     276:	83 30       	cpi	r24, 0x03	; 3
     278:	21 f0       	breq	.+8      	; 0x282 <__vector_2+0x48>
     27a:	81 30       	cpi	r24, 0x01	; 1
     27c:	19 f4       	brne	.+6      	; 0x284 <__vector_2+0x4a>
			case 1 : reset_slave();		break;		//в случае slave - сброс всего
     27e:	9f df       	rcall	.-194    	; 0x1be <reset_slave>
     280:	01 c0       	rjmp	.+2      	; 0x284 <__vector_2+0x4a>
			case 2 : reset_master();	break;		//в случае master - дополнение списка устройств
			case 3 : reset_master();	break;		//в случае ретранслятора - аналогично
     282:	b1 df       	rcall	.-158    	; 0x1e6 <reset_master>
			}
		}
	}
     284:	ff 91       	pop	r31
     286:	ef 91       	pop	r30
     288:	bf 91       	pop	r27
     28a:	af 91       	pop	r26
     28c:	9f 91       	pop	r25
     28e:	8f 91       	pop	r24
     290:	7f 91       	pop	r23
     292:	6f 91       	pop	r22
     294:	5f 91       	pop	r21
     296:	4f 91       	pop	r20
     298:	3f 91       	pop	r19
     29a:	2f 91       	pop	r18
     29c:	0f 90       	pop	r0
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	0f 90       	pop	r0
     2a2:	1f 90       	pop	r1
     2a4:	18 95       	reti

000002a6 <init>:



/*  инициализация модема  */

void init (void) {
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	88 e8       	ldi	r24, 0x88	; 136
     2ae:	93 e1       	ldi	r25, 0x13	; 19
     2b0:	28 ec       	ldi	r18, 0xC8	; 200
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	f9 01       	movw	r30, r18
     2b6:	31 97       	sbiw	r30, 0x01	; 1
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <init+0x10>
     2ba:	01 97       	sbiw	r24, 0x01	; 1
     2bc:	d9 f7       	brne	.-10     	; 0x2b4 <init+0xe>

	register uint8_t i;

	uint8_t temp;

	LED_DDR |= GREEN_LED + RED_LED;				// инициалиация светодиодов
     2be:	81 b3       	in	r24, 0x11	; 17
     2c0:	80 66       	ori	r24, 0x60	; 96
     2c2:	81 bb       	out	0x11, r24	; 17
	JUMPER_PORT |= JUMPER_RETX + JUMPER_MS;		//вкл подтягивающие резисторы на перемычках
     2c4:	88 b3       	in	r24, 0x18	; 24
     2c6:	86 60       	ori	r24, 0x06	; 6
     2c8:	88 bb       	out	0x18, r24	; 24
     2ca:	80 ed       	ldi	r24, 0xD0	; 208
     2cc:	97 e0       	ldi	r25, 0x07	; 7
     2ce:	01 97       	sbiw	r24, 0x01	; 1
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <init+0x28>

	_delay_ms(1);

	if(JUMPER_PIN & JUMPER_RETX) {				//считывает состояния перемычек
     2d2:	b1 9b       	sbis	0x16, 1	; 22
     2d4:	41 c0       	rjmp	.+130    	; 0x358 <init+0xb2>

		rs485_init();
     2d6:	b5 d5       	rcall	.+2922   	; 0xe42 <rs485_init>

		if(JUMPER_PIN & JUMPER_MS) {
     2d8:	b2 9b       	sbis	0x16, 2	; 22
     2da:	0d c0       	rjmp	.+26     	; 0x2f6 <init+0x50>
			device_type=1;											//тип устройства - модем конечного устройства
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	80 93 b6 01 	sts	0x01B6, r24
			master_address = eeprom_read_byte(&master_address_eep);	//считывает master_address
     2e2:	82 e4       	ldi	r24, 0x42	; 66
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	ae db       	rcall	.-2212   	; 0xfffffa44 <__eeprom_end+0xff7ef9fe>
     2e8:	80 93 6f 00 	sts	0x006F, r24
			if (master_address == 0) LED_PORT |= RED_LED;			//если устройство не привязано к сети - включает красный светодиод
     2ec:	80 91 6f 00 	lds	r24, 0x006F
     2f0:	81 11       	cpse	r24, r1
     2f2:	6f c0       	rjmp	.+222    	; 0x3d2 <init+0x12c>
     2f4:	69 c0       	rjmp	.+210    	; 0x3c8 <init+0x122>
			}

		else {
			device_type=2;											//тип устройства - модем на сервере
     2f6:	82 e0       	ldi	r24, 0x02	; 2
     2f8:	80 93 b6 01 	sts	0x01B6, r24
			nretx=eeprom_read_byte(&nretx_eep);
     2fc:	81 e4       	ldi	r24, 0x41	; 65
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	a1 db       	rcall	.-2238   	; 0xfffffa44 <__eeprom_end+0xff7ef9fe>
     302:	80 93 b7 01 	sts	0x01B7, r24
			nmodem=eeprom_read_byte(&nmodem_eep);
     306:	80 e4       	ldi	r24, 0x40	; 64
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	9c db       	rcall	.-2248   	; 0xfffffa44 <__eeprom_end+0xff7ef9fe>
     30c:	80 93 b2 00 	sts	0x00B2, r24
			for ( i=0 ; i<nmodem ; ++i)	*(modem_address + i) = eeprom_read_byte(&modem_address_eep[i]);
     310:	10 e0       	ldi	r17, 0x00	; 0
     312:	0a c0       	rjmp	.+20     	; 0x328 <init+0x82>
     314:	81 2f       	mov	r24, r17
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	ec 01       	movw	r28, r24
     31a:	ce 58       	subi	r28, 0x8E	; 142
     31c:	df 4f       	sbci	r29, 0xFF	; 255
     31e:	80 5f       	subi	r24, 0xF0	; 240
     320:	9f 4f       	sbci	r25, 0xFF	; 255
     322:	90 db       	rcall	.-2272   	; 0xfffffa44 <__eeprom_end+0xff7ef9fe>
     324:	88 83       	st	Y, r24
     326:	1f 5f       	subi	r17, 0xFF	; 255
     328:	80 91 b2 00 	lds	r24, 0x00B2
     32c:	18 17       	cp	r17, r24
     32e:	90 f3       	brcs	.-28     	; 0x314 <init+0x6e>
     330:	10 e0       	ldi	r17, 0x00	; 0
     332:	0a c0       	rjmp	.+20     	; 0x348 <init+0xa2>
			for ( i=0 ; i<nretx ; ++i)	*(retx_address + i) = eeprom_read_byte(&retx_address_eep[i]);
     334:	81 2f       	mov	r24, r17
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	ec 01       	movw	r28, r24
     33a:	ce 55       	subi	r28, 0x5E	; 94
     33c:	df 4f       	sbci	r29, 0xFF	; 255
     33e:	80 50       	subi	r24, 0x00	; 0
     340:	90 40       	sbci	r25, 0x00	; 0
     342:	80 db       	rcall	.-2304   	; 0xfffffa44 <__eeprom_end+0xff7ef9fe>
     344:	88 83       	st	Y, r24
     346:	1f 5f       	subi	r17, 0xFF	; 255
     348:	80 91 b7 01 	lds	r24, 0x01B7
     34c:	18 17       	cp	r17, r24
     34e:	90 f3       	brcs	.-28     	; 0x334 <init+0x8e>

			led_flash(2,1);
     350:	61 e0       	ldi	r22, 0x01	; 1
     352:	82 e0       	ldi	r24, 0x02	; 2
     354:	84 de       	rcall	.-760    	; 0x5e <led_flash>
     356:	2f c0       	rjmp	.+94     	; 0x3b6 <init+0x110>
			}

		}

	else {
		if(JUMPER_PIN & JUMPER_MS) {
     358:	b2 9b       	sbis	0x16, 2	; 22
     35a:	38 c0       	rjmp	.+112    	; 0x3cc <init+0x126>
			device_type=3;											//тип устройства - ретранслятор
     35c:	83 e0       	ldi	r24, 0x03	; 3
     35e:	80 93 b6 01 	sts	0x01B6, r24
			nretx=eeprom_read_byte(&nretx_eep);
     362:	81 e4       	ldi	r24, 0x41	; 65
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	6e db       	rcall	.-2340   	; 0xfffffa44 <__eeprom_end+0xff7ef9fe>
     368:	80 93 b7 01 	sts	0x01B7, r24
			nmodem=eeprom_read_byte(&nmodem_eep);
     36c:	80 e4       	ldi	r24, 0x40	; 64
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	69 db       	rcall	.-2350   	; 0xfffffa44 <__eeprom_end+0xff7ef9fe>
     372:	80 93 b2 00 	sts	0x00B2, r24
			for ( i=0 ; i<nmodem ; ++i)	*(modem_address + i) = eeprom_read_byte(&modem_address_eep[i]);
     376:	10 e0       	ldi	r17, 0x00	; 0
     378:	0a c0       	rjmp	.+20     	; 0x38e <init+0xe8>
     37a:	81 2f       	mov	r24, r17
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	ec 01       	movw	r28, r24
     380:	ce 58       	subi	r28, 0x8E	; 142
     382:	df 4f       	sbci	r29, 0xFF	; 255
     384:	80 5f       	subi	r24, 0xF0	; 240
     386:	9f 4f       	sbci	r25, 0xFF	; 255
     388:	5d db       	rcall	.-2374   	; 0xfffffa44 <__eeprom_end+0xff7ef9fe>
     38a:	88 83       	st	Y, r24
     38c:	1f 5f       	subi	r17, 0xFF	; 255
     38e:	80 91 b2 00 	lds	r24, 0x00B2
     392:	18 17       	cp	r17, r24
     394:	90 f3       	brcs	.-28     	; 0x37a <init+0xd4>
     396:	10 e0       	ldi	r17, 0x00	; 0
     398:	0a c0       	rjmp	.+20     	; 0x3ae <init+0x108>
			for ( i=0 ; i<nretx ; ++i)	*(retx_address + i) = eeprom_read_byte(&retx_address_eep[i]);
     39a:	81 2f       	mov	r24, r17
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	ec 01       	movw	r28, r24
     3a0:	ce 55       	subi	r28, 0x5E	; 94
     3a2:	df 4f       	sbci	r29, 0xFF	; 255
     3a4:	80 50       	subi	r24, 0x00	; 0
     3a6:	90 40       	sbci	r25, 0x00	; 0
     3a8:	4d db       	rcall	.-2406   	; 0xfffffa44 <__eeprom_end+0xff7ef9fe>
     3aa:	88 83       	st	Y, r24
     3ac:	1f 5f       	subi	r17, 0xFF	; 255
     3ae:	80 91 b7 01 	lds	r24, 0x01B7
     3b2:	18 17       	cp	r17, r24
     3b4:	90 f3       	brcs	.-28     	; 0x39a <init+0xf4>

			if ((nretx+nmodem) == 0) LED_PORT |= RED_LED;			// если нет устройств привязанных к сети - включает красный светодиод
     3b6:	20 91 b7 01 	lds	r18, 0x01B7
     3ba:	80 91 b2 00 	lds	r24, 0x00B2
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	82 0f       	add	r24, r18
     3c2:	91 1d       	adc	r25, r1
     3c4:	89 2b       	or	r24, r25
     3c6:	29 f4       	brne	.+10     	; 0x3d2 <init+0x12c>
     3c8:	95 9a       	sbi	0x12, 5	; 18
     3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <init+0x12c>
			}
		else {
			device_type=4;
     3cc:	84 e0       	ldi	r24, 0x04	; 4
     3ce:	80 93 b6 01 	sts	0x01B6, r24
			}
		}

	JUMPER_PORT &= ~(JUMPER_MS + JUMPER_RETX);	// выкл подтягивающие резисторы на перемычках
     3d2:	88 b3       	in	r24, 0x18	; 24
     3d4:	89 7f       	andi	r24, 0xF9	; 249
     3d6:	88 bb       	out	0x18, r24	; 24

	device_address = eeprom_read_byte(&device_address_eep);	// считывет адрес устроства
     3d8:	83 e4       	ldi	r24, 0x43	; 67
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	33 db       	rcall	.-2458   	; 0xfffffa44 <__eeprom_end+0xff7ef9fe>
     3de:	80 93 6e 00 	sts	0x006E, r24

	temp = rfm_22_init();						// инициализация RFM
     3e2:	e1 d3       	rcall	.+1986   	; 0xba6 <rfm_22_init>

	if(temp == 1) {
     3e4:	81 30       	cpi	r24, 0x01	; 1
     3e6:	a9 f4       	brne	.+42     	; 0x412 <init+0x16c>
     3e8:	15 e0       	ldi	r17, 0x05	; 5
     3ea:	c0 e5       	ldi	r28, 0x50	; 80
     3ec:	d3 ec       	ldi	r29, 0xC3	; 195

		for (i=0 ; i<5 ; ++i) {
		RFM_22_SDN_PORT |= RFM_22_SDN_EN;		// если RFM не отвечает, выключает, пробует инициализировать еще 5 раз
     3ee:	aa 9a       	sbi	0x15, 2	; 21
     3f0:	ce 01       	movw	r24, r28
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <init+0x14c>
		_delay_ms(25);
		temp=rfm_22_init();
     3f6:	d7 d3       	rcall	.+1966   	; 0xba6 <rfm_22_init>
		if (temp == 0) break;
     3f8:	88 23       	and	r24, r24
     3fa:	59 f0       	breq	.+22     	; 0x412 <init+0x16c>
     3fc:	11 50       	subi	r17, 0x01	; 1

	temp = rfm_22_init();						// инициализация RFM

	if(temp == 1) {

		for (i=0 ; i<5 ; ++i) {
     3fe:	b9 f7       	brne	.-18     	; 0x3ee <init+0x148>
		_delay_ms(25);
		temp=rfm_22_init();
		if (temp == 0) break;
		}

		if (temp == 1) {						// если все равно не отвечает - выключает RFM
     400:	81 30       	cpi	r24, 0x01	; 1
     402:	39 f4       	brne	.+14     	; 0x412 <init+0x16c>
			RFM_22_SDN_PORT |= RFM_22_SDN_EN;
     404:	aa 9a       	sbi	0x15, 2	; 21
			device_type = 0;
     406:	10 92 b6 01 	sts	0x01B6, r1

			LED_PORT |= RED_LED;
     40a:	95 9a       	sbi	0x12, 5	; 18

			led_flash(2,3);
     40c:	63 e0       	ldi	r22, 0x03	; 3
     40e:	82 e0       	ldi	r24, 0x02	; 2
     410:	26 de       	rcall	.-948    	; 0x5e <led_flash>
			}
		}

	if ((device_address == 0) | (device_type == 0)) {
     412:	80 91 6e 00 	lds	r24, 0x006E
     416:	90 91 b6 01 	lds	r25, 0x01B6
     41a:	99 23       	and	r25, r25
     41c:	11 f0       	breq	.+4      	; 0x422 <init+0x17c>
     41e:	81 11       	cpse	r24, r1
     420:	04 c0       	rjmp	.+8      	; 0x42a <init+0x184>
		LED_PORT |= RED_LED;			// если адрес устройства отсутствует, включает красный светодиод
     422:	95 9a       	sbi	0x12, 5	; 18
		device_type=0;
     424:	10 92 b6 01 	sts	0x01B6, r1
     428:	12 c0       	rjmp	.+36     	; 0x44e <init+0x1a8>
		}
	else {
		LED_PORT |= GREEN_LED; 			// если RFM инициализирован успешно и адрес устройтва успешно считан - включает зеленый светодиод
     42a:	96 9a       	sbi	0x12, 6	; 18
     42c:	88 ec       	ldi	r24, 0xC8	; 200
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	01 97       	sbiw	r24, 0x01	; 1
     432:	f1 f7       	brne	.-4      	; 0x430 <init+0x18a>
//		BUTTON_PORT |= BUTTON_EN;		// вкл подтягивающий резистор на кнопке
		_delay_us(100);					//хрен его зает зачем

		TCCR1B = INIT_TCCR1B;
     434:	85 e0       	ldi	r24, 0x05	; 5
     436:	8e bd       	out	0x2e, r24	; 46

		MCUCR = INIT_MCUCR;				// конфигурирует внешние прерывания
     438:	83 e0       	ldi	r24, 0x03	; 3
     43a:	85 bf       	out	0x35, r24	; 53
		GICR = INIT_GICR;
     43c:	80 ec       	ldi	r24, 0xC0	; 192
     43e:	8b bf       	out	0x3b, r24	; 59

		rfm_22_write(0x07,0x05);		//вкл приемник
     440:	65 e0       	ldi	r22, 0x05	; 5
     442:	87 e0       	ldi	r24, 0x07	; 7
     444:	97 d3       	rcall	.+1838   	; 0xb74 <rfm_22_write>
     446:	80 e9       	ldi	r24, 0x90	; 144
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <init+0x1a4>

		_delay_us(200);
		}
	}
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	08 95       	ret

00000456 <receive_single_data_packet>:

void receive_single_data_packet (void) {

	uint8_t lenght;

	if ( rfm_22_read(0x03) & 0x01 ) {			// РїСЂРѕРІРµСЂСЏРµС‚ crc
     456:	83 e0       	ldi	r24, 0x03	; 3
     458:	99 d3       	rcall	.+1842   	; 0xb8c <rfm_22_read>
     45a:	80 ff       	sbrs	r24, 0
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__stack+0x3>

		rfm_22_write(0x3b,0x03);				// РµСЃР»Рё РІСЃРµ С…СЂРµРЅРѕРІРѕ - РѕС‚РїСЂР°РІР»СЏРµС‚ РєРѕРјР°РЅРґСѓ РїРµСЂРµСЃР»Р°С‚СЊ РїР°РєРµС‚
     45e:	63 e0       	ldi	r22, 0x03	; 3
     460:	08 c0       	rjmp	.+16     	; 0x472 <__stack+0x13>
		rfm_22_transmit_packet(0,0);
		}

	else {
		lenght = rfm_22_read_packet(0);			// РµСЃР»Рё РІСЃРµ РЅРѕСЂРјР°Р»СЊРЅРѕ - СЃС‡РёС‚С‹РІР°РµС‚ РїР°РєРµС‚
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	6c d4       	rcall	.+2264   	; 0xd3e <rfm_22_read_packet>
		npack = lenght;
     466:	80 93 71 00 	sts	0x0071, r24
		packet_condition = 0xff;
     46a:	8f ef       	ldi	r24, 0xFF	; 255
     46c:	80 93 70 00 	sts	0x0070, r24

		rfm_22_write(0x3b,0x05);				// ... Рё РѕС‚РїСЂР°РІР»СЏРµС‚ РєРѕРјР°РЅРґСѓ "РїР°РєРµС‚ СѓСЃРїРµС€РЅРѕ РїРµСЂРµРґР°РЅ"
     470:	65 e0       	ldi	r22, 0x05	; 5
     472:	8b e3       	ldi	r24, 0x3B	; 59
     474:	7f d3       	rcall	.+1790   	; 0xb74 <rfm_22_write>
		rfm_22_transmit_packet(0,0);
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	3a c4       	rjmp	.+2164   	; 0xcf0 <rfm_22_transmit_packet>

0000047c <receive_multiple_data_packet>:





void receive_multiple_data_packet() {
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29

	uint8_t part, partn, lenght=0;

	part = header[2]>>4;
     480:	c0 91 b5 01 	lds	r28, 0x01B5
     484:	c2 95       	swap	r28
     486:	cf 70       	andi	r28, 0x0F	; 15
	partn = header[2] & 0x0f;
     488:	d0 91 b5 01 	lds	r29, 0x01B5
     48c:	df 70       	andi	r29, 0x0F	; 15

	if ( rfm_22_read(0x03) & 0x01 ) {								// РїСЂРѕРІРµСЂСЏРµС‚ crc
     48e:	83 e0       	ldi	r24, 0x03	; 3
     490:	7d d3       	rcall	.+1786   	; 0xb8c <rfm_22_read>
     492:	80 ff       	sbrs	r24, 0
     494:	14 c0       	rjmp	.+40     	; 0x4be <receive_multiple_data_packet+0x42>

		lenght = rfm_22_read_packet((partn-1)<<6);					// СЃС‡РёС‚С‹РІР°РµС‚ РїР°РєРµС‚
     496:	8d 2f       	mov	r24, r29
     498:	81 50       	subi	r24, 0x01	; 1
     49a:	82 95       	swap	r24
     49c:	88 0f       	add	r24, r24
     49e:	88 0f       	add	r24, r24
     4a0:	80 7c       	andi	r24, 0xC0	; 192
     4a2:	4d d4       	rcall	.+2202   	; 0xd3e <rfm_22_read_packet>

		packet_condition |= 1<<partn;								// РєРѕСЂСЂРµРєС‚РёСЂСѓРµС‚ Р±Р°Р№С‚ СЃРѕСЃС‚РѕСЏРЅРёСЏ РїР°РєРµС‚Р°
     4a4:	90 91 70 00 	lds	r25, 0x0070
     4a8:	21 e0       	ldi	r18, 0x01	; 1
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	0d 2e       	mov	r0, r29
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <receive_multiple_data_packet+0x36>
     4b0:	22 0f       	add	r18, r18
     4b2:	0a 94       	dec	r0
     4b4:	ea f7       	brpl	.-6      	; 0x4b0 <receive_multiple_data_packet+0x34>
     4b6:	92 2b       	or	r25, r18
     4b8:	90 93 70 00 	sts	0x0070, r25
     4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <receive_multiple_data_packet+0x44>



void receive_multiple_data_packet() {

	uint8_t part, partn, lenght=0;
     4be:	80 e0       	ldi	r24, 0x00	; 0
		lenght = rfm_22_read_packet((partn-1)<<6);					// СЃС‡РёС‚С‹РІР°РµС‚ РїР°РєРµС‚

		packet_condition |= 1<<partn;								// РєРѕСЂСЂРµРєС‚РёСЂСѓРµС‚ Р±Р°Р№С‚ СЃРѕСЃС‚РѕСЏРЅРёСЏ РїР°РєРµС‚Р°
		}

	if( part == partn ) {
     4c0:	cd 13       	cpse	r28, r29
     4c2:	07 c0       	rjmp	.+14     	; 0x4d2 <receive_multiple_data_packet+0x56>
		packet_condition += 0x80;									// РµСЃР»Рё РїРѕСЃР»РµРґРЅРёР№ РїР°РєРµС‚ - Р·Р°РїРѕР»РЅСЏРµС‚ Р±РёС‚ РїСЂРѕРІРµСЂРєРё crc
     4c4:	90 91 70 00 	lds	r25, 0x0070
     4c8:	90 58       	subi	r25, 0x80	; 128
     4ca:	90 93 70 00 	sts	0x0070, r25
		npack = lenght;
     4ce:	80 93 71 00 	sts	0x0071, r24
		}

	if( packet_condition > 0x7F ) {									// РµСЃР»Рё РїСЂРѕРІРµСЂРєР° crc РІРєР»СЋС‡РµРЅР°
     4d2:	80 91 70 00 	lds	r24, 0x0070
     4d6:	87 ff       	sbrs	r24, 7
     4d8:	3b c0       	rjmp	.+118    	; 0x550 <receive_multiple_data_packet+0xd4>
		if( ((packet_condition & 0x7f) +1) < (1<<part) )  {		// РїСЂРѕРІРµСЂСЏРµС‚, РµСЃС‚СЊ Р»Рё Р±РёС‚С‹Рµ РїР°РєРµС‚С‹
     4da:	20 91 70 00 	lds	r18, 0x0070
     4de:	2f 77       	andi	r18, 0x7F	; 127
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	2f 5f       	subi	r18, 0xFF	; 255
     4e4:	3f 4f       	sbci	r19, 0xFF	; 255
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0c 2e       	mov	r0, r28
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <receive_multiple_data_packet+0x76>
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	0a 94       	dec	r0
     4f4:	e2 f7       	brpl	.-8      	; 0x4ee <receive_multiple_data_packet+0x72>
     4f6:	28 17       	cp	r18, r24
     4f8:	39 07       	cpc	r19, r25
     4fa:	b4 f4       	brge	.+44     	; 0x528 <receive_multiple_data_packet+0xac>
     4fc:	6c 2f       	mov	r22, r28
     4fe:	01 c0       	rjmp	.+2      	; 0x502 <receive_multiple_data_packet+0x86>

			partn = part;
			while(packet_condition & (1<<partn)) partn--;			// РёС‰РµС‚ Р±РёС‚С‹Р№ РїР°РєРµС‚
     500:	61 50       	subi	r22, 0x01	; 1
     502:	80 91 70 00 	lds	r24, 0x0070
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	06 2e       	mov	r0, r22
     50a:	02 c0       	rjmp	.+4      	; 0x510 <receive_multiple_data_packet+0x94>
     50c:	95 95       	asr	r25
     50e:	87 95       	ror	r24
     510:	0a 94       	dec	r0
     512:	e2 f7       	brpl	.-8      	; 0x50c <receive_multiple_data_packet+0x90>
     514:	80 fd       	sbrc	r24, 0
     516:	f4 cf       	rjmp	.-24     	; 0x500 <receive_multiple_data_packet+0x84>

			rfm_22_write(0x3c,((part<<4)+partn));					// РЅРѕРјРµСЂ Р±РёС‚РѕРіРѕ РїР°РєРµС‚Р°
     518:	80 e1       	ldi	r24, 0x10	; 16
     51a:	c8 9f       	mul	r28, r24
     51c:	60 0d       	add	r22, r0
     51e:	11 24       	eor	r1, r1
     520:	8c e3       	ldi	r24, 0x3C	; 60
     522:	28 d3       	rcall	.+1616   	; 0xb74 <rfm_22_write>
			rfm_22_write(0x3b,0x04);								// РѕС‚РїСЂР°РІР»СЏРµС‚ РєРѕРјР°РЅРґСѓ РїРµСЂРµСЃР»Р°С‚СЊ РїР°РєРµС‚
     524:	64 e0       	ldi	r22, 0x04	; 4
     526:	0d c0       	rjmp	.+26     	; 0x542 <receive_multiple_data_packet+0xc6>
			rfm_22_transmit_packet(0,0);
			}
		else {
			packet_condition = 0xff;								// СЃРѕСЃС‚РѕСЏРЅРёРµ РїР°РєРµС‚Р° - СѓСЃРїРµС€РЅРѕ РїРµСЂРµРґР°РЅ
     528:	8f ef       	ldi	r24, 0xFF	; 255
     52a:	80 93 70 00 	sts	0x0070, r24
			npack += (part-1)<<6;
     52e:	80 91 71 00 	lds	r24, 0x0071
     532:	c1 50       	subi	r28, 0x01	; 1
     534:	90 e4       	ldi	r25, 0x40	; 64
     536:	c9 9f       	mul	r28, r25
     538:	80 0d       	add	r24, r0
     53a:	11 24       	eor	r1, r1
     53c:	80 93 71 00 	sts	0x0071, r24

			rfm_22_write(0x3b,0x05);								// РѕС‚РїСЂР°РІР»СЏРµС‚ РєРѕРјР°РЅРґСѓ "РїР°РєРµС‚ СѓСЃРїРµС€РЅРѕ РїРµСЂРµРґР°РЅ"
     540:	65 e0       	ldi	r22, 0x05	; 5
     542:	8b e3       	ldi	r24, 0x3B	; 59
     544:	17 d3       	rcall	.+1582   	; 0xb74 <rfm_22_write>
			rfm_22_transmit_packet(0,0);
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
		else {
			packet_condition = 0xff;								// СЃРѕСЃС‚РѕСЏРЅРёРµ РїР°РєРµС‚Р° - СѓСЃРїРµС€РЅРѕ РїРµСЂРµРґР°РЅ
			npack += (part-1)<<6;

			rfm_22_write(0x3b,0x05);								// РѕС‚РїСЂР°РІР»СЏРµС‚ РєРѕРјР°РЅРґСѓ "РїР°РєРµС‚ СѓСЃРїРµС€РЅРѕ РїРµСЂРµРґР°РЅ"
			rfm_22_transmit_packet(0,0);
     54e:	d0 c3       	rjmp	.+1952   	; 0xcf0 <rfm_22_transmit_packet>
			}
		}
	}
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <packet_handler_master>:



void packet_handler_master(void) {

	rfm_22_read_burst(0x47, header , 3);				//СЃС‡РёС‚С‹РІР°РµС‚ Р·Р°РіРѕР»РѕРІРѕРє
     556:	43 e0       	ldi	r20, 0x03	; 3
     558:	63 eb       	ldi	r22, 0xB3	; 179
     55a:	71 e0       	ldi	r23, 0x01	; 1
     55c:	87 e4       	ldi	r24, 0x47	; 71
     55e:	e2 d2       	rcall	.+1476   	; 0xb24 <rfm_22_read_burst>
	rfm_22_write(0x3d,header[0]);						//Р·Р°РїРёСЃС‹РІР°РµС‚ Р°РґСЂРµСЃ СѓСЃС‚СЂРѕР№СЃС‚РІР°, РѕС‚РїСЂР°РІРёРІС€РµРіРѕ РїР°РєРµС‚ (РЅР° СЃР»СѓС‡Р°Р№ РѕС‚РїСЂР°РІРєРё РєРѕРјР°РЅРґС‹ РїРµСЂРµСЃР»Р°С‚СЊ РїР°РєРµС‚)
     560:	60 91 b3 01 	lds	r22, 0x01B3
     564:	8d e3       	ldi	r24, 0x3D	; 61
     566:	06 d3       	rcall	.+1548   	; 0xb74 <rfm_22_write>

	switch (header[1]) {
     568:	80 91 b4 01 	lds	r24, 0x01B4
     56c:	83 30       	cpi	r24, 0x03	; 3
     56e:	c9 f0       	breq	.+50     	; 0x5a2 <packet_handler_master+0x4c>
     570:	30 f4       	brcc	.+12     	; 0x57e <packet_handler_master+0x28>
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	51 f0       	breq	.+20     	; 0x58a <packet_handler_master+0x34>
     576:	82 30       	cpi	r24, 0x02	; 2
     578:	09 f0       	breq	.+2      	; 0x57c <packet_handler_master+0x26>
     57a:	4f c0       	rjmp	.+158    	; 0x61a <packet_handler_master+0xc4>
     57c:	08 c0       	rjmp	.+16     	; 0x58e <packet_handler_master+0x38>
     57e:	84 30       	cpi	r24, 0x04	; 4
     580:	e9 f0       	breq	.+58     	; 0x5bc <packet_handler_master+0x66>
     582:	85 30       	cpi	r24, 0x05	; 5
     584:	09 f0       	breq	.+2      	; 0x588 <packet_handler_master+0x32>
     586:	49 c0       	rjmp	.+146    	; 0x61a <packet_handler_master+0xc4>
     588:	3f c0       	rjmp	.+126    	; 0x608 <packet_handler_master+0xb2>
		case 0x01 : receive_single_data_packet();
     58a:	65 df       	rcall	.-310    	; 0x456 <receive_single_data_packet>
     58c:	01 c0       	rjmp	.+2      	; 0x590 <packet_handler_master+0x3a>
						rs485_transmit_packet();
						packet_condition = 0x00;
						}
					break;

		case 0x02 : receive_multiple_data_packet();
     58e:	76 df       	rcall	.-276    	; 0x47c <receive_multiple_data_packet>
					if(packet_condition == 0xff) {
     590:	80 91 70 00 	lds	r24, 0x0070
     594:	8f 3f       	cpi	r24, 0xFF	; 255
     596:	09 f0       	breq	.+2      	; 0x59a <packet_handler_master+0x44>
     598:	40 c0       	rjmp	.+128    	; 0x61a <packet_handler_master+0xc4>
						rs485_transmit_packet();
     59a:	89 d4       	rcall	.+2322   	; 0xeae <rs485_transmit_packet>
						packet_condition = 0x00;
     59c:	10 92 70 00 	sts	0x0070, r1
     5a0:	08 95       	ret
						}
					break;

		case 0x03 : rfm_22_write(0x08,0x02);										// СЃС‚РёСЂР°РµС‚ fifo
     5a2:	62 e0       	ldi	r22, 0x02	; 2
     5a4:	88 e0       	ldi	r24, 0x08	; 8
     5a6:	e6 d2       	rcall	.+1484   	; 0xb74 <rfm_22_write>
					rfm_22_write(0x08,0x00);
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	88 e0       	ldi	r24, 0x08	; 8
     5ac:	e3 d2       	rcall	.+1478   	; 0xb74 <rfm_22_write>

					rfm_22_write(0x3b,0x01);
     5ae:	61 e0       	ldi	r22, 0x01	; 1
     5b0:	8b e3       	ldi	r24, 0x3B	; 59
     5b2:	e0 d2       	rcall	.+1472   	; 0xb74 <rfm_22_write>
					rfm_22_transmit_packet(0,npack);
     5b4:	60 91 71 00 	lds	r22, 0x0071
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	25 c0       	rjmp	.+74     	; 0x606 <packet_handler_master+0xb0>
					break;

		case 0x04 : rfm_22_write(0x08,0x02);										// СЃС‚РёСЂР°РµС‚ fifo
     5bc:	62 e0       	ldi	r22, 0x02	; 2
     5be:	88 e0       	ldi	r24, 0x08	; 8
     5c0:	d9 d2       	rcall	.+1458   	; 0xb74 <rfm_22_write>
					rfm_22_write(0x08,0x00);
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	88 e0       	ldi	r24, 0x08	; 8
     5c6:	d6 d2       	rcall	.+1452   	; 0xb74 <rfm_22_write>

					rfm_22_write(0x3b,0x02);
     5c8:	62 e0       	ldi	r22, 0x02	; 2
     5ca:	8b e3       	ldi	r24, 0x3B	; 59
     5cc:	d3 d2       	rcall	.+1446   	; 0xb74 <rfm_22_write>
					rfm_22_write(0x3c,header[2]);
     5ce:	60 91 b5 01 	lds	r22, 0x01B5
     5d2:	8c e3       	ldi	r24, 0x3C	; 60
     5d4:	cf d2       	rcall	.+1438   	; 0xb74 <rfm_22_write>
					if( (header[2]&0x0f) == (header[2]>>4) )
     5d6:	90 91 b5 01 	lds	r25, 0x01B5
     5da:	80 91 b5 01 	lds	r24, 0x01B5
     5de:	9f 70       	andi	r25, 0x0F	; 15
     5e0:	82 95       	swap	r24
     5e2:	8f 70       	andi	r24, 0x0F	; 15
     5e4:	98 13       	cpse	r25, r24
     5e6:	07 c0       	rjmp	.+14     	; 0x5f6 <packet_handler_master+0xa0>
						rfm_22_transmit_packet(((header[2]-1)&0x0f)<<6,header[2]%64);
     5e8:	60 91 b5 01 	lds	r22, 0x01B5
     5ec:	80 91 b5 01 	lds	r24, 0x01B5
     5f0:	6f 73       	andi	r22, 0x3F	; 63
     5f2:	81 50       	subi	r24, 0x01	; 1
     5f4:	04 c0       	rjmp	.+8      	; 0x5fe <packet_handler_master+0xa8>
					else
						rfm_22_transmit_packet(((header[2]-1)&0x0f)<<6,64);
     5f6:	80 91 b5 01 	lds	r24, 0x01B5
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	60 e4       	ldi	r22, 0x40	; 64
     5fe:	82 95       	swap	r24
     600:	88 0f       	add	r24, r24
     602:	88 0f       	add	r24, r24
     604:	80 7c       	andi	r24, 0xC0	; 192
     606:	74 c3       	rjmp	.+1768   	; 0xcf0 <rfm_22_transmit_packet>
					break;
		case 0x05 : rfm_22_write(0x08,0x02);										// СЃС‚РёСЂР°РµС‚ fifo
     608:	62 e0       	ldi	r22, 0x02	; 2
     60a:	88 e0       	ldi	r24, 0x08	; 8
     60c:	b3 d2       	rcall	.+1382   	; 0xb74 <rfm_22_write>
					rfm_22_write(0x08,0x00);
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	88 e0       	ldi	r24, 0x08	; 8
     612:	b0 d2       	rcall	.+1376   	; 0xb74 <rfm_22_write>

					packet_condition = 0xff;
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	80 93 70 00 	sts	0x0070, r24
     61a:	08 95       	ret

0000061c <packet_handler_slave>:


void __delay_ms(uint16_t);


void packet_handler_slave(void) {
     61c:	8f 92       	push	r8
     61e:	9f 92       	push	r9
     620:	af 92       	push	r10
     622:	bf 92       	push	r11
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29

	rfm_22_read_burst(0x47, header , 3);				//СЃС‡РёС‚С‹РІР°РµС‚ Р·Р°РіРѕР»РѕРІРѕРє
     62c:	43 e0       	ldi	r20, 0x03	; 3
     62e:	63 eb       	ldi	r22, 0xB3	; 179
     630:	71 e0       	ldi	r23, 0x01	; 1
     632:	87 e4       	ldi	r24, 0x47	; 71
     634:	77 d2       	rcall	.+1262   	; 0xb24 <rfm_22_read_burst>

	switch (header[1]) {
     636:	80 91 b4 01 	lds	r24, 0x01B4
     63a:	83 30       	cpi	r24, 0x03	; 3
     63c:	f9 f0       	breq	.+62     	; 0x67c <packet_handler_slave+0x60>
     63e:	30 f4       	brcc	.+12     	; 0x64c <packet_handler_slave+0x30>
     640:	81 30       	cpi	r24, 0x01	; 1
     642:	71 f0       	breq	.+28     	; 0x660 <packet_handler_slave+0x44>
     644:	82 30       	cpi	r24, 0x02	; 2
     646:	09 f0       	breq	.+2      	; 0x64a <packet_handler_slave+0x2e>
     648:	ca c0       	rjmp	.+404    	; 0x7de <packet_handler_slave+0x1c2>
     64a:	0c c0       	rjmp	.+24     	; 0x664 <packet_handler_slave+0x48>
     64c:	88 30       	cpi	r24, 0x08	; 8
     64e:	09 f4       	brne	.+2      	; 0x652 <packet_handler_slave+0x36>
     650:	50 c0       	rjmp	.+160    	; 0x6f2 <packet_handler_slave+0xd6>
     652:	82 31       	cpi	r24, 0x12	; 18
     654:	09 f4       	brne	.+2      	; 0x658 <packet_handler_slave+0x3c>
     656:	b5 c0       	rjmp	.+362    	; 0x7c2 <packet_handler_slave+0x1a6>
     658:	84 30       	cpi	r24, 0x04	; 4
     65a:	09 f0       	breq	.+2      	; 0x65e <packet_handler_slave+0x42>
     65c:	c0 c0       	rjmp	.+384    	; 0x7de <packet_handler_slave+0x1c2>
     65e:	1b c0       	rjmp	.+54     	; 0x696 <packet_handler_slave+0x7a>
		case 0x01 : receive_single_data_packet();
     660:	fa de       	rcall	.-524    	; 0x456 <receive_single_data_packet>
     662:	01 c0       	rjmp	.+2      	; 0x666 <packet_handler_slave+0x4a>
						packet_condition = 0x00;		//РѕР±РЅСѓР»СЏРµС‚ Р±Р°Р№С‚ СЃРѕСЃС‚РѕСЏРЅРёСЏ РїР°РєРµС‚Р°
						npack = 0;						//РЅР° РІСЃСЏРєРёР№ СЃР»СѓС‡Р°Р№
						}
					break;

		case 0x02 : receive_multiple_data_packet();
     664:	0b df       	rcall	.-490    	; 0x47c <receive_multiple_data_packet>
					if(packet_condition == 0xff) {
     666:	80 91 70 00 	lds	r24, 0x0070
     66a:	8f 3f       	cpi	r24, 0xFF	; 255
     66c:	09 f0       	breq	.+2      	; 0x670 <packet_handler_slave+0x54>
     66e:	b7 c0       	rjmp	.+366    	; 0x7de <packet_handler_slave+0x1c2>
						rs485_transmit_packet();
     670:	1e d4       	rcall	.+2108   	; 0xeae <rs485_transmit_packet>
						packet_condition = 0x00;
     672:	10 92 70 00 	sts	0x0070, r1
						npack = 0;						//РЅР° РІСЃСЏРєРёР№ СЃР»СѓС‡Р°Р№
     676:	10 92 71 00 	sts	0x0071, r1
     67a:	b1 c0       	rjmp	.+354    	; 0x7de <packet_handler_slave+0x1c2>
						}
					break;

		case 0x03 : rfm_22_write(0x08,0x02);										// СЃС‚РёСЂР°РµС‚ fifo
     67c:	62 e0       	ldi	r22, 0x02	; 2
     67e:	88 e0       	ldi	r24, 0x08	; 8
     680:	79 d2       	rcall	.+1266   	; 0xb74 <rfm_22_write>
					rfm_22_write(0x08,0x00);
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	88 e0       	ldi	r24, 0x08	; 8
     686:	76 d2       	rcall	.+1260   	; 0xb74 <rfm_22_write>

					rfm_22_write(0x3b,0x01);
     688:	61 e0       	ldi	r22, 0x01	; 1
     68a:	8b e3       	ldi	r24, 0x3B	; 59
     68c:	73 d2       	rcall	.+1254   	; 0xb74 <rfm_22_write>
					rfm_22_transmit_packet(0,npack);
     68e:	60 91 71 00 	lds	r22, 0x0071
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	20 c0       	rjmp	.+64     	; 0x6d6 <packet_handler_slave+0xba>
					break;

		case 0x04 : rfm_22_write(0x08,0x02);										// СЃС‚РёСЂР°РµС‚ fifo
     696:	62 e0       	ldi	r22, 0x02	; 2
     698:	88 e0       	ldi	r24, 0x08	; 8
     69a:	6c d2       	rcall	.+1240   	; 0xb74 <rfm_22_write>
					rfm_22_write(0x08,0x00);
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	88 e0       	ldi	r24, 0x08	; 8
     6a0:	69 d2       	rcall	.+1234   	; 0xb74 <rfm_22_write>

					rfm_22_write(0x3b,0x02);
     6a2:	62 e0       	ldi	r22, 0x02	; 2
     6a4:	8b e3       	ldi	r24, 0x3B	; 59
     6a6:	66 d2       	rcall	.+1228   	; 0xb74 <rfm_22_write>
					rfm_22_write(0x3c,header[2]);
     6a8:	60 91 b5 01 	lds	r22, 0x01B5
     6ac:	8c e3       	ldi	r24, 0x3C	; 60
     6ae:	62 d2       	rcall	.+1220   	; 0xb74 <rfm_22_write>
					if( (header[2]&0x0f) == (header[2]>>4) )
     6b0:	90 91 b5 01 	lds	r25, 0x01B5
     6b4:	80 91 b5 01 	lds	r24, 0x01B5
     6b8:	9f 70       	andi	r25, 0x0F	; 15
     6ba:	82 95       	swap	r24
     6bc:	8f 70       	andi	r24, 0x0F	; 15
     6be:	98 13       	cpse	r25, r24
     6c0:	13 c0       	rjmp	.+38     	; 0x6e8 <packet_handler_slave+0xcc>
						rfm_22_transmit_packet(((header[2]-1)&0x0f)<<6,npack%64);
     6c2:	60 91 71 00 	lds	r22, 0x0071
     6c6:	80 91 b5 01 	lds	r24, 0x01B5
     6ca:	6f 73       	andi	r22, 0x3F	; 63
     6cc:	81 50       	subi	r24, 0x01	; 1
     6ce:	82 95       	swap	r24
     6d0:	88 0f       	add	r24, r24
     6d2:	88 0f       	add	r24, r24
     6d4:	80 7c       	andi	r24, 0xC0	; 192
						}
					 rfm_22_write(0x08,0x02);										// СЃС‚РёСЂР°РµС‚ fifo
					 rfm_22_write(0x08,0x00);
					 break;
		}
	}
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	bf 90       	pop	r11
     6e0:	af 90       	pop	r10
     6e2:	9f 90       	pop	r9
     6e4:	8f 90       	pop	r8
					rfm_22_write(0x08,0x00);

					rfm_22_write(0x3b,0x02);
					rfm_22_write(0x3c,header[2]);
					if( (header[2]&0x0f) == (header[2]>>4) )
						rfm_22_transmit_packet(((header[2]-1)&0x0f)<<6,npack%64);
     6e6:	04 c3       	rjmp	.+1544   	; 0xcf0 <rfm_22_transmit_packet>
					else
						rfm_22_transmit_packet(((header[2]-1)&0x0f)<<6,64);
     6e8:	80 91 b5 01 	lds	r24, 0x01B5
     6ec:	81 50       	subi	r24, 0x01	; 1
     6ee:	60 e4       	ldi	r22, 0x40	; 64
     6f0:	ee cf       	rjmp	.-36     	; 0x6ce <packet_handler_slave+0xb2>
					break;

		case 0x08 : if (master_address == 0) {										//РїСЂРѕРІРµСЂСЏРµС‚ РїСЂРёРІСЏР·Р°РЅ Р»Рё СѓР¶Рµ Рє СЃРµС‚Рё
     6f2:	80 91 6f 00 	lds	r24, 0x006F
     6f6:	81 11       	cpse	r24, r1
     6f8:	56 c0       	rjmp	.+172    	; 0x7a6 <packet_handler_slave+0x18a>
						rfm_22_write(0x3d,header[0]);
     6fa:	60 91 b3 01 	lds	r22, 0x01B3
     6fe:	8d e3       	ldi	r24, 0x3D	; 61
     700:	39 d2       	rcall	.+1138   	; 0xb74 <rfm_22_write>
						rfm_22_write(0x3a,device_address);
     702:	60 91 6e 00 	lds	r22, 0x006E
     706:	8a e3       	ldi	r24, 0x3A	; 58
     708:	35 d2       	rcall	.+1130   	; 0xb74 <rfm_22_write>
						rfm_22_write(0x3b,0x10);
     70a:	60 e1       	ldi	r22, 0x10	; 16
     70c:	8b e3       	ldi	r24, 0x3B	; 59
     70e:	32 d2       	rcall	.+1124   	; 0xb74 <rfm_22_write>

						_delay_ms(MODEM_RECEIVE_COMMAND_TIME*(device_address&0x07));
     710:	60 91 6e 00 	lds	r22, 0x006E
     714:	67 70       	andi	r22, 0x07	; 7
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	00 d7       	rcall	.+3584   	; 0x151e <__floatsisf>
     71e:	4b 01       	movw	r8, r22
     720:	5c 01       	movw	r10, r24
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	4a ef       	ldi	r20, 0xFA	; 250
     728:	54 e4       	ldi	r21, 0x44	; 68
     72a:	9b d5       	rcall	.+2870   	; 0x1262 <__mulsf3>
     72c:	8b 01       	movw	r16, r22
     72e:	d8 2f       	mov	r29, r24
     730:	c9 2f       	mov	r28, r25
	if (__tmp < 1.0)
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	40 e8       	ldi	r20, 0x80	; 128
     738:	5f e3       	ldi	r21, 0x3F	; 63
     73a:	fe 01       	movw	r30, r28
     73c:	71 2f       	mov	r23, r17
     73e:	8f 2f       	mov	r24, r31
     740:	9e 2f       	mov	r25, r30
     742:	c3 d6       	rcall	.+3462   	; 0x14ca <__ltsf2>
     744:	87 fd       	sbrc	r24, 7
     746:	27 c0       	rjmp	.+78     	; 0x796 <packet_handler_slave+0x17a>
		__ticks = 1;
	else if (__tmp > 65535)
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	3f ef       	ldi	r19, 0xFF	; 255
     74c:	4f e7       	ldi	r20, 0x7F	; 127
     74e:	57 e4       	ldi	r21, 0x47	; 71
     750:	fe 01       	movw	r30, r28
     752:	60 2f       	mov	r22, r16
     754:	71 2f       	mov	r23, r17
     756:	8f 2f       	mov	r24, r31
     758:	9e 2f       	mov	r25, r30
     75a:	63 d6       	rcall	.+3270   	; 0x1422 <__gtsf2>
     75c:	18 16       	cp	r1, r24
     75e:	a4 f4       	brge	.+40     	; 0x788 <packet_handler_slave+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	40 e2       	ldi	r20, 0x20	; 32
     766:	51 e4       	ldi	r21, 0x41	; 65
     768:	c5 01       	movw	r24, r10
     76a:	b4 01       	movw	r22, r8
     76c:	7a d5       	rcall	.+2804   	; 0x1262 <__mulsf3>
     76e:	b0 d3       	rcall	.+1888   	; 0xed0 <__fixunssfsi>
     770:	28 ec       	ldi	r18, 0xC8	; 200
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	05 c0       	rjmp	.+10     	; 0x780 <packet_handler_slave+0x164>
     776:	c9 01       	movw	r24, r18
     778:	01 97       	sbiw	r24, 0x01	; 1
     77a:	f1 f7       	brne	.-4      	; 0x778 <packet_handler_slave+0x15c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     77c:	61 50       	subi	r22, 0x01	; 1
     77e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     780:	61 15       	cp	r22, r1
     782:	71 05       	cpc	r23, r1
     784:	c1 f7       	brne	.-16     	; 0x776 <packet_handler_slave+0x15a>
     786:	0c c0       	rjmp	.+24     	; 0x7a0 <packet_handler_slave+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     788:	9e 01       	movw	r18, r28
     78a:	60 2f       	mov	r22, r16
     78c:	71 2f       	mov	r23, r17
     78e:	83 2f       	mov	r24, r19
     790:	92 2f       	mov	r25, r18
     792:	9e d3       	rcall	.+1852   	; 0xed0 <__fixunssfsi>
     794:	02 c0       	rjmp	.+4      	; 0x79a <packet_handler_slave+0x17e>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	cb 01       	movw	r24, r22
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	f1 f7       	brne	.-4      	; 0x79c <packet_handler_slave+0x180>

						rfm_22_transmit_packet(0,0);								// РѕС‚РїСЂР°РІР»СЏРµС‚ РѕС‚РІРµС‚
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	a5 d2       	rcall	.+1354   	; 0xcf0 <rfm_22_transmit_packet>
						}
					 rfm_22_write(0x08,0x02);										//СЃС‚РёСЂР°РµС‚ fifo
     7a6:	62 e0       	ldi	r22, 0x02	; 2
     7a8:	88 e0       	ldi	r24, 0x08	; 8
     7aa:	e4 d1       	rcall	.+968    	; 0xb74 <rfm_22_write>
					 rfm_22_write(0x08,0x00);
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	88 e0       	ldi	r24, 0x08	; 8
						}
					 rfm_22_write(0x08,0x02);										// СЃС‚РёСЂР°РµС‚ fifo
					 rfm_22_write(0x08,0x00);
					 break;
		}
	}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	1f 91       	pop	r17
     7b6:	0f 91       	pop	r16
     7b8:	bf 90       	pop	r11
     7ba:	af 90       	pop	r10
     7bc:	9f 90       	pop	r9
     7be:	8f 90       	pop	r8
						_delay_ms(MODEM_RECEIVE_COMMAND_TIME*(device_address&0x07));

						rfm_22_transmit_packet(0,0);								// РѕС‚РїСЂР°РІР»СЏРµС‚ РѕС‚РІРµС‚
						}
					 rfm_22_write(0x08,0x02);										//СЃС‚РёСЂР°РµС‚ fifo
					 rfm_22_write(0x08,0x00);
     7c0:	d9 c1       	rjmp	.+946    	; 0xb74 <rfm_22_write>
					 break;

		case 0x12 :	if (master_address == 0) {
     7c2:	80 91 6f 00 	lds	r24, 0x006F
     7c6:	81 11       	cpse	r24, r1
     7c8:	ee cf       	rjmp	.-36     	; 0x7a6 <packet_handler_slave+0x18a>
						master_address = header[0];									// РІ СЃР»СѓС‡Р°Рµ РїРѕРґС‚РІРµСЂР¶РґРµРЅРёСЏ Р·Р°РїРёСЃС‹РІР°РµС‚ master_address
     7ca:	80 91 b3 01 	lds	r24, 0x01B3
     7ce:	80 93 6f 00 	sts	0x006F, r24
						eeprom_write_byte(&master_address_eep,header[0]);
     7d2:	60 91 b3 01 	lds	r22, 0x01B3
     7d6:	82 e4       	ldi	r24, 0x42	; 66
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	3c d9       	rcall	.-3464   	; 0xfffffa54 <__eeprom_end+0xff7efa0e>
     7dc:	e4 cf       	rjmp	.-56     	; 0x7a6 <packet_handler_slave+0x18a>
						}
					 rfm_22_write(0x08,0x02);										// СЃС‚РёСЂР°РµС‚ fifo
					 rfm_22_write(0x08,0x00);
					 break;
		}
	}
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	bf 90       	pop	r11
     7e8:	af 90       	pop	r10
     7ea:	9f 90       	pop	r9
     7ec:	8f 90       	pop	r8
     7ee:	08 95       	ret

000007f0 <transmit_data_packet>:





void transmit_data_packet (void) {
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29

	register uint8_t i=0;

	uint8_t part, lastl;

	part=npack>>6;											//РІС‹С‡РёСЃР»СЏРµС‚ РєРѕР»РёС‡РµСЃС‚РІРѕ С‡Р°СЃС‚РµР№ РїР°РєРµС‚РѕРІ
     7f8:	c0 91 71 00 	lds	r28, 0x0071
     7fc:	c2 95       	swap	r28
     7fe:	c6 95       	lsr	r28
     800:	c6 95       	lsr	r28
     802:	c3 70       	andi	r28, 0x03	; 3
	lastl=npack&0x3f;										//РІС‹С‡РёСЃР»СЏРµС‚ СЂР°Р·РјРµСЂ РїРѕСЃР»РµРґРЅРµРіРѕ
     804:	d0 91 71 00 	lds	r29, 0x0071
     808:	df 73       	andi	r29, 0x3F	; 63
	if( lastl != 0 ) ++part;
     80a:	09 f0       	breq	.+2      	; 0x80e <transmit_data_packet+0x1e>
     80c:	cf 5f       	subi	r28, 0xFF	; 255

	if ( part>1 )	rfm_22_write(0x3b,0x02);				//command id РїР°РєРµС‚ РёР· РЅРµСЃРєРѕР»СЊРєРёС… С‡Р°СЃС‚РµР№
     80e:	c2 30       	cpi	r28, 0x02	; 2
     810:	18 f0       	brcs	.+6      	; 0x818 <transmit_data_packet+0x28>
     812:	62 e0       	ldi	r22, 0x02	; 2
     814:	8b e3       	ldi	r24, 0x3B	; 59
     816:	02 c0       	rjmp	.+4      	; 0x81c <transmit_data_packet+0x2c>
	else 			rfm_22_write(0x3c,0x01);				//command id РѕРґРёРЅ РїР°РєРµС‚
     818:	61 e0       	ldi	r22, 0x01	; 1
     81a:	8c e3       	ldi	r24, 0x3C	; 60
     81c:	ab d1       	rcall	.+854    	; 0xb74 <rfm_22_write>

	for( i=1 ; i<part ; ++i) {
		rfm_22_write(0x3c,((part<<4)+i));				//Р·Р°РїРёСЃС‹РІР°РµС‚ РЅРѕРјРµСЂ С‚РµРєСѓС‰РµРіРѕ РїР°РєРµС‚Р° Рё РёС… РєРѕР»РёС‡РµСЃС‚РІРѕ
     81e:	0c 2f       	mov	r16, r28
     820:	02 95       	swap	r16
     822:	00 7f       	andi	r16, 0xF0	; 240
     824:	11 e0       	ldi	r17, 0x01	; 1
     826:	0d c0       	rjmp	.+26     	; 0x842 <transmit_data_packet+0x52>





void transmit_data_packet (void) {
     828:	61 2f       	mov	r22, r17
     82a:	60 0f       	add	r22, r16

	if ( part>1 )	rfm_22_write(0x3b,0x02);				//command id РїР°РєРµС‚ РёР· РЅРµСЃРєРѕР»СЊРєРёС… С‡Р°СЃС‚РµР№
	else 			rfm_22_write(0x3c,0x01);				//command id РѕРґРёРЅ РїР°РєРµС‚

	for( i=1 ; i<part ; ++i) {
		rfm_22_write(0x3c,((part<<4)+i));				//Р·Р°РїРёСЃС‹РІР°РµС‚ РЅРѕРјРµСЂ С‚РµРєСѓС‰РµРіРѕ РїР°РєРµС‚Р° Рё РёС… РєРѕР»РёС‡РµСЃС‚РІРѕ
     82c:	8c e3       	ldi	r24, 0x3C	; 60
     82e:	a2 d1       	rcall	.+836    	; 0xb74 <rfm_22_write>





void transmit_data_packet (void) {
     830:	81 2f       	mov	r24, r17
     832:	81 50       	subi	r24, 0x01	; 1
	if ( part>1 )	rfm_22_write(0x3b,0x02);				//command id РїР°РєРµС‚ РёР· РЅРµСЃРєРѕР»СЊРєРёС… С‡Р°СЃС‚РµР№
	else 			rfm_22_write(0x3c,0x01);				//command id РѕРґРёРЅ РїР°РєРµС‚

	for( i=1 ; i<part ; ++i) {
		rfm_22_write(0x3c,((part<<4)+i));				//Р·Р°РїРёСЃС‹РІР°РµС‚ РЅРѕРјРµСЂ С‚РµРєСѓС‰РµРіРѕ РїР°РєРµС‚Р° Рё РёС… РєРѕР»РёС‡РµСЃС‚РІРѕ
		rfm_22_transmit_packet((i-1)<<6,64);			//РѕС‚РїСЂР°РІР»СЏРµС‚ РїР°РєРµС‚
     834:	60 e4       	ldi	r22, 0x40	; 64
     836:	82 95       	swap	r24
     838:	88 0f       	add	r24, r24
     83a:	88 0f       	add	r24, r24
     83c:	80 7c       	andi	r24, 0xC0	; 192
     83e:	58 d2       	rcall	.+1200   	; 0xcf0 <rfm_22_transmit_packet>
	if( lastl != 0 ) ++part;

	if ( part>1 )	rfm_22_write(0x3b,0x02);				//command id РїР°РєРµС‚ РёР· РЅРµСЃРєРѕР»СЊРєРёС… С‡Р°СЃС‚РµР№
	else 			rfm_22_write(0x3c,0x01);				//command id РѕРґРёРЅ РїР°РєРµС‚

	for( i=1 ; i<part ; ++i) {
     840:	1f 5f       	subi	r17, 0xFF	; 255
     842:	1c 17       	cp	r17, r28
     844:	88 f3       	brcs	.-30     	; 0x828 <transmit_data_packet+0x38>
		rfm_22_write(0x3c,((part<<4)+i));				//Р·Р°РїРёСЃС‹РІР°РµС‚ РЅРѕРјРµСЂ С‚РµРєСѓС‰РµРіРѕ РїР°РєРµС‚Р° Рё РёС… РєРѕР»РёС‡РµСЃС‚РІРѕ
		rfm_22_transmit_packet((i-1)<<6,64);			//РѕС‚РїСЂР°РІР»СЏРµС‚ РїР°РєРµС‚
		}

	rfm_22_write(0x3d,((part<<4)+part));
     846:	60 2f       	mov	r22, r16
     848:	6c 0f       	add	r22, r28
     84a:	8d e3       	ldi	r24, 0x3D	; 61
     84c:	93 d1       	rcall	.+806    	; 0xb74 <rfm_22_write>
     84e:	8c 2f       	mov	r24, r28
     850:	82 95       	swap	r24
     852:	88 0f       	add	r24, r24
     854:	88 0f       	add	r24, r24
     856:	80 7c       	andi	r24, 0xC0	; 192
	if( lastl != 0 )	rfm_22_transmit_packet(part<<6,lastl);
     858:	dd 23       	and	r29, r29
     85a:	11 f0       	breq	.+4      	; 0x860 <transmit_data_packet+0x70>
     85c:	6d 2f       	mov	r22, r29
     85e:	01 c0       	rjmp	.+2      	; 0x862 <transmit_data_packet+0x72>
	else				rfm_22_transmit_packet(part<<6,64);
     860:	60 e4       	ldi	r22, 0x40	; 64

	}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
		rfm_22_transmit_packet((i-1)<<6,64);			//РѕС‚РїСЂР°РІР»СЏРµС‚ РїР°РєРµС‚
		}

	rfm_22_write(0x3d,((part<<4)+part));
	if( lastl != 0 )	rfm_22_transmit_packet(part<<6,lastl);
	else				rfm_22_transmit_packet(part<<6,64);
     86a:	42 c2       	rjmp	.+1156   	; 0xcf0 <rfm_22_transmit_packet>

0000086c <master_transmit>:





void master_transmit (void) {
     86c:	cf 93       	push	r28

	register uint8_t i;


	rfm_22_write(0x3a,device_address);
     86e:	60 91 6e 00 	lds	r22, 0x006E
     872:	8a e3       	ldi	r24, 0x3A	; 58
     874:	7f d1       	rcall	.+766    	; 0xb74 <rfm_22_write>


	for ( i=0 ; i<nmodem ; ++i ) {
     876:	c0 e0       	ldi	r28, 0x00	; 0
     878:	1d c0       	rjmp	.+58     	; 0x8b4 <master_transmit+0x48>
		rfm_22_write(0x3d, *(modem_address + i));
     87a:	ec 2f       	mov	r30, r28
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	ee 58       	subi	r30, 0x8E	; 142
     880:	ff 4f       	sbci	r31, 0xFF	; 255
     882:	60 81       	ld	r22, Z
     884:	8d e3       	ldi	r24, 0x3D	; 61
     886:	76 d1       	rcall	.+748    	; 0xb74 <rfm_22_write>
		transmit_data_packet();
     888:	b3 df       	rcall	.-154    	; 0x7f0 <transmit_data_packet>

		TCNT1=0;
     88a:	1d bc       	out	0x2d, r1	; 45
     88c:	1c bc       	out	0x2c, r1	; 44
		sei();										// РІРєР»СЋС‡Р°РµС‚ РїСЂРµСЂС‹РІР°РЅРёСЏ
     88e:	78 94       	sei

		while(TCNT1 < (npack + 30))				// РѕР¶РёРґР°РµС‚ Р·Р°РїСЂРѕСЃРѕРІ РїРѕРІС‚РѕСЂРЅРѕР№ РїРµСЂРµСЃС‹Р»РєРё РїР°РєРµС‚Р°
     890:	04 c0       	rjmp	.+8      	; 0x89a <master_transmit+0x2e>
			if(packet_condition == 0xff) break;		// РµСЃР»Рё РїР°РєРµС‚ СѓСЃРїРµРЅРѕ РїРµСЂРµРґР°РЅ - РїРµСЂРµСЃС‚Р°РµС‚ Р¶РґР°С‚СЊ
     892:	80 91 70 00 	lds	r24, 0x0070
     896:	8f 3f       	cpi	r24, 0xFF	; 255
     898:	49 f0       	breq	.+18     	; 0x8ac <master_transmit+0x40>
		transmit_data_packet();

		TCNT1=0;
		sei();										// РІРєР»СЋС‡Р°РµС‚ РїСЂРµСЂС‹РІР°РЅРёСЏ

		while(TCNT1 < (npack + 30))				// РѕР¶РёРґР°РµС‚ Р·Р°РїСЂРѕСЃРѕРІ РїРѕРІС‚РѕСЂРЅРѕР№ РїРµСЂРµСЃС‹Р»РєРё РїР°РєРµС‚Р°
     89a:	2c b5       	in	r18, 0x2c	; 44
     89c:	3d b5       	in	r19, 0x2d	; 45
     89e:	80 91 71 00 	lds	r24, 0x0071
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	4e 96       	adiw	r24, 0x1e	; 30
     8a6:	28 17       	cp	r18, r24
     8a8:	39 07       	cpc	r19, r25
     8aa:	98 f3       	brcs	.-26     	; 0x892 <master_transmit+0x26>
			if(packet_condition == 0xff) break;		// РµСЃР»Рё РїР°РєРµС‚ СѓСЃРїРµРЅРѕ РїРµСЂРµРґР°РЅ - РїРµСЂРµСЃС‚Р°РµС‚ Р¶РґР°С‚СЊ
		cli();
     8ac:	f8 94       	cli
		packet_condition = 0x00;
     8ae:	10 92 70 00 	sts	0x0070, r1


	rfm_22_write(0x3a,device_address);


	for ( i=0 ; i<nmodem ; ++i ) {
     8b2:	cf 5f       	subi	r28, 0xFF	; 255
     8b4:	80 91 b2 00 	lds	r24, 0x00B2
     8b8:	c8 17       	cp	r28, r24
     8ba:	f8 f2       	brcs	.-66     	; 0x87a <master_transmit+0xe>
     8bc:	c0 e0       	ldi	r28, 0x00	; 0
     8be:	21 c0       	rjmp	.+66     	; 0x902 <master_transmit+0x96>
		cli();
		packet_condition = 0x00;
		}

	for ( i=0 ; i<nretx ; ++i ) {
		rfm_22_write(0x3d, *(retx_address + i));
     8c0:	ec 2f       	mov	r30, r28
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	ee 55       	subi	r30, 0x5E	; 94
     8c6:	ff 4f       	sbci	r31, 0xFF	; 255
     8c8:	60 81       	ld	r22, Z
     8ca:	8d e3       	ldi	r24, 0x3D	; 61
     8cc:	53 d1       	rcall	.+678    	; 0xb74 <rfm_22_write>
		transmit_data_packet();
     8ce:	90 df       	rcall	.-224    	; 0x7f0 <transmit_data_packet>

		TCNT1=0;
     8d0:	1d bc       	out	0x2d, r1	; 45
     8d2:	1c bc       	out	0x2c, r1	; 44
		sei();										// РІРєР»СЋС‡Р°РµС‚ РїСЂРµСЂС‹РІР°РЅРёСЏ
     8d4:	78 94       	sei

		while(TCNT1 < (npack + 30)) 				// РѕР¶РёРґР°РµС‚ Р·Р°РїСЂРѕСЃРѕРІ РїРѕРІС‚РѕСЂРЅРѕР№ РїРµСЂРµСЃС‹Р»РєРё РїР°РєРµС‚Р°
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <master_transmit+0x74>
			if(packet_condition == 0xff) break;		// РµСЃР»Рё РїР°РєРµС‚ СѓСЃРїРµРЅРѕ РїРµСЂРµРґР°РЅ - РїРµСЂРµСЃС‚Р°РµС‚ Р¶РґР°С‚СЊ
     8d8:	80 91 70 00 	lds	r24, 0x0070
     8dc:	8f 3f       	cpi	r24, 0xFF	; 255
     8de:	49 f0       	breq	.+18     	; 0x8f2 <master_transmit+0x86>
		transmit_data_packet();

		TCNT1=0;
		sei();										// РІРєР»СЋС‡Р°РµС‚ РїСЂРµСЂС‹РІР°РЅРёСЏ

		while(TCNT1 < (npack + 30)) 				// РѕР¶РёРґР°РµС‚ Р·Р°РїСЂРѕСЃРѕРІ РїРѕРІС‚РѕСЂРЅРѕР№ РїРµСЂРµСЃС‹Р»РєРё РїР°РєРµС‚Р°
     8e0:	2c b5       	in	r18, 0x2c	; 44
     8e2:	3d b5       	in	r19, 0x2d	; 45
     8e4:	80 91 71 00 	lds	r24, 0x0071
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	4e 96       	adiw	r24, 0x1e	; 30
     8ec:	28 17       	cp	r18, r24
     8ee:	39 07       	cpc	r19, r25
     8f0:	98 f3       	brcs	.-26     	; 0x8d8 <master_transmit+0x6c>
			if(packet_condition == 0xff) break;		// РµСЃР»Рё РїР°РєРµС‚ СѓСЃРїРµРЅРѕ РїРµСЂРµРґР°РЅ - РїРµСЂРµСЃС‚Р°РµС‚ Р¶РґР°С‚СЊ
		cli();
     8f2:	f8 94       	cli
		packet_condition = 0x00;
     8f4:	10 92 70 00 	sts	0x0070, r1

		rfm_22_write(0x3d, master_address);
     8f8:	60 91 6f 00 	lds	r22, 0x006F
     8fc:	8d e3       	ldi	r24, 0x3D	; 61
     8fe:	3a d1       	rcall	.+628    	; 0xb74 <rfm_22_write>
			if(packet_condition == 0xff) break;		// РµСЃР»Рё РїР°РєРµС‚ СѓСЃРїРµРЅРѕ РїРµСЂРµРґР°РЅ - РїРµСЂРµСЃС‚Р°РµС‚ Р¶РґР°С‚СЊ
		cli();
		packet_condition = 0x00;
		}

	for ( i=0 ; i<nretx ; ++i ) {
     900:	cf 5f       	subi	r28, 0xFF	; 255
     902:	80 91 b7 01 	lds	r24, 0x01B7
     906:	c8 17       	cp	r28, r24
     908:	d8 f2       	brcs	.-74     	; 0x8c0 <master_transmit+0x54>
		cli();
		packet_condition = 0x00;

		rfm_22_write(0x3d, master_address);
		}
	}
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <packet_handler_retx>:





void packet_handler_retx (void) {
     90e:	8f 92       	push	r8
     910:	9f 92       	push	r9
     912:	af 92       	push	r10
     914:	bf 92       	push	r11
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29

	rfm_22_read_burst(0x47, header , 3);				//СЃС‡РёС‚С‹РІР°РµС‚ Р·Р°РіРѕР»РѕРІРѕРє
     91e:	43 e0       	ldi	r20, 0x03	; 3
     920:	63 eb       	ldi	r22, 0xB3	; 179
     922:	71 e0       	ldi	r23, 0x01	; 1
     924:	87 e4       	ldi	r24, 0x47	; 71
     926:	fe d0       	rcall	.+508    	; 0xb24 <rfm_22_read_burst>
	rfm_22_write(0x3d,header[0]);						//Р·Р°РїРёСЃС‹РІР°РµС‚ Р°РґСЂРµСЃ СѓСЃС‚СЂРѕР№СЃС‚РІР°, РѕС‚РїСЂР°РІРёРІС€РµРіРѕ РїР°РєРµС‚ (РЅР° СЃР»СѓС‡Р°Р№ РѕС‚РїСЂР°РІРєРё РєРѕРјР°РЅРґС‹ РїРµСЂРµСЃР»Р°С‚СЊ РїР°РєРµС‚)
     928:	60 91 b3 01 	lds	r22, 0x01B3
     92c:	8d e3       	ldi	r24, 0x3D	; 61
     92e:	22 d1       	rcall	.+580    	; 0xb74 <rfm_22_write>

	switch (header[1]) {
     930:	80 91 b4 01 	lds	r24, 0x01B4
     934:	84 30       	cpi	r24, 0x04	; 4
     936:	a9 f1       	breq	.+106    	; 0x9a2 <packet_handler_retx+0x94>
     938:	38 f4       	brcc	.+14     	; 0x948 <packet_handler_retx+0x3a>
     93a:	82 30       	cpi	r24, 0x02	; 2
     93c:	89 f0       	breq	.+34     	; 0x960 <packet_handler_retx+0x52>
     93e:	20 f5       	brcc	.+72     	; 0x988 <packet_handler_retx+0x7a>
     940:	81 30       	cpi	r24, 0x01	; 1
     942:	09 f0       	breq	.+2      	; 0x946 <packet_handler_retx+0x38>
     944:	dc c0       	rjmp	.+440    	; 0xafe <packet_handler_retx+0x1f0>
     946:	0a c0       	rjmp	.+20     	; 0x95c <packet_handler_retx+0x4e>
     948:	89 30       	cpi	r24, 0x09	; 9
     94a:	09 f4       	brne	.+2      	; 0x94e <packet_handler_retx+0x40>
     94c:	62 c0       	rjmp	.+196    	; 0xa12 <packet_handler_retx+0x104>
     94e:	82 31       	cpi	r24, 0x12	; 18
     950:	09 f4       	brne	.+2      	; 0x954 <packet_handler_retx+0x46>
     952:	c7 c0       	rjmp	.+398    	; 0xae2 <packet_handler_retx+0x1d4>
     954:	85 30       	cpi	r24, 0x05	; 5
     956:	09 f0       	breq	.+2      	; 0x95a <packet_handler_retx+0x4c>
     958:	d2 c0       	rjmp	.+420    	; 0xafe <packet_handler_retx+0x1f0>
     95a:	51 c0       	rjmp	.+162    	; 0x9fe <packet_handler_retx+0xf0>
		case 0x01 : receive_single_data_packet();
     95c:	7c dd       	rcall	.-1288   	; 0x456 <receive_single_data_packet>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <packet_handler_retx+0x54>
						packet_condition = 0x00;		//РѕР±РЅСѓР»СЏРµС‚ Р±Р°Р№С‚ СЃРѕСЃС‚РѕСЏРЅРёСЏ РїР°РєРµС‚Р°
						npack = 0;						//РЅР° РІСЃСЏРєРёР№ СЃР»СѓС‡Р°Р№
						}
					break;

		case 0x02 : receive_multiple_data_packet();
     960:	8d dd       	rcall	.-1254   	; 0x47c <receive_multiple_data_packet>
					if(packet_condition == 0xff) {
     962:	80 91 70 00 	lds	r24, 0x0070
     966:	8f 3f       	cpi	r24, 0xFF	; 255
     968:	09 f0       	breq	.+2      	; 0x96c <packet_handler_retx+0x5e>
     96a:	c9 c0       	rjmp	.+402    	; 0xafe <packet_handler_retx+0x1f0>

						if(header[0] == master_address) transmit_data_packet();
     96c:	90 91 b3 01 	lds	r25, 0x01B3
     970:	80 91 6f 00 	lds	r24, 0x006F
     974:	98 13       	cpse	r25, r24
     976:	02 c0       	rjmp	.+4      	; 0x97c <packet_handler_retx+0x6e>
     978:	3b df       	rcall	.-394    	; 0x7f0 <transmit_data_packet>
     97a:	01 c0       	rjmp	.+2      	; 0x97e <packet_handler_retx+0x70>
						else master_transmit();
     97c:	77 df       	rcall	.-274    	; 0x86c <master_transmit>

						packet_condition = 0x00;
     97e:	10 92 70 00 	sts	0x0070, r1
						npack = 0;						//РЅР° РІСЃСЏРєРёР№ СЃР»СѓС‡Р°Р№
     982:	10 92 71 00 	sts	0x0071, r1
     986:	bb c0       	rjmp	.+374    	; 0xafe <packet_handler_retx+0x1f0>
						}
					break;

		case 0x03 : rfm_22_write(0x08,0x02);										// СЃС‚РёСЂР°РµС‚ fifo
     988:	62 e0       	ldi	r22, 0x02	; 2
     98a:	88 e0       	ldi	r24, 0x08	; 8
     98c:	f3 d0       	rcall	.+486    	; 0xb74 <rfm_22_write>
					rfm_22_write(0x08,0x00);
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	88 e0       	ldi	r24, 0x08	; 8
     992:	f0 d0       	rcall	.+480    	; 0xb74 <rfm_22_write>

					rfm_22_write(0x3b,0x01);
     994:	61 e0       	ldi	r22, 0x01	; 1
     996:	8b e3       	ldi	r24, 0x3B	; 59
     998:	ed d0       	rcall	.+474    	; 0xb74 <rfm_22_write>
					rfm_22_transmit_packet(0,npack);
     99a:	60 91 71 00 	lds	r22, 0x0071
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	20 c0       	rjmp	.+64     	; 0x9e2 <packet_handler_retx+0xd4>
					break;

		case 0x04 : rfm_22_write(0x08,0x02);										// СЃС‚РёСЂР°РµС‚ fifo
     9a2:	62 e0       	ldi	r22, 0x02	; 2
     9a4:	88 e0       	ldi	r24, 0x08	; 8
     9a6:	e6 d0       	rcall	.+460    	; 0xb74 <rfm_22_write>
					rfm_22_write(0x08,0x00);
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	88 e0       	ldi	r24, 0x08	; 8
     9ac:	e3 d0       	rcall	.+454    	; 0xb74 <rfm_22_write>

					rfm_22_write(0x3b,0x02);
     9ae:	62 e0       	ldi	r22, 0x02	; 2
     9b0:	8b e3       	ldi	r24, 0x3B	; 59
     9b2:	e0 d0       	rcall	.+448    	; 0xb74 <rfm_22_write>
					rfm_22_write(0x3c,header[2]);
     9b4:	60 91 b5 01 	lds	r22, 0x01B5
     9b8:	8c e3       	ldi	r24, 0x3C	; 60
     9ba:	dc d0       	rcall	.+440    	; 0xb74 <rfm_22_write>
					if( (header[2]&0x0f) == (header[2]>>4) )
     9bc:	90 91 b5 01 	lds	r25, 0x01B5
     9c0:	80 91 b5 01 	lds	r24, 0x01B5
     9c4:	9f 70       	andi	r25, 0x0F	; 15
     9c6:	82 95       	swap	r24
     9c8:	8f 70       	andi	r24, 0x0F	; 15
     9ca:	98 13       	cpse	r25, r24
     9cc:	13 c0       	rjmp	.+38     	; 0x9f4 <packet_handler_retx+0xe6>
						rfm_22_transmit_packet(((header[2]-1)&0x0f)<<6,npack%64);
     9ce:	60 91 71 00 	lds	r22, 0x0071
     9d2:	80 91 b5 01 	lds	r24, 0x01B5
     9d6:	6f 73       	andi	r22, 0x3F	; 63
     9d8:	81 50       	subi	r24, 0x01	; 1
     9da:	82 95       	swap	r24
     9dc:	88 0f       	add	r24, r24
     9de:	88 0f       	add	r24, r24
     9e0:	80 7c       	andi	r24, 0xC0	; 192
						}
					 rfm_22_write(0x08,0x02);										// СЃС‚РёСЂР°РµС‚ fifo
					 rfm_22_write(0x08,0x00);
					 break;
		}
	}
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	bf 90       	pop	r11
     9ec:	af 90       	pop	r10
     9ee:	9f 90       	pop	r9
     9f0:	8f 90       	pop	r8
					rfm_22_write(0x08,0x00);

					rfm_22_write(0x3b,0x02);
					rfm_22_write(0x3c,header[2]);
					if( (header[2]&0x0f) == (header[2]>>4) )
						rfm_22_transmit_packet(((header[2]-1)&0x0f)<<6,npack%64);
     9f2:	7e c1       	rjmp	.+764    	; 0xcf0 <rfm_22_transmit_packet>
					else
						rfm_22_transmit_packet(((header[2]-1)&0x0f)<<6,64);
     9f4:	80 91 b5 01 	lds	r24, 0x01B5
     9f8:	81 50       	subi	r24, 0x01	; 1
     9fa:	60 e4       	ldi	r22, 0x40	; 64
     9fc:	ee cf       	rjmp	.-36     	; 0x9da <packet_handler_retx+0xcc>
					break;

		case 0x05 : rfm_22_write(0x08,0x02);										// СЃС‚РёСЂР°РµС‚ fifo
     9fe:	62 e0       	ldi	r22, 0x02	; 2
     a00:	88 e0       	ldi	r24, 0x08	; 8
     a02:	b8 d0       	rcall	.+368    	; 0xb74 <rfm_22_write>
					rfm_22_write(0x08,0x00);
     a04:	60 e0       	ldi	r22, 0x00	; 0
     a06:	88 e0       	ldi	r24, 0x08	; 8
     a08:	b5 d0       	rcall	.+362    	; 0xb74 <rfm_22_write>

					packet_condition = 0xff;
     a0a:	8f ef       	ldi	r24, 0xFF	; 255
     a0c:	80 93 70 00 	sts	0x0070, r24
					break;
     a10:	76 c0       	rjmp	.+236    	; 0xafe <packet_handler_retx+0x1f0>

		case 0x09 : if (master_address == 0) {										//РїСЂРѕРІРµСЂСЏРµС‚ РїСЂРёРІСЏР·Р°РЅ Р»Рё СѓР¶Рµ Рє СЃРµС‚Рё
     a12:	80 91 6f 00 	lds	r24, 0x006F
     a16:	81 11       	cpse	r24, r1
     a18:	56 c0       	rjmp	.+172    	; 0xac6 <packet_handler_retx+0x1b8>
						rfm_22_write(0x3d,header[0]);
     a1a:	60 91 b3 01 	lds	r22, 0x01B3
     a1e:	8d e3       	ldi	r24, 0x3D	; 61
     a20:	a9 d0       	rcall	.+338    	; 0xb74 <rfm_22_write>
						rfm_22_write(0x3a,device_address);
     a22:	60 91 6e 00 	lds	r22, 0x006E
     a26:	8a e3       	ldi	r24, 0x3A	; 58
     a28:	a5 d0       	rcall	.+330    	; 0xb74 <rfm_22_write>
						rfm_22_write(0x3b,0x10);
     a2a:	60 e1       	ldi	r22, 0x10	; 16
     a2c:	8b e3       	ldi	r24, 0x3B	; 59
     a2e:	a2 d0       	rcall	.+324    	; 0xb74 <rfm_22_write>

						_delay_ms(MODEM_RECEIVE_COMMAND_TIME*(device_address&0x07));
     a30:	60 91 6e 00 	lds	r22, 0x006E
     a34:	67 70       	andi	r22, 0x07	; 7
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	70 d5       	rcall	.+2784   	; 0x151e <__floatsisf>
     a3e:	4b 01       	movw	r8, r22
     a40:	5c 01       	movw	r10, r24
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	4a ef       	ldi	r20, 0xFA	; 250
     a48:	54 e4       	ldi	r21, 0x44	; 68
     a4a:	0b d4       	rcall	.+2070   	; 0x1262 <__mulsf3>
     a4c:	8b 01       	movw	r16, r22
     a4e:	d8 2f       	mov	r29, r24
     a50:	c9 2f       	mov	r28, r25
	if (__tmp < 1.0)
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	40 e8       	ldi	r20, 0x80	; 128
     a58:	5f e3       	ldi	r21, 0x3F	; 63
     a5a:	fe 01       	movw	r30, r28
     a5c:	71 2f       	mov	r23, r17
     a5e:	8f 2f       	mov	r24, r31
     a60:	9e 2f       	mov	r25, r30
     a62:	33 d5       	rcall	.+2662   	; 0x14ca <__ltsf2>
     a64:	87 fd       	sbrc	r24, 7
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <packet_handler_retx+0x1a8>
		__ticks = 1;
	else if (__tmp > 65535)
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	3f ef       	ldi	r19, 0xFF	; 255
     a6c:	4f e7       	ldi	r20, 0x7F	; 127
     a6e:	57 e4       	ldi	r21, 0x47	; 71
     a70:	fe 01       	movw	r30, r28
     a72:	60 2f       	mov	r22, r16
     a74:	71 2f       	mov	r23, r17
     a76:	8f 2f       	mov	r24, r31
     a78:	9e 2f       	mov	r25, r30
     a7a:	d3 d4       	rcall	.+2470   	; 0x1422 <__gtsf2>
     a7c:	18 16       	cp	r1, r24
     a7e:	a4 f4       	brge	.+40     	; 0xaa8 <packet_handler_retx+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e2       	ldi	r20, 0x20	; 32
     a86:	51 e4       	ldi	r21, 0x41	; 65
     a88:	c5 01       	movw	r24, r10
     a8a:	b4 01       	movw	r22, r8
     a8c:	ea d3       	rcall	.+2004   	; 0x1262 <__mulsf3>
     a8e:	20 d2       	rcall	.+1088   	; 0xed0 <__fixunssfsi>
     a90:	28 ec       	ldi	r18, 0xC8	; 200
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	05 c0       	rjmp	.+10     	; 0xaa0 <packet_handler_retx+0x192>
     a96:	c9 01       	movw	r24, r18
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	f1 f7       	brne	.-4      	; 0xa98 <packet_handler_retx+0x18a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a9c:	61 50       	subi	r22, 0x01	; 1
     a9e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aa0:	61 15       	cp	r22, r1
     aa2:	71 05       	cpc	r23, r1
     aa4:	c1 f7       	brne	.-16     	; 0xa96 <packet_handler_retx+0x188>
     aa6:	0c c0       	rjmp	.+24     	; 0xac0 <packet_handler_retx+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aa8:	9e 01       	movw	r18, r28
     aaa:	60 2f       	mov	r22, r16
     aac:	71 2f       	mov	r23, r17
     aae:	83 2f       	mov	r24, r19
     ab0:	92 2f       	mov	r25, r18
     ab2:	0e d2       	rcall	.+1052   	; 0xed0 <__fixunssfsi>
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <packet_handler_retx+0x1ac>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     ab6:	61 e0       	ldi	r22, 0x01	; 1
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	cb 01       	movw	r24, r22
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	f1 f7       	brne	.-4      	; 0xabc <packet_handler_retx+0x1ae>

						rfm_22_transmit_packet(0,0);								// РѕС‚РїСЂР°РІР»СЏРµС‚ РѕС‚РІРµС‚
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	15 d1       	rcall	.+554    	; 0xcf0 <rfm_22_transmit_packet>
						}
					rfm_22_write(0x08,0x02);										//СЃС‚РёСЂР°РµС‚ fifo
     ac6:	62 e0       	ldi	r22, 0x02	; 2
     ac8:	88 e0       	ldi	r24, 0x08	; 8
     aca:	54 d0       	rcall	.+168    	; 0xb74 <rfm_22_write>
					rfm_22_write(0x08,0x00);
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	88 e0       	ldi	r24, 0x08	; 8
						}
					 rfm_22_write(0x08,0x02);										// СЃС‚РёСЂР°РµС‚ fifo
					 rfm_22_write(0x08,0x00);
					 break;
		}
	}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	bf 90       	pop	r11
     ada:	af 90       	pop	r10
     adc:	9f 90       	pop	r9
     ade:	8f 90       	pop	r8
						_delay_ms(MODEM_RECEIVE_COMMAND_TIME*(device_address&0x07));

						rfm_22_transmit_packet(0,0);								// РѕС‚РїСЂР°РІР»СЏРµС‚ РѕС‚РІРµС‚
						}
					rfm_22_write(0x08,0x02);										//СЃС‚РёСЂР°РµС‚ fifo
					rfm_22_write(0x08,0x00);
     ae0:	49 c0       	rjmp	.+146    	; 0xb74 <rfm_22_write>
					break;

		case 0x12 :	if (master_address == 0) {
     ae2:	80 91 6f 00 	lds	r24, 0x006F
     ae6:	81 11       	cpse	r24, r1
     ae8:	ee cf       	rjmp	.-36     	; 0xac6 <packet_handler_retx+0x1b8>
						master_address = header[0];									// РІ СЃР»СѓС‡Р°Рµ РїРѕРґС‚РІРµСЂР¶РґРµРЅРёСЏ Р·Р°РїРёСЃС‹РІР°РµС‚ master_address
     aea:	80 91 b3 01 	lds	r24, 0x01B3
     aee:	80 93 6f 00 	sts	0x006F, r24
						eeprom_write_byte(&master_address_eep,header[0]);
     af2:	60 91 b3 01 	lds	r22, 0x01B3
     af6:	82 e4       	ldi	r24, 0x42	; 66
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	ac d7       	rcall	.+3928   	; 0x1a54 <__eewr_byte_m8>
     afc:	e4 cf       	rjmp	.-56     	; 0xac6 <packet_handler_retx+0x1b8>
						}
					 rfm_22_write(0x08,0x02);										// СЃС‚РёСЂР°РµС‚ fifo
					 rfm_22_write(0x08,0x00);
					 break;
		}
	}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	bf 90       	pop	r11
     b08:	af 90       	pop	r10
     b0a:	9f 90       	pop	r9
     b0c:	8f 90       	pop	r8
     b0e:	08 95       	ret

00000b10 <delay_timer>:




void delay_timer(uint8_t cycles) {
	++cycles;
     b10:	8f 5f       	subi	r24, 0xFF	; 255
	TCNT1=0;
     b12:	1d bc       	out	0x2d, r1	; 45
     b14:	1c bc       	out	0x2c, r1	; 44
	while(TCNT1 < cycles);
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	2c b5       	in	r18, 0x2c	; 44
     b1a:	3d b5       	in	r19, 0x2d	; 45
     b1c:	28 17       	cp	r18, r24
     b1e:	39 07       	cpc	r19, r25
     b20:	d8 f3       	brcs	.-10     	; 0xb18 <delay_timer+0x8>
	}
     b22:	08 95       	ret

00000b24 <rfm_22_read_burst>:

void  rfm_22_read_burst  (uint8_t address, volatile uint8_t *data, uint8_t lenght) {

	register uint8_t i=0;

	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;
     b24:	a8 98       	cbi	0x15, 0	; 21

	SPDR = address;		 			// Р·Р°РїРёСЃС‹РІР°РµС‚ Р°РґСЂРµСЃ
     b26:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR<<7));
     b28:	8e b1       	in	r24, 0x0e	; 14
     b2a:	88 23       	and	r24, r24
     b2c:	e9 f3       	breq	.-6      	; 0xb28 <rfm_22_read_burst+0x4>
     b2e:	fb 01       	movw	r30, r22

	for(i=0 ; i<lenght ; ++i) {		// СЃС‡РёС‚С‹РІР°РµС‚ РґР°РЅРЅС‹Рµ
		SPDR=0xff;
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	06 c0       	rjmp	.+12     	; 0xb40 <rfm_22_read_burst+0x1c>
     b34:	9f b9       	out	0x0f, r25	; 15
		while (!(SPSR<<7));
     b36:	8e b1       	in	r24, 0x0e	; 14
     b38:	88 23       	and	r24, r24
     b3a:	e9 f3       	breq	.-6      	; 0xb36 <rfm_22_read_burst+0x12>
		*(data+i) = SPDR;
     b3c:	8f b1       	in	r24, 0x0f	; 15
     b3e:	81 93       	st	Z+, r24
	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;

	SPDR = address;		 			// Р·Р°РїРёСЃС‹РІР°РµС‚ Р°РґСЂРµСЃ
	while (!(SPSR<<7));

	for(i=0 ; i<lenght ; ++i) {		// СЃС‡РёС‚С‹РІР°РµС‚ РґР°РЅРЅС‹Рµ
     b40:	8e 2f       	mov	r24, r30
     b42:	86 1b       	sub	r24, r22
     b44:	84 17       	cp	r24, r20
     b46:	b0 f3       	brcs	.-20     	; 0xb34 <rfm_22_read_burst+0x10>
		SPDR=0xff;
		while (!(SPSR<<7));
		*(data+i) = SPDR;
		}

	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
     b48:	a8 9a       	sbi	0x15, 0	; 21
     b4a:	08 95       	ret

00000b4c <rfm_22_write_burst>:

void rfm_22_write_burst (uint8_t address, volatile uint8_t *data, uint8_t lenght) {

	register uint8_t i=0;

	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;
     b4c:	a8 98       	cbi	0x15, 0	; 21

	SPDR = address | (1 << 7);		 // Р·Р°РїРёСЃС‹РІР°РµС‚ Р°РґСЂРµСЃ
     b4e:	80 68       	ori	r24, 0x80	; 128
     b50:	8f b9       	out	0x0f, r24	; 15

	while(!(SPSR<<7));
     b52:	8e b1       	in	r24, 0x0e	; 14
     b54:	88 23       	and	r24, r24
     b56:	e9 f3       	breq	.-6      	; 0xb52 <rfm_22_write_burst+0x6>
     b58:	fb 01       	movw	r30, r22
     b5a:	06 c0       	rjmp	.+12     	; 0xb68 <rfm_22_write_burst+0x1c>

	for(i=0 ; i<lenght ; ++i) {		// Р·Р°РїРёСЃС‹РІР°РµС‚ РґР°РЅРЅС‹Рµ
		SPDR = *(data+i);
     b5c:	80 81       	ld	r24, Z
     b5e:	8f b9       	out	0x0f, r24	; 15
		while (!(SPSR<<7));
     b60:	8e b1       	in	r24, 0x0e	; 14
     b62:	88 23       	and	r24, r24
     b64:	e9 f3       	breq	.-6      	; 0xb60 <rfm_22_write_burst+0x14>
     b66:	31 96       	adiw	r30, 0x01	; 1

	SPDR = address | (1 << 7);		 // Р·Р°РїРёСЃС‹РІР°РµС‚ Р°РґСЂРµСЃ

	while(!(SPSR<<7));

	for(i=0 ; i<lenght ; ++i) {		// Р·Р°РїРёСЃС‹РІР°РµС‚ РґР°РЅРЅС‹Рµ
     b68:	8e 2f       	mov	r24, r30
     b6a:	86 1b       	sub	r24, r22
     b6c:	84 17       	cp	r24, r20
     b6e:	b0 f3       	brcs	.-20     	; 0xb5c <rfm_22_write_burst+0x10>
		SPDR = *(data+i);
		while (!(SPSR<<7));
		}

	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
     b70:	a8 9a       	sbi	0x15, 0	; 21
     b72:	08 95       	ret

00000b74 <rfm_22_write>:

/* Р—Р°РїРёСЃС‹РІР°РµС‚ РїРѕ SPI data РїРѕ Р°РґСЂРµСЃСѓ address */

void rfm_22_write(unsigned char address,unsigned char data) {

	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;
     b74:	a8 98       	cbi	0x15, 0	; 21

	SPDR = address | (1<<7);		 // Р·Р°РїРёСЃС‹РІР°РµС‚ Р°РґСЂРµСЃ
     b76:	80 68       	ori	r24, 0x80	; 128
     b78:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR<<7));
     b7a:	8e b1       	in	r24, 0x0e	; 14
     b7c:	88 23       	and	r24, r24
     b7e:	e9 f3       	breq	.-6      	; 0xb7a <rfm_22_write+0x6>

	SPDR = data;         			// Р·Р°РїРёСЃС‹РІР°РµС‚ РґР°РЅРЅС‹Рµ
     b80:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR<<7));
     b82:	8e b1       	in	r24, 0x0e	; 14
     b84:	88 23       	and	r24, r24
     b86:	e9 f3       	breq	.-6      	; 0xb82 <rfm_22_write+0xe>

	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
     b88:	a8 9a       	sbi	0x15, 0	; 21
     b8a:	08 95       	ret

00000b8c <rfm_22_read>:

uint8_t rfm_22_read(unsigned char address) {

	unsigned char data;

	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;
     b8c:	a8 98       	cbi	0x15, 0	; 21

	SPDR = address;		 		// Р·Р°РїРёСЃС‹РІР°РµС‚ Р°РґСЂРµСЃ
     b8e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR<<7));
     b90:	8e b1       	in	r24, 0x0e	; 14
     b92:	88 23       	and	r24, r24
     b94:	e9 f3       	breq	.-6      	; 0xb90 <rfm_22_read+0x4>

	SPDR = 0xff;         		// Р·Р°РїРёСЃС‹РІР°РµС‚ РїСѓСЃС‚С‹Рµ РґР°РЅРЅС‹Рµ
     b96:	8f ef       	ldi	r24, 0xFF	; 255
     b98:	8f b9       	out	0x0f, r24	; 15

	while (!(SPSR<<7));
     b9a:	8e b1       	in	r24, 0x0e	; 14
     b9c:	88 23       	and	r24, r24
     b9e:	e9 f3       	breq	.-6      	; 0xb9a <rfm_22_read+0xe>

	data = SPDR;
     ba0:	8f b1       	in	r24, 0x0f	; 15

	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
     ba2:	a8 9a       	sbi	0x15, 0	; 21

	return data;
	}
     ba4:	08 95       	ret

00000ba6 <rfm_22_init>:



/* Р—Р°РїРёСЃС‹РІР°РµС‚ РІСЃРµ РЅРµРѕР±С…РѕРґРёРјС‹Рµ РєРѕРЅС„РёРіСѓСЂР°С†РёРѕРЅРЅС‹Рµ СЂРµРіРёСЃС‚СЂС‹ РІ RFM, РїСЂРѕРІРµСЂСЏРµС‚ СЃРІСЏР·СЊ СЃ RFM. Р•СЃР»Рё RFM РЅРµ РѕС‚РІРµС‡Р°РµС‚ - РІРѕР·РІСЂР°С‰Р°РµС‚ 1, РёРЅР°С‡Рµ - 0 */

uint8_t rfm_22_init(void) {
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	67 97       	sbiw	r28, 0x17	; 23
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61

uint8_t		init_table_io[3] = {0x12, 0x1c, 0x16},
     bba:	82 e1       	ldi	r24, 0x12	; 18
     bbc:	8d 8b       	std	Y+21, r24	; 0x15
     bbe:	8c e1       	ldi	r24, 0x1C	; 28
     bc0:	8e 8b       	std	Y+22, r24	; 0x16
     bc2:	86 e1       	ldi	r24, 0x16	; 22
     bc4:	8f 8b       	std	Y+23, r24	; 0x17
            init_table_freq[6] = {0x5e, 0x01, 0x5d, 0x86, 0x03, 0x7e},
     bc6:	86 e0       	ldi	r24, 0x06	; 6
     bc8:	e0 e6       	ldi	r30, 0x60	; 96
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	de 01       	movw	r26, r28
     bce:	11 96       	adiw	r26, 0x01	; 1
     bd0:	01 90       	ld	r0, Z+
     bd2:	0d 92       	st	X+, r0
     bd4:	8a 95       	dec	r24
     bd6:	e1 f7       	brne	.-8      	; 0xbd0 <rfm_22_init+0x2a>
            init_table_ph[4] = {0x11, 0x46, 0x0a, 0x20},
     bd8:	81 e1       	ldi	r24, 0x11	; 17
     bda:	8b 87       	std	Y+11, r24	; 0x0b
     bdc:	86 e4       	ldi	r24, 0x46	; 70
     bde:	8c 87       	std	Y+12, r24	; 0x0c
     be0:	8a e0       	ldi	r24, 0x0A	; 10
     be2:	8d 87       	std	Y+13, r24	; 0x0d
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	8e 87       	std	Y+14, r24	; 0x0e
            init_table_synch[4] = {0x28, 0x15, 0x23, 0x42},
     be8:	88 e2       	ldi	r24, 0x28	; 40
     bea:	8f 83       	std	Y+7, r24	; 0x07
     bec:	85 e1       	ldi	r24, 0x15	; 21
     bee:	88 87       	std	Y+8, r24	; 0x08
     bf0:	83 e2       	ldi	r24, 0x23	; 35
     bf2:	89 87       	std	Y+9, r24	; 0x09
     bf4:	92 e4       	ldi	r25, 0x42	; 66
     bf6:	9a 87       	std	Y+10, r25	; 0x0a
            init_table_mod[3] = {0x0c, 0x23, 0x50},
     bf8:	9c e0       	ldi	r25, 0x0C	; 12
     bfa:	9a 8b       	std	Y+18, r25	; 0x12
     bfc:	8b 8b       	std	Y+19, r24	; 0x13
     bfe:	80 e5       	ldi	r24, 0x50	; 80
     c00:	8c 8b       	std	Y+20, r24	; 0x14
            init_table_freqdiv[3] = {0x73, 0x64, 0x00};
     c02:	83 e7       	ldi	r24, 0x73	; 115
     c04:	8f 87       	std	Y+15, r24	; 0x0f
     c06:	84 e6       	ldi	r24, 0x64	; 100
     c08:	88 8b       	std	Y+16, r24	; 0x10
     c0a:	19 8a       	std	Y+17, r1	; 0x11

	uint8_t error;

	RFM_22_SDN_DDR |= RFM_22_SDN_EN;					//РІРєР»СЋС‡Р°РµС‚ RFM
     c0c:	a2 9a       	sbi	0x14, 2	; 20
	RFM_22_SDN_PORT &= ~RFM_22_SDN_EN;
     c0e:	aa 98       	cbi	0x15, 2	; 21

	RFM_22_SPI_DDR |= RFM_22_SPI_PIN; 					//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ SPI
     c10:	87 b3       	in	r24, 0x17	; 23
     c12:	8c 62       	ori	r24, 0x2C	; 44
     c14:	87 bb       	out	0x17, r24	; 23
	RFM_22_SPI_EN_DDR |= RFM_22_SPI_EN_PIN;
     c16:	a0 9a       	sbi	0x14, 0	; 20
	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
     c18:	a8 9a       	sbi	0x15, 0	; 21
	SPCR = RFM_22_SPCR;
     c1a:	81 e5       	ldi	r24, 0x51	; 81
     c1c:	8d b9       	out	0x0d, r24	; 13

	rfm_22_write(0x07,0x00); 							// СЂРµР¶РёРј standby
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	87 e0       	ldi	r24, 0x07	; 7
     c22:	a8 df       	rcall	.-176    	; 0xb74 <rfm_22_write>

	rfm_22_write(0x05,0xff);							//РІРєР»СЋС‡Р°РµС‚ РїСЂРµСЂС‹РІР°РЅРёСЏ
     c24:	6f ef       	ldi	r22, 0xFF	; 255
     c26:	85 e0       	ldi	r24, 0x05	; 5
     c28:	a5 df       	rcall	.-182    	; 0xb74 <rfm_22_write>
	rfm_22_write(0x06,0xff);
     c2a:	6f ef       	ldi	r22, 0xFF	; 255
     c2c:	86 e0       	ldi	r24, 0x06	; 6
     c2e:	a2 df       	rcall	.-188    	; 0xb74 <rfm_22_write>

	rfm_22_read(0x03);						 			// РѕР±РЅСѓР»СЏРµС‚ РїСЂРµСЂС‹РІР°РЅРёСЏ
     c30:	83 e0       	ldi	r24, 0x03	; 3
     c32:	ac df       	rcall	.-168    	; 0xb8c <rfm_22_read>
	rfm_22_read(0x04);
     c34:	84 e0       	ldi	r24, 0x04	; 4
     c36:	aa df       	rcall	.-172    	; 0xb8c <rfm_22_read>

	rfm_22_write(0x09,0x7f);							//РµРјРєРѕСЃС‚СЊ 12,5РїР¤
     c38:	6f e7       	ldi	r22, 0x7F	; 127
     c3a:	89 e0       	ldi	r24, 0x09	; 9
     c3c:	9b df       	rcall	.-202    	; 0xb74 <rfm_22_write>

	rfm_22_write_burst(0x0b, init_table_io, 3);			//РїРѕСЂС‚С‹ РІРѕРґР°-РІС‹РІРѕРґР°
     c3e:	43 e0       	ldi	r20, 0x03	; 3
     c40:	be 01       	movw	r22, r28
     c42:	6b 5e       	subi	r22, 0xEB	; 235
     c44:	7f 4f       	sbci	r23, 0xFF	; 255
     c46:	8b e0       	ldi	r24, 0x0B	; 11
     c48:	81 df       	rcall	.-254    	; 0xb4c <rfm_22_write_burst>

	rfm_22_write(0x6d,0x1f);    						// РјРѕС‰РЅРѕСЃС‚СЊ 13dBm
     c4a:	6f e1       	ldi	r22, 0x1F	; 31
     c4c:	8d e6       	ldi	r24, 0x6D	; 109
     c4e:	92 df       	rcall	.-220    	; 0xb74 <rfm_22_write>

	rfm_22_write(0x1c,0x95);
     c50:	65 e9       	ldi	r22, 0x95	; 149
     c52:	8c e1       	ldi	r24, 0x1C	; 28
     c54:	8f df       	rcall	.-226    	; 0xb74 <rfm_22_write>
	rfm_22_write(0x1d,0x40);
     c56:	60 e4       	ldi	r22, 0x40	; 64
     c58:	8d e1       	ldi	r24, 0x1D	; 29
     c5a:	8c df       	rcall	.-232    	; 0xb74 <rfm_22_write>

	rfm_22_write_burst(0x20, init_table_freq, 6);		//С‡Р°СЃС‚РѕС‚С‹
     c5c:	46 e0       	ldi	r20, 0x06	; 6
     c5e:	be 01       	movw	r22, r28
     c60:	6f 5f       	subi	r22, 0xFF	; 255
     c62:	7f 4f       	sbci	r23, 0xFF	; 255
     c64:	80 e2       	ldi	r24, 0x20	; 32
     c66:	72 df       	rcall	.-284    	; 0xb4c <rfm_22_write_burst>

	rfm_22_write(0x27,0x1e);							//РїРѕСЂРѕРі RSSI
     c68:	6e e1       	ldi	r22, 0x1E	; 30
     c6a:	87 e2       	ldi	r24, 0x27	; 39
     c6c:	83 df       	rcall	.-250    	; 0xb74 <rfm_22_write>

	rfm_22_write(0x30, 0x8d);
     c6e:	6d e8       	ldi	r22, 0x8D	; 141
     c70:	80 e3       	ldi	r24, 0x30	; 48
     c72:	80 df       	rcall	.-256    	; 0xb74 <rfm_22_write>

	rfm_22_write_burst(0x32, init_table_ph, 4);			//РѕР±СЂР°Р±РѕС‚С‡РёРє РїР°РєРµС‚РѕРІ
     c74:	44 e0       	ldi	r20, 0x04	; 4
     c76:	be 01       	movw	r22, r28
     c78:	65 5f       	subi	r22, 0xF5	; 245
     c7a:	7f 4f       	sbci	r23, 0xFF	; 255
     c7c:	82 e3       	ldi	r24, 0x32	; 50
     c7e:	66 df       	rcall	.-308    	; 0xb4c <rfm_22_write_burst>

	rfm_22_write_burst(0x36, init_table_synch, 4);		//СЃРёРЅС…СЂРѕРЅРёР·Р°С†РёСЏ
     c80:	44 e0       	ldi	r20, 0x04	; 4
     c82:	be 01       	movw	r22, r28
     c84:	69 5f       	subi	r22, 0xF9	; 249
     c86:	7f 4f       	sbci	r23, 0xFF	; 255
     c88:	86 e3       	ldi	r24, 0x36	; 54
     c8a:	60 df       	rcall	.-320    	; 0xb4c <rfm_22_write_burst>

	rfm_22_write(0x3a, device_address);					//Р°РґСЂРµСЃ РІРѕР·РІСЂР°С‚Р°
     c8c:	60 91 6e 00 	lds	r22, 0x006E
     c90:	8a e3       	ldi	r24, 0x3A	; 58
     c92:	70 df       	rcall	.-288    	; 0xb74 <rfm_22_write>
	rfm_22_write(0x3d, master_address);
     c94:	60 91 6f 00 	lds	r22, 0x006F
     c98:	8d e3       	ldi	r24, 0x3D	; 61
     c9a:	6c df       	rcall	.-296    	; 0xb74 <rfm_22_write>
	rfm_22_write(0x42, device_address);					//Р°РґСЂРµСЃ СѓСЃС‚СЂРѕР№СЃС‚РІР°
     c9c:	60 91 6e 00 	lds	r22, 0x006E
     ca0:	82 e4       	ldi	r24, 0x42	; 66
     ca2:	68 df       	rcall	.-304    	; 0xb74 <rfm_22_write>
//	rfm_22_write(0x43,0xff);							//РјР°СЃРєР° Р°РґСЂРµСЃР°

	rfm_22_write(0x6e,0x10);							//СЃРєРѕСЂРѕСЃС‚СЊ РїРµСЂРµРґР°С‡Рё
     ca4:	60 e1       	ldi	r22, 0x10	; 16
     ca6:	8e e6       	ldi	r24, 0x6E	; 110
     ca8:	65 df       	rcall	.-310    	; 0xb74 <rfm_22_write>
	rfm_22_write(0x6f,0x62);
     caa:	62 e6       	ldi	r22, 0x62	; 98
     cac:	8f e6       	ldi	r24, 0x6F	; 111
     cae:	62 df       	rcall	.-316    	; 0xb74 <rfm_22_write>

	rfm_22_write_burst(0x70, init_table_mod, 3);		//РјРѕРґСѓР»СЏС†РёСЏ
     cb0:	43 e0       	ldi	r20, 0x03	; 3
     cb2:	be 01       	movw	r22, r28
     cb4:	6e 5e       	subi	r22, 0xEE	; 238
     cb6:	7f 4f       	sbci	r23, 0xFF	; 255
     cb8:	80 e7       	ldi	r24, 0x70	; 112
     cba:	48 df       	rcall	.-368    	; 0xb4c <rfm_22_write_burst>

	rfm_22_write_burst(0x75, init_table_freqdiv, 3);	//РєРѕРЅС„РёРіСѓСЂР°С†РёСЏ РЅРµСЃСѓС‰РµР№ С‡Р°СЃС‚РѕС‚С‹ Рё РґРµРІРёР°С†РёРё
     cbc:	43 e0       	ldi	r20, 0x03	; 3
     cbe:	be 01       	movw	r22, r28
     cc0:	61 5f       	subi	r22, 0xF1	; 241
     cc2:	7f 4f       	sbci	r23, 0xFF	; 255
     cc4:	85 e7       	ldi	r24, 0x75	; 117
     cc6:	42 df       	rcall	.-380    	; 0xb4c <rfm_22_write_burst>

	rfm_22_write(0x7e,0x00);							//РїРѕСЂРѕРі Р·Р°РїРѕР»РЅРµРЅРёСЏ fifo РїСЂРёРµРјРЅРёРєР°
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	8e e7       	ldi	r24, 0x7E	; 126
     ccc:	53 df       	rcall	.-346    	; 0xb74 <rfm_22_write>

	error=rfm_22_read(0x20);
     cce:	80 e2       	ldi	r24, 0x20	; 32
     cd0:	5d df       	rcall	.-326    	; 0xb8c <rfm_22_read>

	if (  *init_table_freq != error ) error=1;			// РїСЂРѕРІРµСЂРєР° РјРѕРґСѓР»СЏ
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	29 81       	ldd	r18, Y+1	; 0x01
     cd6:	28 13       	cpse	r18, r24
     cd8:	01 c0       	rjmp	.+2      	; 0xcdc <rfm_22_init+0x136>
     cda:	90 e0       	ldi	r25, 0x00	; 0
	else error=0;

	return error;
	}
     cdc:	89 2f       	mov	r24, r25
     cde:	67 96       	adiw	r28, 0x17	; 23
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	08 95       	ret

00000cf0 <rfm_22_transmit_packet>:


/* РћС‚РїСЂР°РІР»СЏРµС‚ РїР°РєРµС‚, РїСЂРµРґРІР°СЂРёС‚РµР»СЊРЅРѕ РїСЂРѕРІРµСЂСЏСЏ СѓСЂРѕРІРµРЅСЊ СЃРёРіРЅР°Р»Р°. startn - СѓРєР°Р·Р°С‚РµР»СЊ РЅР° РїРµСЂРµРґР°РІР°РµРјС‹Рµ РґР°РЅРЅС‹Рµ, lenght - РґР»РёРЅР° РїР°РєРµС‚Р°.
	Р•СЃР»Рё РІС‹Р·РІР°С‚СЊ СЃ РїР°СЂР°РјРµС‚СЂР°РјРё 0,0 - РїРµСЂРµРґР°РµС‚ РїСѓСЃС‚РѕР№ РїР°РєРµС‚ (РєРѕРјР°РЅРґСѓ). */

void rfm_22_transmit_packet(uint8_t startn, unsigned char lenght) {
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	d8 2f       	mov	r29, r24
     cf6:	c6 2f       	mov	r28, r22

//	rfm_22_write(0x07,0x05);							// РІРєР» РїСЂРёРµРјРЅРёРє

	rfm_22_write(0x08,0x01);							// СЃС‚РёСЂР°РµС‚ fifo
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	88 e0       	ldi	r24, 0x08	; 8
     cfc:	3b df       	rcall	.-394    	; 0xb74 <rfm_22_write>
	rfm_22_write(0x08,0x00);
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	88 e0       	ldi	r24, 0x08	; 8
     d02:	38 df       	rcall	.-400    	; 0xb74 <rfm_22_write>


	if (lenght) {										// РµСЃР»Рё СЂР°Р·РјРµСЂ РїР°РєРµС‚Р° РЅРµ 0
     d04:	cc 23       	and	r28, r28
     d06:	59 f0       	breq	.+22     	; 0xd1e <rfm_22_transmit_packet+0x2e>

		rfm_22_write(0x3e,lenght);						// СЂР°Р·РјРµСЂ РїР°РєРµС‚Р° РґР°РЅРЅС‹С…
     d08:	6c 2f       	mov	r22, r28
     d0a:	8e e3       	ldi	r24, 0x3E	; 62
     d0c:	33 df       	rcall	.-410    	; 0xb74 <rfm_22_write>
		rfm_22_write_burst(0x7f,buffer+startn,lenght);	// РѕС‚РїСЂР°РІР»СЏРµС‚ РїР°РєРµС‚ РІ fifo
     d0e:	6d 2f       	mov	r22, r29
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	6d 54       	subi	r22, 0x4D	; 77
     d14:	7f 4f       	sbci	r23, 0xFF	; 255
     d16:	4c 2f       	mov	r20, r28
     d18:	8f e7       	ldi	r24, 0x7F	; 127
     d1a:	18 df       	rcall	.-464    	; 0xb4c <rfm_22_write_burst>
     d1c:	08 c0       	rjmp	.+16     	; 0xd2e <rfm_22_transmit_packet+0x3e>
		}
	else if (startn) {	 								// РµСЃР»Рё СЂР°Р·РјРµСЂ РїР°РєРµС‚Р° 0
     d1e:	dd 23       	and	r29, r29
     d20:	31 f0       	breq	.+12     	; 0xd2e <rfm_22_transmit_packet+0x3e>

		rfm_22_write(0x3e,0x01);						//РєРѕСЃС‚С‹Р»СЊ РёР· Р·Р° РґРѕР»Р±Р°РЅСѓС‚С‹С… РЅР°СЃС‚СЂРѕРµРє РїРѕСЂС‚Р° RFM
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	8e e3       	ldi	r24, 0x3E	; 62
     d26:	26 df       	rcall	.-436    	; 0xb74 <rfm_22_write>
		rfm_22_write(0x7f,0xee);
     d28:	6e ee       	ldi	r22, 0xEE	; 238
     d2a:	8f e7       	ldi	r24, 0x7F	; 127
     d2c:	23 df       	rcall	.-442    	; 0xb74 <rfm_22_write>

//	_delay_us(220);

//	while(!(RFM_22_GPIO0_PIN & RFM_22_GPIO0_EN));		// РїСЂРѕРІРµСЂСЏРµС‚ СЌС„РёСЂ

	rfm_22_write(0x07,0x09);							//РІРєР» СЂРµР¶РёРј РїРµСЂРµРґР°С‚С‡РёРєР°
     d2e:	69 e0       	ldi	r22, 0x09	; 9
     d30:	87 e0       	ldi	r24, 0x07	; 7
     d32:	20 df       	rcall	.-448    	; 0xb74 <rfm_22_write>

	delay_timer(lenght+20);								// Р·Р°РґРµСЂР¶РєР°, С‡С‚РѕР±С‹ РїСЂРё РїРµСЂРµРґР°С‡Рµ РїР°РєРµС‚Р° РЅРµ Р±РµСЃРїРѕРєРѕРёС‚СЊ RFM
     d34:	8c 2f       	mov	r24, r28
     d36:	8c 5e       	subi	r24, 0xEC	; 236
	}
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28

//	while(!(RFM_22_GPIO0_PIN & RFM_22_GPIO0_EN));		// РїСЂРѕРІРµСЂСЏРµС‚ СЌС„РёСЂ

	rfm_22_write(0x07,0x09);							//РІРєР» СЂРµР¶РёРј РїРµСЂРµРґР°С‚С‡РёРєР°

	delay_timer(lenght+20);								// Р·Р°РґРµСЂР¶РєР°, С‡С‚РѕР±С‹ РїСЂРё РїРµСЂРµРґР°С‡Рµ РїР°РєРµС‚Р° РЅРµ Р±РµСЃРїРѕРєРѕРёС‚СЊ RFM
     d3c:	e9 ce       	rjmp	.-558    	; 0xb10 <delay_timer>

00000d3e <rfm_22_read_packet>:



/* РЎС‡РёС‚С‹РІР°РµС‚ РґР°РЅРЅС‹Рµ РїР°РєРµС‚Р° */

uint8_t rfm_22_read_packet(uint8_t startn) {
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	d8 2f       	mov	r29, r24

	uint8_t lenght;

		lenght = rfm_22_read(0x4b);							//СЃС‡РёС‚С‹РІР°РµС‚ РґР»РёРЅСѓ РїР°РєРµС‚Р°
     d44:	8b e4       	ldi	r24, 0x4B	; 75
     d46:	22 df       	rcall	.-444    	; 0xb8c <rfm_22_read>
     d48:	c8 2f       	mov	r28, r24

		rfm_22_read_burst(0x7f, buffer+startn, lenght);	//СЃС‡РёС‚С‹РІР°РµС‚ РґР°РЅРЅС‹Рµ
     d4a:	6d 2f       	mov	r22, r29
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	6d 54       	subi	r22, 0x4D	; 77
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	48 2f       	mov	r20, r24
     d54:	8f e7       	ldi	r24, 0x7F	; 127
     d56:	e6 de       	rcall	.-564    	; 0xb24 <rfm_22_read_burst>

		rfm_22_write(0x07,0x05);
     d58:	65 e0       	ldi	r22, 0x05	; 5
     d5a:	87 e0       	ldi	r24, 0x07	; 7
     d5c:	0b df       	rcall	.-490    	; 0xb74 <rfm_22_write>

	rfm_22_write(0x08,0x02);								//СЃС‚РёСЂР°РµС‚ fifo
     d5e:	62 e0       	ldi	r22, 0x02	; 2
     d60:	88 e0       	ldi	r24, 0x08	; 8
     d62:	08 df       	rcall	.-496    	; 0xb74 <rfm_22_write>
	rfm_22_write(0x08,0x00);
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	88 e0       	ldi	r24, 0x08	; 8
     d68:	05 df       	rcall	.-502    	; 0xb74 <rfm_22_write>

	return lenght;
	}
     d6a:	8c 2f       	mov	r24, r28
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <ping>:
#include "rs485.h"
#include "modem.h"
#include "route.h"


uint8_t ping(uint8_t command, volatile uint8_t *ping_address, uint8_t ndevice) {
     d72:	ff 92       	push	r15
     d74:	0f 93       	push	r16
     d76:	1f 93       	push	r17
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	18 2f       	mov	r17, r24
     d7e:	eb 01       	movw	r28, r22
     d80:	04 2f       	mov	r16, r20

	register uint8_t i=0;

	uint8_t nndevice = ndevice;

	rfm_22_write(0x3d,0xff);									// С€РёСЂРѕРєРѕРІРµС‰Р°С‚РµР»СЊРЅС‹Р№ Р°РґСЂРµСЃ
     d82:	6f ef       	ldi	r22, 0xFF	; 255
     d84:	8d e3       	ldi	r24, 0x3D	; 61
     d86:	f6 de       	rcall	.-532    	; 0xb74 <rfm_22_write>
	rfm_22_write(0x3a,device_address);
     d88:	60 91 6e 00 	lds	r22, 0x006E
     d8c:	8a e3       	ldi	r24, 0x3A	; 58
     d8e:	f2 de       	rcall	.-540    	; 0xb74 <rfm_22_write>
	rfm_22_write(0x3b,command);
     d90:	61 2f       	mov	r22, r17
     d92:	8b e3       	ldi	r24, 0x3B	; 59
     d94:	ef de       	rcall	.-546    	; 0xb74 <rfm_22_write>

	rfm_22_transmit_packet(0,0);								// РѕС‚РїСЂР°РІР»СЏРµС‚ С€РёСЂРѕРєРѕРІРµС‰С‚РµР»СЊРЅС‹Р№ Р·Р°РїСЂРѕСЃ
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	aa df       	rcall	.-172    	; 0xcf0 <rfm_22_transmit_packet>

//	while(!(rfm_22_read(0x02) & 0x04));							// Р¶РґРµС‚ РѕС‚РїСЂР°РІР»РµРЅРёСЏ Р·Р°РїСЂРѕСЃР°

	TCNT1=0;
     d9c:	1d bc       	out	0x2d, r1	; 45
     d9e:	1c bc       	out	0x2c, r1	; 44

	rfm_22_write(0x07,0x05);
     da0:	65 e0       	ldi	r22, 0x05	; 5
     da2:	87 e0       	ldi	r24, 0x07	; 7
     da4:	e7 de       	rcall	.-562    	; 0xb74 <rfm_22_write>

uint8_t ping(uint8_t command, volatile uint8_t *ping_address, uint8_t ndevice) {

	register uint8_t i=0;

	uint8_t nndevice = ndevice;
     da6:	10 2f       	mov	r17, r16
     da8:	fc 2e       	mov	r15, r28

	TCNT1=0;

	rfm_22_write(0x07,0x05);

	while(TCNT1<REGUEST_WAIT_CYCLES) {
     daa:	2a c0       	rjmp	.+84     	; 0xe00 <ping+0x8e>

		if (RFM_22_GPIO2_PIN != RFM_22_GPIO2_EN) {
     dac:	80 b3       	in	r24, 0x10	; 16
     dae:	84 30       	cpi	r24, 0x04	; 4
     db0:	39 f1       	breq	.+78     	; 0xe00 <ping+0x8e>

			rfm_22_read_burst(0x47, header, 3);					//СЃС‡РёС‚С‹РІР°РµС‚ Р·Р°РіРѕР»РѕРІРѕРє
     db2:	43 e0       	ldi	r20, 0x03	; 3
     db4:	63 eb       	ldi	r22, 0xB3	; 179
     db6:	71 e0       	ldi	r23, 0x01	; 1
     db8:	87 e4       	ldi	r24, 0x47	; 71
     dba:	b4 de       	rcall	.-664    	; 0xb24 <rfm_22_read_burst>
			*(ping_address + nndevice) = header[2];
     dbc:	fe 01       	movw	r30, r28
     dbe:	e1 0f       	add	r30, r17
     dc0:	f1 1d       	adc	r31, r1
     dc2:	80 91 b5 01 	lds	r24, 0x01B5
     dc6:	80 83       	st	Z, r24

			for (i=0 ; i<ndevice ; ++i)							// РїСЂРѕРІРµСЂСЏРµС‚, РµСЃС‚СЊ Р»Рё СѓСЃС‚СЂРѕР№СЃС‚РІРѕ РІ СЃРїРёСЃРєРµ
     dc8:	ec 2f       	mov	r30, r28
     dca:	fd 2f       	mov	r31, r29
     dcc:	09 c0       	rjmp	.+18     	; 0xde0 <ping+0x6e>
				if ( *(ping_address+nndevice) == *(ping_address+i) ) --nndevice;
     dce:	de 01       	movw	r26, r28
     dd0:	a1 0f       	add	r26, r17
     dd2:	b1 1d       	adc	r27, r1
     dd4:	9c 91       	ld	r25, X
     dd6:	80 81       	ld	r24, Z
     dd8:	98 13       	cpse	r25, r24
     dda:	01 c0       	rjmp	.+2      	; 0xdde <ping+0x6c>
     ddc:	11 50       	subi	r17, 0x01	; 1
     dde:	31 96       	adiw	r30, 0x01	; 1
		if (RFM_22_GPIO2_PIN != RFM_22_GPIO2_EN) {

			rfm_22_read_burst(0x47, header, 3);					//СЃС‡РёС‚С‹РІР°РµС‚ Р·Р°РіРѕР»РѕРІРѕРє
			*(ping_address + nndevice) = header[2];

			for (i=0 ; i<ndevice ; ++i)							// РїСЂРѕРІРµСЂСЏРµС‚, РµСЃС‚СЊ Р»Рё СѓСЃС‚СЂРѕР№СЃС‚РІРѕ РІ СЃРїРёСЃРєРµ
     de0:	8e 2f       	mov	r24, r30
     de2:	8f 19       	sub	r24, r15
     de4:	80 17       	cp	r24, r16
     de6:	98 f3       	brcs	.-26     	; 0xdce <ping+0x5c>
				if ( *(ping_address+nndevice) == *(ping_address+i) ) --nndevice;

			++nndevice;
     de8:	1f 5f       	subi	r17, 0xFF	; 255

			rfm_22_write(0x08,0x02);							//СЃС‚РёСЂР°РµС‚ fifo
     dea:	62 e0       	ldi	r22, 0x02	; 2
     dec:	88 e0       	ldi	r24, 0x08	; 8
     dee:	c2 de       	rcall	.-636    	; 0xb74 <rfm_22_write>
			rfm_22_write(0x08,0x00);
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	88 e0       	ldi	r24, 0x08	; 8
     df4:	bf de       	rcall	.-642    	; 0xb74 <rfm_22_write>

			rfm_22_write(0x07,0x05);
     df6:	65 e0       	ldi	r22, 0x05	; 5
     df8:	87 e0       	ldi	r24, 0x07	; 7
     dfa:	bc de       	rcall	.-648    	; 0xb74 <rfm_22_write>
			TCNT1 = 0;
     dfc:	1d bc       	out	0x2d, r1	; 45
     dfe:	1c bc       	out	0x2c, r1	; 44

	TCNT1=0;

	rfm_22_write(0x07,0x05);

	while(TCNT1<REGUEST_WAIT_CYCLES) {
     e00:	2c b5       	in	r18, 0x2c	; 44
     e02:	3d b5       	in	r19, 0x2d	; 45
     e04:	20 34       	cpi	r18, 0x40	; 64
     e06:	31 40       	sbci	r19, 0x01	; 1
     e08:	88 f2       	brcs	.-94     	; 0xdac <ping+0x3a>
			rfm_22_write(0x07,0x05);
			TCNT1 = 0;
			}
		}

	rfm_22_write(0x3b,0x12);									// РєРѕРјР°РЅРґР° РїСЂРёРІСЏР·Р°С‚СЊ Рє СЃРµС‚Рё
     e0a:	62 e1       	ldi	r22, 0x12	; 18
     e0c:	8b e3       	ldi	r24, 0x3B	; 59
     e0e:	b2 de       	rcall	.-668    	; 0xb74 <rfm_22_write>
	for(i=ndevice ; i<nndevice ; ++i) {						// РїСЂРёРІСЏР·С‹РІР°РµС‚ СѓСЃС‚СЂРѕР№СЃС‚РІР° Рє РїРѕРґСЃРµС‚Рё
     e10:	0c c0       	rjmp	.+24     	; 0xe2a <ping+0xb8>
		rfm_22_write(0x3d,*(ping_address+i));
     e12:	fe 01       	movw	r30, r28
     e14:	e0 0f       	add	r30, r16
     e16:	f1 1d       	adc	r31, r1
     e18:	60 81       	ld	r22, Z
     e1a:	8d e3       	ldi	r24, 0x3D	; 61
     e1c:	ab de       	rcall	.-682    	; 0xb74 <rfm_22_write>
		rfm_22_transmit_packet(0,0);
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	66 df       	rcall	.-308    	; 0xcf0 <rfm_22_transmit_packet>
		delay_timer(20);										// Р¶РґРµС‚ РїРѕРєР° РґРѕР№РґРµС‚ РїР°РєРµС‚
     e24:	84 e1       	ldi	r24, 0x14	; 20
     e26:	74 de       	rcall	.-792    	; 0xb10 <delay_timer>
			TCNT1 = 0;
			}
		}

	rfm_22_write(0x3b,0x12);									// РєРѕРјР°РЅРґР° РїСЂРёРІСЏР·Р°С‚СЊ Рє СЃРµС‚Рё
	for(i=ndevice ; i<nndevice ; ++i) {						// РїСЂРёРІСЏР·С‹РІР°РµС‚ СѓСЃС‚СЂРѕР№СЃС‚РІР° Рє РїРѕРґСЃРµС‚Рё
     e28:	0f 5f       	subi	r16, 0xFF	; 255
     e2a:	01 17       	cp	r16, r17
     e2c:	90 f3       	brcs	.-28     	; 0xe12 <ping+0xa0>
		delay_timer(20);										// Р¶РґРµС‚ РїРѕРєР° РґРѕР№РґРµС‚ РїР°РєРµС‚
		}

	ndevice=nndevice;

	led_flash(1,1);
     e2e:	61 e0       	ldi	r22, 0x01	; 1
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	15 d9       	rcall	.-3542   	; 0x5e <led_flash>

	return ndevice;
	}
     e34:	81 2f       	mov	r24, r17
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	08 95       	ret

00000e42 <rs485_init>:
#include "route.h"


void rs485_init(void) {

	UCSRA = RS485_UCSRA;				// РєРѕРЅС„РёРіСѓСЂР°С†РёСЏ UART
     e42:	1b b8       	out	0x0b, r1	; 11
	UCSRB = RS485_UCSRB;
     e44:	88 e9       	ldi	r24, 0x98	; 152
     e46:	8a b9       	out	0x0a, r24	; 10
	UCSRC = RS485_UCSRC;
     e48:	8e e8       	ldi	r24, 0x8E	; 142
     e4a:	80 bd       	out	0x20, r24	; 32

	UBRRL =	(uint8_t)(RS485_UBRR);
     e4c:	87 e6       	ldi	r24, 0x67	; 103
     e4e:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)(RS485_UBRR>>8);
     e50:	10 bc       	out	0x20, r1	; 32

	TCCR0 = RS485_TCCR0;
     e52:	86 e0       	ldi	r24, 0x06	; 6
     e54:	83 bf       	out	0x33, r24	; 51

	RS485_DDR |= RS485_EN_PIN;
     e56:	a5 9a       	sbi	0x14, 5	; 20
	RS485_PORT |= RS485_EN_PIN;			// СЂРµР¶РёРј РїРµСЂРµРґР°С‚С‡РёРєР°
     e58:	ad 9a       	sbi	0x15, 5	; 21
     e5a:	08 95       	ret

00000e5c <rs485_receive_packet>:



void rs485_receive_packet(void) {

	npack=0;
     e5c:	10 92 71 00 	sts	0x0071, r1

	RS485_PORT &= ~RS485_EN_PIN;
     e60:	ad 98       	cbi	0x15, 5	; 21
     e62:	20 c0       	rjmp	.+64     	; 0xea4 <rs485_receive_packet+0x48>

	TCNT0 = 0;

	while(TCNT0<PACKET_DELAY_TIME) {
		if (UCSRA & 0x80) {
     e64:	5f 9b       	sbis	0x0b, 7	; 11
     e66:	1f c0       	rjmp	.+62     	; 0xea6 <rs485_receive_packet+0x4a>

			if(TCNT0 > SYMBOL_DELAY_TIME) {						//РµСЃР»Рё Р·Р°РґРµСЂР¶РєР° Р±РѕР»РµРµ 1,5 СЃРёРјРІРѕР»РѕРІ - РїР°РєРµС‚ РёРіРЅРѕСЂРёСЂСѓРµС‚СЃСЏ
     e68:	82 b7       	in	r24, 0x32	; 50
     e6a:	87 33       	cpi	r24, 0x37	; 55
     e6c:	18 f0       	brcs	.+6      	; 0xe74 <rs485_receive_packet+0x18>
				npack = 0;
     e6e:	10 92 71 00 	sts	0x0071, r1
				goto end;
     e72:	08 95       	ret
				}

			*(buffer+npack)=UDR;								//Р·Р°РїРёСЃС‹РІР°РµС‚ Р±Р°Р№С‚ РІ Р±СѓС„РµСЂ
     e74:	e0 91 71 00 	lds	r30, 0x0071
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	ed 54       	subi	r30, 0x4D	; 77
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	8c b1       	in	r24, 0x0c	; 12
     e80:	80 83       	st	Z, r24
			if (npack<64) rfm_22_write(0x7f,*(buffer+npack));	//Р·Р°РїРёСЃС‹РІР°РµС‚ РїСЂРёСЏС‚С‹Р№ Р±Р°Р№С‚ РІ RFM
     e82:	80 91 71 00 	lds	r24, 0x0071
     e86:	80 34       	cpi	r24, 0x40	; 64
     e88:	40 f4       	brcc	.+16     	; 0xe9a <rs485_receive_packet+0x3e>
     e8a:	e0 91 71 00 	lds	r30, 0x0071
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	ed 54       	subi	r30, 0x4D	; 77
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	60 81       	ld	r22, Z
     e96:	8f e7       	ldi	r24, 0x7F	; 127
     e98:	6d de       	rcall	.-806    	; 0xb74 <rfm_22_write>
			++npack;
     e9a:	80 91 71 00 	lds	r24, 0x0071
     e9e:	8f 5f       	subi	r24, 0xFF	; 255
     ea0:	80 93 71 00 	sts	0x0071, r24

			TCNT0=0;											//РѕР±РЅСѓР»СЏРµС‚ С‚Р°Р№РјРµСЂ - СЃС‡РµС‚С‡РёРє
     ea4:	12 be       	out	0x32, r1	; 50

	RS485_PORT &= ~RS485_EN_PIN;

	TCNT0 = 0;

	while(TCNT0<PACKET_DELAY_TIME) {
     ea6:	82 b7       	in	r24, 0x32	; 50
     ea8:	8d 37       	cpi	r24, 0x7D	; 125
     eaa:	e0 f2       	brcs	.-72     	; 0xe64 <rs485_receive_packet+0x8>
     eac:	08 95       	ret

00000eae <rs485_transmit_packet>:
     eae:	ad 9a       	sbi	0x15, 5	; 21
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	09 c0       	rjmp	.+18     	; 0xec6 <rs485_transmit_packet+0x18>
     eb4:	e8 2f       	mov	r30, r24
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	ed 54       	subi	r30, 0x4D	; 77
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	90 81       	ld	r25, Z
     ebe:	9c b9       	out	0x0c, r25	; 12
     ec0:	5d 9b       	sbis	0x0b, 5	; 11
     ec2:	fe cf       	rjmp	.-4      	; 0xec0 <rs485_transmit_packet+0x12>
     ec4:	8f 5f       	subi	r24, 0xFF	; 255
     ec6:	90 91 71 00 	lds	r25, 0x0071
     eca:	89 17       	cp	r24, r25
     ecc:	98 f3       	brcs	.-26     	; 0xeb4 <rs485_transmit_packet+0x6>
     ece:	08 95       	ret

00000ed0 <__fixunssfsi>:
     ed0:	cf 92       	push	r12
     ed2:	df 92       	push	r13
     ed4:	ef 92       	push	r14
     ed6:	ff 92       	push	r15
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
     edc:	6b 01       	movw	r12, r22
     ede:	7c 01       	movw	r14, r24
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	5f e4       	ldi	r21, 0x4F	; 79
     ee8:	c6 d2       	rcall	.+1420   	; 0x1476 <__gesf2>
     eea:	87 fd       	sbrc	r24, 7
     eec:	0c c0       	rjmp	.+24     	; 0xf06 <__fixunssfsi+0x36>
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e0       	ldi	r20, 0x00	; 0
     ef4:	5f e4       	ldi	r21, 0x4F	; 79
     ef6:	c7 01       	movw	r24, r14
     ef8:	b6 01       	movw	r22, r12
     efa:	89 d1       	rcall	.+786    	; 0x120e <__subsf3>
     efc:	68 d3       	rcall	.+1744   	; 0x15ce <__fixsfsi>
     efe:	8b 01       	movw	r16, r22
     f00:	9c 01       	movw	r18, r24
     f02:	30 58       	subi	r19, 0x80	; 128
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <__fixunssfsi+0x40>
     f06:	c7 01       	movw	r24, r14
     f08:	b6 01       	movw	r22, r12
     f0a:	61 d3       	rcall	.+1730   	; 0x15ce <__fixsfsi>
     f0c:	8b 01       	movw	r16, r22
     f0e:	9c 01       	movw	r18, r24
     f10:	b8 01       	movw	r22, r16
     f12:	c9 01       	movw	r24, r18
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	ff 90       	pop	r15
     f1a:	ef 90       	pop	r14
     f1c:	df 90       	pop	r13
     f1e:	cf 90       	pop	r12
     f20:	08 95       	ret

00000f22 <_fpadd_parts>:
     f22:	a0 e0       	ldi	r26, 0x00	; 0
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e6 e9       	ldi	r30, 0x96	; 150
     f28:	f7 e0       	ldi	r31, 0x07	; 7
     f2a:	40 c5       	rjmp	.+2688   	; 0x19ac <__prologue_saves__+0x8>
     f2c:	3c 01       	movw	r6, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	ea 01       	movw	r28, r20
     f32:	d3 01       	movw	r26, r6
     f34:	2c 91       	ld	r18, X
     f36:	22 30       	cpi	r18, 0x02	; 2
     f38:	08 f4       	brcc	.+2      	; 0xf3c <_fpadd_parts+0x1a>
     f3a:	3e c1       	rjmp	.+636    	; 0x11b8 <_fpadd_parts+0x296>
     f3c:	fb 01       	movw	r30, r22
     f3e:	30 81       	ld	r19, Z
     f40:	32 30       	cpi	r19, 0x02	; 2
     f42:	08 f4       	brcc	.+2      	; 0xf46 <_fpadd_parts+0x24>
     f44:	36 c1       	rjmp	.+620    	; 0x11b2 <_fpadd_parts+0x290>
     f46:	24 30       	cpi	r18, 0x04	; 4
     f48:	71 f4       	brne	.+28     	; 0xf66 <_fpadd_parts+0x44>
     f4a:	34 30       	cpi	r19, 0x04	; 4
     f4c:	09 f0       	breq	.+2      	; 0xf50 <_fpadd_parts+0x2e>
     f4e:	34 c1       	rjmp	.+616    	; 0x11b8 <_fpadd_parts+0x296>
     f50:	11 96       	adiw	r26, 0x01	; 1
     f52:	2c 91       	ld	r18, X
     f54:	81 81       	ldd	r24, Z+1	; 0x01
     f56:	28 17       	cp	r18, r24
     f58:	09 f4       	brne	.+2      	; 0xf5c <_fpadd_parts+0x3a>
     f5a:	2e c1       	rjmp	.+604    	; 0x11b8 <_fpadd_parts+0x296>
     f5c:	b6 e6       	ldi	r27, 0x66	; 102
     f5e:	6b 2e       	mov	r6, r27
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	7b 2e       	mov	r7, r27
     f64:	29 c1       	rjmp	.+594    	; 0x11b8 <_fpadd_parts+0x296>
     f66:	34 30       	cpi	r19, 0x04	; 4
     f68:	09 f4       	brne	.+2      	; 0xf6c <_fpadd_parts+0x4a>
     f6a:	23 c1       	rjmp	.+582    	; 0x11b2 <_fpadd_parts+0x290>
     f6c:	32 30       	cpi	r19, 0x02	; 2
     f6e:	91 f4       	brne	.+36     	; 0xf94 <_fpadd_parts+0x72>
     f70:	22 30       	cpi	r18, 0x02	; 2
     f72:	09 f0       	breq	.+2      	; 0xf76 <_fpadd_parts+0x54>
     f74:	21 c1       	rjmp	.+578    	; 0x11b8 <_fpadd_parts+0x296>
     f76:	28 e0       	ldi	r18, 0x08	; 8
     f78:	f3 01       	movw	r30, r6
     f7a:	da 01       	movw	r26, r20
     f7c:	01 90       	ld	r0, Z+
     f7e:	0d 92       	st	X+, r0
     f80:	2a 95       	dec	r18
     f82:	e1 f7       	brne	.-8      	; 0xf7c <_fpadd_parts+0x5a>
     f84:	db 01       	movw	r26, r22
     f86:	11 96       	adiw	r26, 0x01	; 1
     f88:	8c 91       	ld	r24, X
     f8a:	f3 01       	movw	r30, r6
     f8c:	91 81       	ldd	r25, Z+1	; 0x01
     f8e:	89 23       	and	r24, r25
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	11 c1       	rjmp	.+546    	; 0x11b6 <_fpadd_parts+0x294>
     f94:	22 30       	cpi	r18, 0x02	; 2
     f96:	09 f4       	brne	.+2      	; 0xf9a <_fpadd_parts+0x78>
     f98:	0c c1       	rjmp	.+536    	; 0x11b2 <_fpadd_parts+0x290>
     f9a:	d3 01       	movw	r26, r6
     f9c:	12 96       	adiw	r26, 0x02	; 2
     f9e:	ed 91       	ld	r30, X+
     fa0:	fc 91       	ld	r31, X
     fa2:	13 97       	sbiw	r26, 0x03	; 3
     fa4:	db 01       	movw	r26, r22
     fa6:	12 96       	adiw	r26, 0x02	; 2
     fa8:	6d 91       	ld	r22, X+
     faa:	7c 91       	ld	r23, X
     fac:	13 97       	sbiw	r26, 0x03	; 3
     fae:	d3 01       	movw	r26, r6
     fb0:	14 96       	adiw	r26, 0x04	; 4
     fb2:	0d 91       	ld	r16, X+
     fb4:	1d 91       	ld	r17, X+
     fb6:	2d 91       	ld	r18, X+
     fb8:	3c 91       	ld	r19, X
     fba:	17 97       	sbiw	r26, 0x07	; 7
     fbc:	dc 01       	movw	r26, r24
     fbe:	14 96       	adiw	r26, 0x04	; 4
     fc0:	cd 90       	ld	r12, X+
     fc2:	dd 90       	ld	r13, X+
     fc4:	ed 90       	ld	r14, X+
     fc6:	fc 90       	ld	r15, X
     fc8:	17 97       	sbiw	r26, 0x07	; 7
     fca:	af 01       	movw	r20, r30
     fcc:	46 1b       	sub	r20, r22
     fce:	57 0b       	sbc	r21, r23
     fd0:	da 01       	movw	r26, r20
     fd2:	57 ff       	sbrs	r21, 7
     fd4:	04 c0       	rjmp	.+8      	; 0xfde <_fpadd_parts+0xbc>
     fd6:	aa 27       	eor	r26, r26
     fd8:	bb 27       	eor	r27, r27
     fda:	a4 1b       	sub	r26, r20
     fdc:	b5 0b       	sbc	r27, r21
     fde:	a0 32       	cpi	r26, 0x20	; 32
     fe0:	b1 05       	cpc	r27, r1
     fe2:	0c f0       	brlt	.+2      	; 0xfe6 <_fpadd_parts+0xc4>
     fe4:	65 c0       	rjmp	.+202    	; 0x10b0 <_fpadd_parts+0x18e>
     fe6:	14 16       	cp	r1, r20
     fe8:	15 06       	cpc	r1, r21
     fea:	7c f5       	brge	.+94     	; 0x104a <_fpadd_parts+0x128>
     fec:	b7 01       	movw	r22, r14
     fee:	a6 01       	movw	r20, r12
     ff0:	0a 2e       	mov	r0, r26
     ff2:	04 c0       	rjmp	.+8      	; 0xffc <_fpadd_parts+0xda>
     ff4:	76 95       	lsr	r23
     ff6:	67 95       	ror	r22
     ff8:	57 95       	ror	r21
     ffa:	47 95       	ror	r20
     ffc:	0a 94       	dec	r0
     ffe:	d2 f7       	brpl	.-12     	; 0xff4 <_fpadd_parts+0xd2>
    1000:	81 2c       	mov	r8, r1
    1002:	91 2c       	mov	r9, r1
    1004:	54 01       	movw	r10, r8
    1006:	83 94       	inc	r8
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <_fpadd_parts+0xf0>
    100a:	88 0c       	add	r8, r8
    100c:	99 1c       	adc	r9, r9
    100e:	aa 1c       	adc	r10, r10
    1010:	bb 1c       	adc	r11, r11
    1012:	aa 95       	dec	r26
    1014:	d2 f7       	brpl	.-12     	; 0x100a <_fpadd_parts+0xe8>
    1016:	b1 e0       	ldi	r27, 0x01	; 1
    1018:	8b 1a       	sub	r8, r27
    101a:	91 08       	sbc	r9, r1
    101c:	a1 08       	sbc	r10, r1
    101e:	b1 08       	sbc	r11, r1
    1020:	8c 20       	and	r8, r12
    1022:	9d 20       	and	r9, r13
    1024:	ae 20       	and	r10, r14
    1026:	bf 20       	and	r11, r15
    1028:	c1 2c       	mov	r12, r1
    102a:	d1 2c       	mov	r13, r1
    102c:	76 01       	movw	r14, r12
    102e:	c3 94       	inc	r12
    1030:	81 14       	cp	r8, r1
    1032:	91 04       	cpc	r9, r1
    1034:	a1 04       	cpc	r10, r1
    1036:	b1 04       	cpc	r11, r1
    1038:	19 f4       	brne	.+6      	; 0x1040 <_fpadd_parts+0x11e>
    103a:	c1 2c       	mov	r12, r1
    103c:	d1 2c       	mov	r13, r1
    103e:	76 01       	movw	r14, r12
    1040:	c4 2a       	or	r12, r20
    1042:	d5 2a       	or	r13, r21
    1044:	e6 2a       	or	r14, r22
    1046:	f7 2a       	or	r15, r23
    1048:	3e c0       	rjmp	.+124    	; 0x10c6 <_fpadd_parts+0x1a4>
    104a:	45 2b       	or	r20, r21
    104c:	e1 f1       	breq	.+120    	; 0x10c6 <_fpadd_parts+0x1a4>
    104e:	ea 0f       	add	r30, r26
    1050:	fb 1f       	adc	r31, r27
    1052:	b9 01       	movw	r22, r18
    1054:	a8 01       	movw	r20, r16
    1056:	0a 2e       	mov	r0, r26
    1058:	04 c0       	rjmp	.+8      	; 0x1062 <_fpadd_parts+0x140>
    105a:	76 95       	lsr	r23
    105c:	67 95       	ror	r22
    105e:	57 95       	ror	r21
    1060:	47 95       	ror	r20
    1062:	0a 94       	dec	r0
    1064:	d2 f7       	brpl	.-12     	; 0x105a <_fpadd_parts+0x138>
    1066:	81 2c       	mov	r8, r1
    1068:	91 2c       	mov	r9, r1
    106a:	54 01       	movw	r10, r8
    106c:	83 94       	inc	r8
    106e:	04 c0       	rjmp	.+8      	; 0x1078 <_fpadd_parts+0x156>
    1070:	88 0c       	add	r8, r8
    1072:	99 1c       	adc	r9, r9
    1074:	aa 1c       	adc	r10, r10
    1076:	bb 1c       	adc	r11, r11
    1078:	aa 95       	dec	r26
    107a:	d2 f7       	brpl	.-12     	; 0x1070 <_fpadd_parts+0x14e>
    107c:	a1 e0       	ldi	r26, 0x01	; 1
    107e:	8a 1a       	sub	r8, r26
    1080:	91 08       	sbc	r9, r1
    1082:	a1 08       	sbc	r10, r1
    1084:	b1 08       	sbc	r11, r1
    1086:	80 22       	and	r8, r16
    1088:	91 22       	and	r9, r17
    108a:	a2 22       	and	r10, r18
    108c:	b3 22       	and	r11, r19
    108e:	01 e0       	ldi	r16, 0x01	; 1
    1090:	10 e0       	ldi	r17, 0x00	; 0
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 14       	cp	r8, r1
    1098:	91 04       	cpc	r9, r1
    109a:	a1 04       	cpc	r10, r1
    109c:	b1 04       	cpc	r11, r1
    109e:	19 f4       	brne	.+6      	; 0x10a6 <_fpadd_parts+0x184>
    10a0:	00 e0       	ldi	r16, 0x00	; 0
    10a2:	10 e0       	ldi	r17, 0x00	; 0
    10a4:	98 01       	movw	r18, r16
    10a6:	04 2b       	or	r16, r20
    10a8:	15 2b       	or	r17, r21
    10aa:	26 2b       	or	r18, r22
    10ac:	37 2b       	or	r19, r23
    10ae:	0b c0       	rjmp	.+22     	; 0x10c6 <_fpadd_parts+0x1a4>
    10b0:	6e 17       	cp	r22, r30
    10b2:	7f 07       	cpc	r23, r31
    10b4:	24 f4       	brge	.+8      	; 0x10be <_fpadd_parts+0x19c>
    10b6:	c1 2c       	mov	r12, r1
    10b8:	d1 2c       	mov	r13, r1
    10ba:	76 01       	movw	r14, r12
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <_fpadd_parts+0x1a4>
    10be:	fb 01       	movw	r30, r22
    10c0:	00 e0       	ldi	r16, 0x00	; 0
    10c2:	10 e0       	ldi	r17, 0x00	; 0
    10c4:	98 01       	movw	r18, r16
    10c6:	d3 01       	movw	r26, r6
    10c8:	11 96       	adiw	r26, 0x01	; 1
    10ca:	4c 91       	ld	r20, X
    10cc:	dc 01       	movw	r26, r24
    10ce:	11 96       	adiw	r26, 0x01	; 1
    10d0:	8c 91       	ld	r24, X
    10d2:	48 17       	cp	r20, r24
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <_fpadd_parts+0x1b6>
    10d6:	42 c0       	rjmp	.+132    	; 0x115c <_fpadd_parts+0x23a>
    10d8:	44 23       	and	r20, r20
    10da:	49 f0       	breq	.+18     	; 0x10ee <_fpadd_parts+0x1cc>
    10dc:	d7 01       	movw	r26, r14
    10de:	c6 01       	movw	r24, r12
    10e0:	80 1b       	sub	r24, r16
    10e2:	91 0b       	sbc	r25, r17
    10e4:	a2 0b       	sbc	r26, r18
    10e6:	b3 0b       	sbc	r27, r19
    10e8:	8c 01       	movw	r16, r24
    10ea:	9d 01       	movw	r18, r26
    10ec:	04 c0       	rjmp	.+8      	; 0x10f6 <_fpadd_parts+0x1d4>
    10ee:	0c 19       	sub	r16, r12
    10f0:	1d 09       	sbc	r17, r13
    10f2:	2e 09       	sbc	r18, r14
    10f4:	3f 09       	sbc	r19, r15
    10f6:	37 fd       	sbrc	r19, 7
    10f8:	04 c0       	rjmp	.+8      	; 0x1102 <_fpadd_parts+0x1e0>
    10fa:	19 82       	std	Y+1, r1	; 0x01
    10fc:	fb 83       	std	Y+3, r31	; 0x03
    10fe:	ea 83       	std	Y+2, r30	; 0x02
    1100:	0b c0       	rjmp	.+22     	; 0x1118 <_fpadd_parts+0x1f6>
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	fb 83       	std	Y+3, r31	; 0x03
    1108:	ea 83       	std	Y+2, r30	; 0x02
    110a:	30 95       	com	r19
    110c:	20 95       	com	r18
    110e:	10 95       	com	r17
    1110:	01 95       	neg	r16
    1112:	1f 4f       	sbci	r17, 0xFF	; 255
    1114:	2f 4f       	sbci	r18, 0xFF	; 255
    1116:	3f 4f       	sbci	r19, 0xFF	; 255
    1118:	0c 83       	std	Y+4, r16	; 0x04
    111a:	1d 83       	std	Y+5, r17	; 0x05
    111c:	2e 83       	std	Y+6, r18	; 0x06
    111e:	3f 83       	std	Y+7, r19	; 0x07
    1120:	0d c0       	rjmp	.+26     	; 0x113c <_fpadd_parts+0x21a>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	aa 1f       	adc	r26, r26
    1128:	bb 1f       	adc	r27, r27
    112a:	8c 83       	std	Y+4, r24	; 0x04
    112c:	9d 83       	std	Y+5, r25	; 0x05
    112e:	ae 83       	std	Y+6, r26	; 0x06
    1130:	bf 83       	std	Y+7, r27	; 0x07
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	9b 81       	ldd	r25, Y+3	; 0x03
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	9b 83       	std	Y+3, r25	; 0x03
    113a:	8a 83       	std	Y+2, r24	; 0x02
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	9d 81       	ldd	r25, Y+5	; 0x05
    1140:	ae 81       	ldd	r26, Y+6	; 0x06
    1142:	bf 81       	ldd	r27, Y+7	; 0x07
    1144:	8c 01       	movw	r16, r24
    1146:	9d 01       	movw	r18, r26
    1148:	01 50       	subi	r16, 0x01	; 1
    114a:	11 09       	sbc	r17, r1
    114c:	21 09       	sbc	r18, r1
    114e:	31 09       	sbc	r19, r1
    1150:	0f 3f       	cpi	r16, 0xFF	; 255
    1152:	1f 4f       	sbci	r17, 0xFF	; 255
    1154:	2f 4f       	sbci	r18, 0xFF	; 255
    1156:	3f 43       	sbci	r19, 0x3F	; 63
    1158:	20 f3       	brcs	.-56     	; 0x1122 <_fpadd_parts+0x200>
    115a:	0b c0       	rjmp	.+22     	; 0x1172 <_fpadd_parts+0x250>
    115c:	49 83       	std	Y+1, r20	; 0x01
    115e:	fb 83       	std	Y+3, r31	; 0x03
    1160:	ea 83       	std	Y+2, r30	; 0x02
    1162:	0c 0d       	add	r16, r12
    1164:	1d 1d       	adc	r17, r13
    1166:	2e 1d       	adc	r18, r14
    1168:	3f 1d       	adc	r19, r15
    116a:	0c 83       	std	Y+4, r16	; 0x04
    116c:	1d 83       	std	Y+5, r17	; 0x05
    116e:	2e 83       	std	Y+6, r18	; 0x06
    1170:	3f 83       	std	Y+7, r19	; 0x07
    1172:	83 e0       	ldi	r24, 0x03	; 3
    1174:	88 83       	st	Y, r24
    1176:	0c 81       	ldd	r16, Y+4	; 0x04
    1178:	1d 81       	ldd	r17, Y+5	; 0x05
    117a:	2e 81       	ldd	r18, Y+6	; 0x06
    117c:	3f 81       	ldd	r19, Y+7	; 0x07
    117e:	37 ff       	sbrs	r19, 7
    1180:	1a c0       	rjmp	.+52     	; 0x11b6 <_fpadd_parts+0x294>
    1182:	d9 01       	movw	r26, r18
    1184:	c8 01       	movw	r24, r16
    1186:	81 70       	andi	r24, 0x01	; 1
    1188:	99 27       	eor	r25, r25
    118a:	aa 27       	eor	r26, r26
    118c:	bb 27       	eor	r27, r27
    118e:	36 95       	lsr	r19
    1190:	27 95       	ror	r18
    1192:	17 95       	ror	r17
    1194:	07 95       	ror	r16
    1196:	80 2b       	or	r24, r16
    1198:	91 2b       	or	r25, r17
    119a:	a2 2b       	or	r26, r18
    119c:	b3 2b       	or	r27, r19
    119e:	8c 83       	std	Y+4, r24	; 0x04
    11a0:	9d 83       	std	Y+5, r25	; 0x05
    11a2:	ae 83       	std	Y+6, r26	; 0x06
    11a4:	bf 83       	std	Y+7, r27	; 0x07
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	9b 81       	ldd	r25, Y+3	; 0x03
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	9b 83       	std	Y+3, r25	; 0x03
    11ae:	8a 83       	std	Y+2, r24	; 0x02
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <_fpadd_parts+0x294>
    11b2:	3c 01       	movw	r6, r24
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <_fpadd_parts+0x296>
    11b6:	3e 01       	movw	r6, r28
    11b8:	c3 01       	movw	r24, r6
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	ee e0       	ldi	r30, 0x0E	; 14
    11c0:	11 c4       	rjmp	.+2082   	; 0x19e4 <__epilogue_restores__+0x8>

000011c2 <__addsf3>:
    11c2:	a0 e2       	ldi	r26, 0x20	; 32
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e6 ee       	ldi	r30, 0xE6	; 230
    11c8:	f8 e0       	ldi	r31, 0x08	; 8
    11ca:	fc c3       	rjmp	.+2040   	; 0x19c4 <__prologue_saves__+0x20>
    11cc:	6d 8f       	std	Y+29, r22	; 0x1d
    11ce:	7e 8f       	std	Y+30, r23	; 0x1e
    11d0:	8f 8f       	std	Y+31, r24	; 0x1f
    11d2:	98 a3       	std	Y+32, r25	; 0x20
    11d4:	29 8f       	std	Y+25, r18	; 0x19
    11d6:	3a 8f       	std	Y+26, r19	; 0x1a
    11d8:	4b 8f       	std	Y+27, r20	; 0x1b
    11da:	5c 8f       	std	Y+28, r21	; 0x1c
    11dc:	be 01       	movw	r22, r28
    11de:	6f 5e       	subi	r22, 0xEF	; 239
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	ce 01       	movw	r24, r28
    11e4:	4d 96       	adiw	r24, 0x1d	; 29
    11e6:	00 d3       	rcall	.+1536   	; 0x17e8 <__unpack_f>
    11e8:	be 01       	movw	r22, r28
    11ea:	67 5f       	subi	r22, 0xF7	; 247
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
    11ee:	ce 01       	movw	r24, r28
    11f0:	49 96       	adiw	r24, 0x19	; 25
    11f2:	fa d2       	rcall	.+1524   	; 0x17e8 <__unpack_f>
    11f4:	ae 01       	movw	r20, r28
    11f6:	4f 5f       	subi	r20, 0xFF	; 255
    11f8:	5f 4f       	sbci	r21, 0xFF	; 255
    11fa:	be 01       	movw	r22, r28
    11fc:	67 5f       	subi	r22, 0xF7	; 247
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1200:	ce 01       	movw	r24, r28
    1202:	41 96       	adiw	r24, 0x11	; 17
    1204:	8e de       	rcall	.-740    	; 0xf22 <_fpadd_parts>
    1206:	2f d2       	rcall	.+1118   	; 0x1666 <__pack_f>
    1208:	a0 96       	adiw	r28, 0x20	; 32
    120a:	e2 e0       	ldi	r30, 0x02	; 2
    120c:	f7 c3       	rjmp	.+2030   	; 0x19fc <__epilogue_restores__+0x20>

0000120e <__subsf3>:
    120e:	a0 e2       	ldi	r26, 0x20	; 32
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	ec e0       	ldi	r30, 0x0C	; 12
    1214:	f9 e0       	ldi	r31, 0x09	; 9
    1216:	d6 c3       	rjmp	.+1964   	; 0x19c4 <__prologue_saves__+0x20>
    1218:	6d 8f       	std	Y+29, r22	; 0x1d
    121a:	7e 8f       	std	Y+30, r23	; 0x1e
    121c:	8f 8f       	std	Y+31, r24	; 0x1f
    121e:	98 a3       	std	Y+32, r25	; 0x20
    1220:	29 8f       	std	Y+25, r18	; 0x19
    1222:	3a 8f       	std	Y+26, r19	; 0x1a
    1224:	4b 8f       	std	Y+27, r20	; 0x1b
    1226:	5c 8f       	std	Y+28, r21	; 0x1c
    1228:	be 01       	movw	r22, r28
    122a:	6f 5e       	subi	r22, 0xEF	; 239
    122c:	7f 4f       	sbci	r23, 0xFF	; 255
    122e:	ce 01       	movw	r24, r28
    1230:	4d 96       	adiw	r24, 0x1d	; 29
    1232:	da d2       	rcall	.+1460   	; 0x17e8 <__unpack_f>
    1234:	be 01       	movw	r22, r28
    1236:	67 5f       	subi	r22, 0xF7	; 247
    1238:	7f 4f       	sbci	r23, 0xFF	; 255
    123a:	ce 01       	movw	r24, r28
    123c:	49 96       	adiw	r24, 0x19	; 25
    123e:	d4 d2       	rcall	.+1448   	; 0x17e8 <__unpack_f>
    1240:	8a 85       	ldd	r24, Y+10	; 0x0a
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	89 27       	eor	r24, r25
    1246:	8a 87       	std	Y+10, r24	; 0x0a
    1248:	ae 01       	movw	r20, r28
    124a:	4f 5f       	subi	r20, 0xFF	; 255
    124c:	5f 4f       	sbci	r21, 0xFF	; 255
    124e:	be 01       	movw	r22, r28
    1250:	67 5f       	subi	r22, 0xF7	; 247
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	ce 01       	movw	r24, r28
    1256:	41 96       	adiw	r24, 0x11	; 17
    1258:	64 de       	rcall	.-824    	; 0xf22 <_fpadd_parts>
    125a:	05 d2       	rcall	.+1034   	; 0x1666 <__pack_f>
    125c:	a0 96       	adiw	r28, 0x20	; 32
    125e:	e2 e0       	ldi	r30, 0x02	; 2
    1260:	cd c3       	rjmp	.+1946   	; 0x19fc <__epilogue_restores__+0x20>

00001262 <__mulsf3>:
    1262:	a0 e2       	ldi	r26, 0x20	; 32
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e6 e3       	ldi	r30, 0x36	; 54
    1268:	f9 e0       	ldi	r31, 0x09	; 9
    126a:	9e c3       	rjmp	.+1852   	; 0x19a8 <__prologue_saves__+0x4>
    126c:	6d 8f       	std	Y+29, r22	; 0x1d
    126e:	7e 8f       	std	Y+30, r23	; 0x1e
    1270:	8f 8f       	std	Y+31, r24	; 0x1f
    1272:	98 a3       	std	Y+32, r25	; 0x20
    1274:	29 8f       	std	Y+25, r18	; 0x19
    1276:	3a 8f       	std	Y+26, r19	; 0x1a
    1278:	4b 8f       	std	Y+27, r20	; 0x1b
    127a:	5c 8f       	std	Y+28, r21	; 0x1c
    127c:	be 01       	movw	r22, r28
    127e:	6f 5e       	subi	r22, 0xEF	; 239
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	ce 01       	movw	r24, r28
    1284:	4d 96       	adiw	r24, 0x1d	; 29
    1286:	b0 d2       	rcall	.+1376   	; 0x17e8 <__unpack_f>
    1288:	be 01       	movw	r22, r28
    128a:	67 5f       	subi	r22, 0xF7	; 247
    128c:	7f 4f       	sbci	r23, 0xFF	; 255
    128e:	ce 01       	movw	r24, r28
    1290:	49 96       	adiw	r24, 0x19	; 25
    1292:	aa d2       	rcall	.+1364   	; 0x17e8 <__unpack_f>
    1294:	99 89       	ldd	r25, Y+17	; 0x11
    1296:	92 30       	cpi	r25, 0x02	; 2
    1298:	08 f4       	brcc	.+2      	; 0x129c <__mulsf3+0x3a>
    129a:	12 c0       	rjmp	.+36     	; 0x12c0 <__mulsf3+0x5e>
    129c:	89 85       	ldd	r24, Y+9	; 0x09
    129e:	82 30       	cpi	r24, 0x02	; 2
    12a0:	08 f4       	brcc	.+2      	; 0x12a4 <__mulsf3+0x42>
    12a2:	1a c0       	rjmp	.+52     	; 0x12d8 <__mulsf3+0x76>
    12a4:	94 30       	cpi	r25, 0x04	; 4
    12a6:	21 f4       	brne	.+8      	; 0x12b0 <__mulsf3+0x4e>
    12a8:	82 30       	cpi	r24, 0x02	; 2
    12aa:	09 f4       	brne	.+2      	; 0x12ae <__mulsf3+0x4c>
    12ac:	b4 c0       	rjmp	.+360    	; 0x1416 <__mulsf3+0x1b4>
    12ae:	08 c0       	rjmp	.+16     	; 0x12c0 <__mulsf3+0x5e>
    12b0:	84 30       	cpi	r24, 0x04	; 4
    12b2:	21 f4       	brne	.+8      	; 0x12bc <__mulsf3+0x5a>
    12b4:	92 30       	cpi	r25, 0x02	; 2
    12b6:	09 f4       	brne	.+2      	; 0x12ba <__mulsf3+0x58>
    12b8:	ae c0       	rjmp	.+348    	; 0x1416 <__mulsf3+0x1b4>
    12ba:	0e c0       	rjmp	.+28     	; 0x12d8 <__mulsf3+0x76>
    12bc:	92 30       	cpi	r25, 0x02	; 2
    12be:	51 f4       	brne	.+20     	; 0x12d4 <__mulsf3+0x72>
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	2a 89       	ldd	r18, Y+18	; 0x12
    12c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c6:	29 13       	cpse	r18, r25
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <__mulsf3+0x6a>
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	8a 8b       	std	Y+18, r24	; 0x12
    12ce:	ce 01       	movw	r24, r28
    12d0:	41 96       	adiw	r24, 0x11	; 17
    12d2:	a3 c0       	rjmp	.+326    	; 0x141a <__mulsf3+0x1b8>
    12d4:	82 30       	cpi	r24, 0x02	; 2
    12d6:	51 f4       	brne	.+20     	; 0x12ec <__mulsf3+0x8a>
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	2a 89       	ldd	r18, Y+18	; 0x12
    12dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12de:	29 13       	cpse	r18, r25
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <__mulsf3+0x82>
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	8a 87       	std	Y+10, r24	; 0x0a
    12e6:	ce 01       	movw	r24, r28
    12e8:	09 96       	adiw	r24, 0x09	; 9
    12ea:	97 c0       	rjmp	.+302    	; 0x141a <__mulsf3+0x1b8>
    12ec:	8d 88       	ldd	r8, Y+21	; 0x15
    12ee:	9e 88       	ldd	r9, Y+22	; 0x16
    12f0:	af 88       	ldd	r10, Y+23	; 0x17
    12f2:	b8 8c       	ldd	r11, Y+24	; 0x18
    12f4:	0d 85       	ldd	r16, Y+13	; 0x0d
    12f6:	1e 85       	ldd	r17, Y+14	; 0x0e
    12f8:	2f 85       	ldd	r18, Y+15	; 0x0f
    12fa:	38 89       	ldd	r19, Y+16	; 0x10
    12fc:	e0 e2       	ldi	r30, 0x20	; 32
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	dc 01       	movw	r26, r24
    1306:	c1 2c       	mov	r12, r1
    1308:	d1 2c       	mov	r13, r1
    130a:	76 01       	movw	r14, r12
    130c:	40 e0       	ldi	r20, 0x00	; 0
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	ba 01       	movw	r22, r20
    1312:	80 fe       	sbrs	r8, 0
    1314:	18 c0       	rjmp	.+48     	; 0x1346 <__mulsf3+0xe4>
    1316:	40 0f       	add	r20, r16
    1318:	51 1f       	adc	r21, r17
    131a:	62 1f       	adc	r22, r18
    131c:	73 1f       	adc	r23, r19
    131e:	8c 0d       	add	r24, r12
    1320:	9d 1d       	adc	r25, r13
    1322:	ae 1d       	adc	r26, r14
    1324:	bf 1d       	adc	r27, r15
    1326:	41 2c       	mov	r4, r1
    1328:	51 2c       	mov	r5, r1
    132a:	32 01       	movw	r6, r4
    132c:	43 94       	inc	r4
    132e:	40 17       	cp	r20, r16
    1330:	51 07       	cpc	r21, r17
    1332:	62 07       	cpc	r22, r18
    1334:	73 07       	cpc	r23, r19
    1336:	18 f0       	brcs	.+6      	; 0x133e <__mulsf3+0xdc>
    1338:	41 2c       	mov	r4, r1
    133a:	51 2c       	mov	r5, r1
    133c:	32 01       	movw	r6, r4
    133e:	84 0d       	add	r24, r4
    1340:	95 1d       	adc	r25, r5
    1342:	a6 1d       	adc	r26, r6
    1344:	b7 1d       	adc	r27, r7
    1346:	cc 0c       	add	r12, r12
    1348:	dd 1c       	adc	r13, r13
    134a:	ee 1c       	adc	r14, r14
    134c:	ff 1c       	adc	r15, r15
    134e:	37 ff       	sbrs	r19, 7
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <__mulsf3+0xf4>
    1352:	68 94       	set
    1354:	c0 f8       	bld	r12, 0
    1356:	00 0f       	add	r16, r16
    1358:	11 1f       	adc	r17, r17
    135a:	22 1f       	adc	r18, r18
    135c:	33 1f       	adc	r19, r19
    135e:	b6 94       	lsr	r11
    1360:	a7 94       	ror	r10
    1362:	97 94       	ror	r9
    1364:	87 94       	ror	r8
    1366:	31 97       	sbiw	r30, 0x01	; 1
    1368:	a1 f6       	brne	.-88     	; 0x1312 <__mulsf3+0xb0>
    136a:	2b 89       	ldd	r18, Y+19	; 0x13
    136c:	3c 89       	ldd	r19, Y+20	; 0x14
    136e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1370:	fc 85       	ldd	r31, Y+12	; 0x0c
    1372:	2e 0f       	add	r18, r30
    1374:	3f 1f       	adc	r19, r31
    1376:	2e 5f       	subi	r18, 0xFE	; 254
    1378:	3f 4f       	sbci	r19, 0xFF	; 255
    137a:	3c 83       	std	Y+4, r19	; 0x04
    137c:	2b 83       	std	Y+3, r18	; 0x03
    137e:	21 e0       	ldi	r18, 0x01	; 1
    1380:	ea 89       	ldd	r30, Y+18	; 0x12
    1382:	3a 85       	ldd	r19, Y+10	; 0x0a
    1384:	e3 13       	cpse	r30, r19
    1386:	01 c0       	rjmp	.+2      	; 0x138a <__mulsf3+0x128>
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	2a 83       	std	Y+2, r18	; 0x02
    138c:	eb 81       	ldd	r30, Y+3	; 0x03
    138e:	fc 81       	ldd	r31, Y+4	; 0x04
    1390:	0c c0       	rjmp	.+24     	; 0x13aa <__mulsf3+0x148>
    1392:	80 ff       	sbrs	r24, 0
    1394:	05 c0       	rjmp	.+10     	; 0x13a0 <__mulsf3+0x13e>
    1396:	76 95       	lsr	r23
    1398:	67 95       	ror	r22
    139a:	57 95       	ror	r21
    139c:	47 95       	ror	r20
    139e:	70 68       	ori	r23, 0x80	; 128
    13a0:	b6 95       	lsr	r27
    13a2:	a7 95       	ror	r26
    13a4:	97 95       	ror	r25
    13a6:	87 95       	ror	r24
    13a8:	31 96       	adiw	r30, 0x01	; 1
    13aa:	b7 fd       	sbrc	r27, 7
    13ac:	f2 cf       	rjmp	.-28     	; 0x1392 <__mulsf3+0x130>
    13ae:	9f 01       	movw	r18, r30
    13b0:	0c c0       	rjmp	.+24     	; 0x13ca <__mulsf3+0x168>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	aa 1f       	adc	r26, r26
    13b8:	bb 1f       	adc	r27, r27
    13ba:	77 fd       	sbrc	r23, 7
    13bc:	81 60       	ori	r24, 0x01	; 1
    13be:	44 0f       	add	r20, r20
    13c0:	55 1f       	adc	r21, r21
    13c2:	66 1f       	adc	r22, r22
    13c4:	77 1f       	adc	r23, r23
    13c6:	21 50       	subi	r18, 0x01	; 1
    13c8:	31 09       	sbc	r19, r1
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	a1 05       	cpc	r26, r1
    13ce:	e0 e4       	ldi	r30, 0x40	; 64
    13d0:	be 07       	cpc	r27, r30
    13d2:	78 f3       	brcs	.-34     	; 0x13b2 <__mulsf3+0x150>
    13d4:	2b 83       	std	Y+3, r18	; 0x03
    13d6:	3c 83       	std	Y+4, r19	; 0x04
    13d8:	8c 01       	movw	r16, r24
    13da:	9d 01       	movw	r18, r26
    13dc:	0f 77       	andi	r16, 0x7F	; 127
    13de:	11 27       	eor	r17, r17
    13e0:	22 27       	eor	r18, r18
    13e2:	33 27       	eor	r19, r19
    13e4:	00 34       	cpi	r16, 0x40	; 64
    13e6:	11 05       	cpc	r17, r1
    13e8:	21 05       	cpc	r18, r1
    13ea:	31 05       	cpc	r19, r1
    13ec:	59 f4       	brne	.+22     	; 0x1404 <__mulsf3+0x1a2>
    13ee:	87 fd       	sbrc	r24, 7
    13f0:	09 c0       	rjmp	.+18     	; 0x1404 <__mulsf3+0x1a2>
    13f2:	45 2b       	or	r20, r21
    13f4:	46 2b       	or	r20, r22
    13f6:	47 2b       	or	r20, r23
    13f8:	29 f0       	breq	.+10     	; 0x1404 <__mulsf3+0x1a2>
    13fa:	80 5c       	subi	r24, 0xC0	; 192
    13fc:	9f 4f       	sbci	r25, 0xFF	; 255
    13fe:	af 4f       	sbci	r26, 0xFF	; 255
    1400:	bf 4f       	sbci	r27, 0xFF	; 255
    1402:	80 78       	andi	r24, 0x80	; 128
    1404:	8d 83       	std	Y+5, r24	; 0x05
    1406:	9e 83       	std	Y+6, r25	; 0x06
    1408:	af 83       	std	Y+7, r26	; 0x07
    140a:	b8 87       	std	Y+8, r27	; 0x08
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	ce 01       	movw	r24, r28
    1412:	01 96       	adiw	r24, 0x01	; 1
    1414:	02 c0       	rjmp	.+4      	; 0x141a <__mulsf3+0x1b8>
    1416:	86 e6       	ldi	r24, 0x66	; 102
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	25 d1       	rcall	.+586    	; 0x1666 <__pack_f>
    141c:	a0 96       	adiw	r28, 0x20	; 32
    141e:	e0 e1       	ldi	r30, 0x10	; 16
    1420:	df c2       	rjmp	.+1470   	; 0x19e0 <__epilogue_restores__+0x4>

00001422 <__gtsf2>:
    1422:	a8 e1       	ldi	r26, 0x18	; 24
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e6 e1       	ldi	r30, 0x16	; 22
    1428:	fa e0       	ldi	r31, 0x0A	; 10
    142a:	cc c2       	rjmp	.+1432   	; 0x19c4 <__prologue_saves__+0x20>
    142c:	6d 8b       	std	Y+21, r22	; 0x15
    142e:	7e 8b       	std	Y+22, r23	; 0x16
    1430:	8f 8b       	std	Y+23, r24	; 0x17
    1432:	98 8f       	std	Y+24, r25	; 0x18
    1434:	29 8b       	std	Y+17, r18	; 0x11
    1436:	3a 8b       	std	Y+18, r19	; 0x12
    1438:	4b 8b       	std	Y+19, r20	; 0x13
    143a:	5c 8b       	std	Y+20, r21	; 0x14
    143c:	be 01       	movw	r22, r28
    143e:	67 5f       	subi	r22, 0xF7	; 247
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	ce 01       	movw	r24, r28
    1444:	45 96       	adiw	r24, 0x15	; 21
    1446:	d0 d1       	rcall	.+928    	; 0x17e8 <__unpack_f>
    1448:	be 01       	movw	r22, r28
    144a:	6f 5f       	subi	r22, 0xFF	; 255
    144c:	7f 4f       	sbci	r23, 0xFF	; 255
    144e:	ce 01       	movw	r24, r28
    1450:	41 96       	adiw	r24, 0x11	; 17
    1452:	ca d1       	rcall	.+916    	; 0x17e8 <__unpack_f>
    1454:	89 85       	ldd	r24, Y+9	; 0x09
    1456:	82 30       	cpi	r24, 0x02	; 2
    1458:	50 f0       	brcs	.+20     	; 0x146e <__gtsf2+0x4c>
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	38 f0       	brcs	.+14     	; 0x146e <__gtsf2+0x4c>
    1460:	be 01       	movw	r22, r28
    1462:	6f 5f       	subi	r22, 0xFF	; 255
    1464:	7f 4f       	sbci	r23, 0xFF	; 255
    1466:	ce 01       	movw	r24, r28
    1468:	09 96       	adiw	r24, 0x09	; 9
    146a:	2d d2       	rcall	.+1114   	; 0x18c6 <__fpcmp_parts_f>
    146c:	01 c0       	rjmp	.+2      	; 0x1470 <__gtsf2+0x4e>
    146e:	8f ef       	ldi	r24, 0xFF	; 255
    1470:	68 96       	adiw	r28, 0x18	; 24
    1472:	e2 e0       	ldi	r30, 0x02	; 2
    1474:	c3 c2       	rjmp	.+1414   	; 0x19fc <__epilogue_restores__+0x20>

00001476 <__gesf2>:
    1476:	a8 e1       	ldi	r26, 0x18	; 24
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e0 e4       	ldi	r30, 0x40	; 64
    147c:	fa e0       	ldi	r31, 0x0A	; 10
    147e:	a2 c2       	rjmp	.+1348   	; 0x19c4 <__prologue_saves__+0x20>
    1480:	6d 8b       	std	Y+21, r22	; 0x15
    1482:	7e 8b       	std	Y+22, r23	; 0x16
    1484:	8f 8b       	std	Y+23, r24	; 0x17
    1486:	98 8f       	std	Y+24, r25	; 0x18
    1488:	29 8b       	std	Y+17, r18	; 0x11
    148a:	3a 8b       	std	Y+18, r19	; 0x12
    148c:	4b 8b       	std	Y+19, r20	; 0x13
    148e:	5c 8b       	std	Y+20, r21	; 0x14
    1490:	be 01       	movw	r22, r28
    1492:	67 5f       	subi	r22, 0xF7	; 247
    1494:	7f 4f       	sbci	r23, 0xFF	; 255
    1496:	ce 01       	movw	r24, r28
    1498:	45 96       	adiw	r24, 0x15	; 21
    149a:	a6 d1       	rcall	.+844    	; 0x17e8 <__unpack_f>
    149c:	be 01       	movw	r22, r28
    149e:	6f 5f       	subi	r22, 0xFF	; 255
    14a0:	7f 4f       	sbci	r23, 0xFF	; 255
    14a2:	ce 01       	movw	r24, r28
    14a4:	41 96       	adiw	r24, 0x11	; 17
    14a6:	a0 d1       	rcall	.+832    	; 0x17e8 <__unpack_f>
    14a8:	89 85       	ldd	r24, Y+9	; 0x09
    14aa:	82 30       	cpi	r24, 0x02	; 2
    14ac:	50 f0       	brcs	.+20     	; 0x14c2 <__gesf2+0x4c>
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	82 30       	cpi	r24, 0x02	; 2
    14b2:	38 f0       	brcs	.+14     	; 0x14c2 <__gesf2+0x4c>
    14b4:	be 01       	movw	r22, r28
    14b6:	6f 5f       	subi	r22, 0xFF	; 255
    14b8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ba:	ce 01       	movw	r24, r28
    14bc:	09 96       	adiw	r24, 0x09	; 9
    14be:	03 d2       	rcall	.+1030   	; 0x18c6 <__fpcmp_parts_f>
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <__gesf2+0x4e>
    14c2:	8f ef       	ldi	r24, 0xFF	; 255
    14c4:	68 96       	adiw	r28, 0x18	; 24
    14c6:	e2 e0       	ldi	r30, 0x02	; 2
    14c8:	99 c2       	rjmp	.+1330   	; 0x19fc <__epilogue_restores__+0x20>

000014ca <__ltsf2>:
    14ca:	a8 e1       	ldi	r26, 0x18	; 24
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	ea e6       	ldi	r30, 0x6A	; 106
    14d0:	fa e0       	ldi	r31, 0x0A	; 10
    14d2:	78 c2       	rjmp	.+1264   	; 0x19c4 <__prologue_saves__+0x20>
    14d4:	6d 8b       	std	Y+21, r22	; 0x15
    14d6:	7e 8b       	std	Y+22, r23	; 0x16
    14d8:	8f 8b       	std	Y+23, r24	; 0x17
    14da:	98 8f       	std	Y+24, r25	; 0x18
    14dc:	29 8b       	std	Y+17, r18	; 0x11
    14de:	3a 8b       	std	Y+18, r19	; 0x12
    14e0:	4b 8b       	std	Y+19, r20	; 0x13
    14e2:	5c 8b       	std	Y+20, r21	; 0x14
    14e4:	be 01       	movw	r22, r28
    14e6:	67 5f       	subi	r22, 0xF7	; 247
    14e8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ea:	ce 01       	movw	r24, r28
    14ec:	45 96       	adiw	r24, 0x15	; 21
    14ee:	7c d1       	rcall	.+760    	; 0x17e8 <__unpack_f>
    14f0:	be 01       	movw	r22, r28
    14f2:	6f 5f       	subi	r22, 0xFF	; 255
    14f4:	7f 4f       	sbci	r23, 0xFF	; 255
    14f6:	ce 01       	movw	r24, r28
    14f8:	41 96       	adiw	r24, 0x11	; 17
    14fa:	76 d1       	rcall	.+748    	; 0x17e8 <__unpack_f>
    14fc:	89 85       	ldd	r24, Y+9	; 0x09
    14fe:	82 30       	cpi	r24, 0x02	; 2
    1500:	50 f0       	brcs	.+20     	; 0x1516 <__ltsf2+0x4c>
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	82 30       	cpi	r24, 0x02	; 2
    1506:	38 f0       	brcs	.+14     	; 0x1516 <__ltsf2+0x4c>
    1508:	be 01       	movw	r22, r28
    150a:	6f 5f       	subi	r22, 0xFF	; 255
    150c:	7f 4f       	sbci	r23, 0xFF	; 255
    150e:	ce 01       	movw	r24, r28
    1510:	09 96       	adiw	r24, 0x09	; 9
    1512:	d9 d1       	rcall	.+946    	; 0x18c6 <__fpcmp_parts_f>
    1514:	01 c0       	rjmp	.+2      	; 0x1518 <__ltsf2+0x4e>
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	68 96       	adiw	r28, 0x18	; 24
    151a:	e2 e0       	ldi	r30, 0x02	; 2
    151c:	6f c2       	rjmp	.+1246   	; 0x19fc <__epilogue_restores__+0x20>

0000151e <__floatsisf>:
    151e:	a8 e0       	ldi	r26, 0x08	; 8
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e4 e9       	ldi	r30, 0x94	; 148
    1524:	fa e0       	ldi	r31, 0x0A	; 10
    1526:	4c c2       	rjmp	.+1176   	; 0x19c0 <__prologue_saves__+0x1c>
    1528:	23 e0       	ldi	r18, 0x03	; 3
    152a:	29 83       	std	Y+1, r18	; 0x01
    152c:	8b 01       	movw	r16, r22
    152e:	9c 01       	movw	r18, r24
    1530:	00 27       	eor	r16, r16
    1532:	37 fd       	sbrc	r19, 7
    1534:	03 95       	inc	r16
    1536:	11 27       	eor	r17, r17
    1538:	22 27       	eor	r18, r18
    153a:	33 27       	eor	r19, r19
    153c:	40 2f       	mov	r20, r16
    153e:	0a 83       	std	Y+2, r16	; 0x02
    1540:	61 15       	cp	r22, r1
    1542:	71 05       	cpc	r23, r1
    1544:	81 05       	cpc	r24, r1
    1546:	91 05       	cpc	r25, r1
    1548:	19 f4       	brne	.+6      	; 0x1550 <__floatsisf+0x32>
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	34 c0       	rjmp	.+104    	; 0x15b8 <__floatsisf+0x9a>
    1550:	2e e1       	ldi	r18, 0x1E	; 30
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	3c 83       	std	Y+4, r19	; 0x04
    1556:	2b 83       	std	Y+3, r18	; 0x03
    1558:	44 23       	and	r20, r20
    155a:	71 f0       	breq	.+28     	; 0x1578 <__floatsisf+0x5a>
    155c:	61 15       	cp	r22, r1
    155e:	71 05       	cpc	r23, r1
    1560:	81 05       	cpc	r24, r1
    1562:	20 e8       	ldi	r18, 0x80	; 128
    1564:	92 07       	cpc	r25, r18
    1566:	61 f1       	breq	.+88     	; 0x15c0 <__floatsisf+0xa2>
    1568:	00 27       	eor	r16, r16
    156a:	11 27       	eor	r17, r17
    156c:	98 01       	movw	r18, r16
    156e:	06 1b       	sub	r16, r22
    1570:	17 0b       	sbc	r17, r23
    1572:	28 0b       	sbc	r18, r24
    1574:	39 0b       	sbc	r19, r25
    1576:	02 c0       	rjmp	.+4      	; 0x157c <__floatsisf+0x5e>
    1578:	8b 01       	movw	r16, r22
    157a:	9c 01       	movw	r18, r24
    157c:	c9 01       	movw	r24, r18
    157e:	b8 01       	movw	r22, r16
    1580:	48 d2       	rcall	.+1168   	; 0x1a12 <__clzsi2>
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	18 16       	cp	r1, r24
    1586:	19 06       	cpc	r1, r25
    1588:	2c f0       	brlt	.+10     	; 0x1594 <__floatsisf+0x76>
    158a:	0d 83       	std	Y+5, r16	; 0x05
    158c:	1e 83       	std	Y+6, r17	; 0x06
    158e:	2f 83       	std	Y+7, r18	; 0x07
    1590:	38 87       	std	Y+8, r19	; 0x08
    1592:	12 c0       	rjmp	.+36     	; 0x15b8 <__floatsisf+0x9a>
    1594:	08 2e       	mov	r0, r24
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <__floatsisf+0x82>
    1598:	00 0f       	add	r16, r16
    159a:	11 1f       	adc	r17, r17
    159c:	22 1f       	adc	r18, r18
    159e:	33 1f       	adc	r19, r19
    15a0:	0a 94       	dec	r0
    15a2:	d2 f7       	brpl	.-12     	; 0x1598 <__floatsisf+0x7a>
    15a4:	0d 83       	std	Y+5, r16	; 0x05
    15a6:	1e 83       	std	Y+6, r17	; 0x06
    15a8:	2f 83       	std	Y+7, r18	; 0x07
    15aa:	38 87       	std	Y+8, r19	; 0x08
    15ac:	2e e1       	ldi	r18, 0x1E	; 30
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	28 1b       	sub	r18, r24
    15b2:	39 0b       	sbc	r19, r25
    15b4:	3c 83       	std	Y+4, r19	; 0x04
    15b6:	2b 83       	std	Y+3, r18	; 0x03
    15b8:	ce 01       	movw	r24, r28
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	54 d0       	rcall	.+168    	; 0x1666 <__pack_f>
    15be:	04 c0       	rjmp	.+8      	; 0x15c8 <__floatsisf+0xaa>
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	9f ec       	ldi	r25, 0xCF	; 207
    15c8:	28 96       	adiw	r28, 0x08	; 8
    15ca:	e4 e0       	ldi	r30, 0x04	; 4
    15cc:	15 c2       	rjmp	.+1066   	; 0x19f8 <__epilogue_restores__+0x1c>

000015ce <__fixsfsi>:
    15ce:	ac e0       	ldi	r26, 0x0C	; 12
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	ec ee       	ldi	r30, 0xEC	; 236
    15d4:	fa e0       	ldi	r31, 0x0A	; 10
    15d6:	f4 c1       	rjmp	.+1000   	; 0x19c0 <__prologue_saves__+0x1c>
    15d8:	69 87       	std	Y+9, r22	; 0x09
    15da:	7a 87       	std	Y+10, r23	; 0x0a
    15dc:	8b 87       	std	Y+11, r24	; 0x0b
    15de:	9c 87       	std	Y+12, r25	; 0x0c
    15e0:	be 01       	movw	r22, r28
    15e2:	6f 5f       	subi	r22, 0xFF	; 255
    15e4:	7f 4f       	sbci	r23, 0xFF	; 255
    15e6:	ce 01       	movw	r24, r28
    15e8:	09 96       	adiw	r24, 0x09	; 9
    15ea:	fe d0       	rcall	.+508    	; 0x17e8 <__unpack_f>
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	82 30       	cpi	r24, 0x02	; 2
    15f0:	91 f1       	breq	.+100    	; 0x1656 <__fixsfsi+0x88>
    15f2:	82 30       	cpi	r24, 0x02	; 2
    15f4:	80 f1       	brcs	.+96     	; 0x1656 <__fixsfsi+0x88>
    15f6:	84 30       	cpi	r24, 0x04	; 4
    15f8:	41 f4       	brne	.+16     	; 0x160a <__fixsfsi+0x3c>
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	88 23       	and	r24, r24
    15fe:	31 f1       	breq	.+76     	; 0x164c <__fixsfsi+0x7e>
    1600:	00 e0       	ldi	r16, 0x00	; 0
    1602:	10 e0       	ldi	r17, 0x00	; 0
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e8       	ldi	r19, 0x80	; 128
    1608:	29 c0       	rjmp	.+82     	; 0x165c <__fixsfsi+0x8e>
    160a:	2b 81       	ldd	r18, Y+3	; 0x03
    160c:	3c 81       	ldd	r19, Y+4	; 0x04
    160e:	37 fd       	sbrc	r19, 7
    1610:	22 c0       	rjmp	.+68     	; 0x1656 <__fixsfsi+0x88>
    1612:	2f 31       	cpi	r18, 0x1F	; 31
    1614:	31 05       	cpc	r19, r1
    1616:	8c f7       	brge	.-30     	; 0x15fa <__fixsfsi+0x2c>
    1618:	8e e1       	ldi	r24, 0x1E	; 30
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	82 1b       	sub	r24, r18
    161e:	93 0b       	sbc	r25, r19
    1620:	0d 81       	ldd	r16, Y+5	; 0x05
    1622:	1e 81       	ldd	r17, Y+6	; 0x06
    1624:	2f 81       	ldd	r18, Y+7	; 0x07
    1626:	38 85       	ldd	r19, Y+8	; 0x08
    1628:	04 c0       	rjmp	.+8      	; 0x1632 <__fixsfsi+0x64>
    162a:	36 95       	lsr	r19
    162c:	27 95       	ror	r18
    162e:	17 95       	ror	r17
    1630:	07 95       	ror	r16
    1632:	8a 95       	dec	r24
    1634:	d2 f7       	brpl	.-12     	; 0x162a <__fixsfsi+0x5c>
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	88 23       	and	r24, r24
    163a:	81 f0       	breq	.+32     	; 0x165c <__fixsfsi+0x8e>
    163c:	30 95       	com	r19
    163e:	20 95       	com	r18
    1640:	10 95       	com	r17
    1642:	01 95       	neg	r16
    1644:	1f 4f       	sbci	r17, 0xFF	; 255
    1646:	2f 4f       	sbci	r18, 0xFF	; 255
    1648:	3f 4f       	sbci	r19, 0xFF	; 255
    164a:	08 c0       	rjmp	.+16     	; 0x165c <__fixsfsi+0x8e>
    164c:	0f ef       	ldi	r16, 0xFF	; 255
    164e:	1f ef       	ldi	r17, 0xFF	; 255
    1650:	2f ef       	ldi	r18, 0xFF	; 255
    1652:	3f e7       	ldi	r19, 0x7F	; 127
    1654:	03 c0       	rjmp	.+6      	; 0x165c <__fixsfsi+0x8e>
    1656:	00 e0       	ldi	r16, 0x00	; 0
    1658:	10 e0       	ldi	r17, 0x00	; 0
    165a:	98 01       	movw	r18, r16
    165c:	b8 01       	movw	r22, r16
    165e:	c9 01       	movw	r24, r18
    1660:	2c 96       	adiw	r28, 0x0c	; 12
    1662:	e4 e0       	ldi	r30, 0x04	; 4
    1664:	c9 c1       	rjmp	.+914    	; 0x19f8 <__epilogue_restores__+0x1c>

00001666 <__pack_f>:
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	fc 01       	movw	r30, r24
    166e:	44 81       	ldd	r20, Z+4	; 0x04
    1670:	55 81       	ldd	r21, Z+5	; 0x05
    1672:	66 81       	ldd	r22, Z+6	; 0x06
    1674:	77 81       	ldd	r23, Z+7	; 0x07
    1676:	c1 81       	ldd	r28, Z+1	; 0x01
    1678:	80 81       	ld	r24, Z
    167a:	82 30       	cpi	r24, 0x02	; 2
    167c:	20 f4       	brcc	.+8      	; 0x1686 <__pack_f+0x20>
    167e:	60 61       	ori	r22, 0x10	; 16
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a3 c0       	rjmp	.+326    	; 0x17cc <__pack_f+0x166>
    1686:	84 30       	cpi	r24, 0x04	; 4
    1688:	09 f4       	brne	.+2      	; 0x168c <__pack_f+0x26>
    168a:	9b c0       	rjmp	.+310    	; 0x17c2 <__pack_f+0x15c>
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	09 f4       	brne	.+2      	; 0x1692 <__pack_f+0x2c>
    1690:	92 c0       	rjmp	.+292    	; 0x17b6 <__pack_f+0x150>
    1692:	41 15       	cp	r20, r1
    1694:	51 05       	cpc	r21, r1
    1696:	61 05       	cpc	r22, r1
    1698:	71 05       	cpc	r23, r1
    169a:	09 f4       	brne	.+2      	; 0x169e <__pack_f+0x38>
    169c:	8f c0       	rjmp	.+286    	; 0x17bc <__pack_f+0x156>
    169e:	22 81       	ldd	r18, Z+2	; 0x02
    16a0:	33 81       	ldd	r19, Z+3	; 0x03
    16a2:	22 38       	cpi	r18, 0x82	; 130
    16a4:	8f ef       	ldi	r24, 0xFF	; 255
    16a6:	38 07       	cpc	r19, r24
    16a8:	0c f0       	brlt	.+2      	; 0x16ac <__pack_f+0x46>
    16aa:	57 c0       	rjmp	.+174    	; 0x175a <__pack_f+0xf4>
    16ac:	e2 e8       	ldi	r30, 0x82	; 130
    16ae:	ff ef       	ldi	r31, 0xFF	; 255
    16b0:	e2 1b       	sub	r30, r18
    16b2:	f3 0b       	sbc	r31, r19
    16b4:	ea 31       	cpi	r30, 0x1A	; 26
    16b6:	f1 05       	cpc	r31, r1
    16b8:	64 f5       	brge	.+88     	; 0x1712 <__pack_f+0xac>
    16ba:	8a 01       	movw	r16, r20
    16bc:	9b 01       	movw	r18, r22
    16be:	0e 2e       	mov	r0, r30
    16c0:	04 c0       	rjmp	.+8      	; 0x16ca <__pack_f+0x64>
    16c2:	36 95       	lsr	r19
    16c4:	27 95       	ror	r18
    16c6:	17 95       	ror	r17
    16c8:	07 95       	ror	r16
    16ca:	0a 94       	dec	r0
    16cc:	d2 f7       	brpl	.-12     	; 0x16c2 <__pack_f+0x5c>
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	a0 e0       	ldi	r26, 0x00	; 0
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <__pack_f+0x7a>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	aa 1f       	adc	r26, r26
    16de:	bb 1f       	adc	r27, r27
    16e0:	ea 95       	dec	r30
    16e2:	d2 f7       	brpl	.-12     	; 0x16d8 <__pack_f+0x72>
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	a1 09       	sbc	r26, r1
    16e8:	b1 09       	sbc	r27, r1
    16ea:	84 23       	and	r24, r20
    16ec:	95 23       	and	r25, r21
    16ee:	a6 23       	and	r26, r22
    16f0:	b7 23       	and	r27, r23
    16f2:	41 e0       	ldi	r20, 0x01	; 1
    16f4:	50 e0       	ldi	r21, 0x00	; 0
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	89 2b       	or	r24, r25
    16fc:	8a 2b       	or	r24, r26
    16fe:	8b 2b       	or	r24, r27
    1700:	19 f4       	brne	.+6      	; 0x1708 <__pack_f+0xa2>
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	ba 01       	movw	r22, r20
    1708:	40 2b       	or	r20, r16
    170a:	51 2b       	or	r21, r17
    170c:	62 2b       	or	r22, r18
    170e:	73 2b       	or	r23, r19
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <__pack_f+0xb2>
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	ba 01       	movw	r22, r20
    1718:	db 01       	movw	r26, r22
    171a:	ca 01       	movw	r24, r20
    171c:	8f 77       	andi	r24, 0x7F	; 127
    171e:	99 27       	eor	r25, r25
    1720:	aa 27       	eor	r26, r26
    1722:	bb 27       	eor	r27, r27
    1724:	80 34       	cpi	r24, 0x40	; 64
    1726:	91 05       	cpc	r25, r1
    1728:	a1 05       	cpc	r26, r1
    172a:	b1 05       	cpc	r27, r1
    172c:	39 f4       	brne	.+14     	; 0x173c <__pack_f+0xd6>
    172e:	47 ff       	sbrs	r20, 7
    1730:	09 c0       	rjmp	.+18     	; 0x1744 <__pack_f+0xde>
    1732:	40 5c       	subi	r20, 0xC0	; 192
    1734:	5f 4f       	sbci	r21, 0xFF	; 255
    1736:	6f 4f       	sbci	r22, 0xFF	; 255
    1738:	7f 4f       	sbci	r23, 0xFF	; 255
    173a:	04 c0       	rjmp	.+8      	; 0x1744 <__pack_f+0xde>
    173c:	41 5c       	subi	r20, 0xC1	; 193
    173e:	5f 4f       	sbci	r21, 0xFF	; 255
    1740:	6f 4f       	sbci	r22, 0xFF	; 255
    1742:	7f 4f       	sbci	r23, 0xFF	; 255
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	41 15       	cp	r20, r1
    174a:	51 05       	cpc	r21, r1
    174c:	61 05       	cpc	r22, r1
    174e:	20 e4       	ldi	r18, 0x40	; 64
    1750:	72 07       	cpc	r23, r18
    1752:	48 f5       	brcc	.+82     	; 0x17a6 <__pack_f+0x140>
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	26 c0       	rjmp	.+76     	; 0x17a6 <__pack_f+0x140>
    175a:	20 38       	cpi	r18, 0x80	; 128
    175c:	31 05       	cpc	r19, r1
    175e:	8c f5       	brge	.+98     	; 0x17c2 <__pack_f+0x15c>
    1760:	db 01       	movw	r26, r22
    1762:	ca 01       	movw	r24, r20
    1764:	8f 77       	andi	r24, 0x7F	; 127
    1766:	99 27       	eor	r25, r25
    1768:	aa 27       	eor	r26, r26
    176a:	bb 27       	eor	r27, r27
    176c:	80 34       	cpi	r24, 0x40	; 64
    176e:	91 05       	cpc	r25, r1
    1770:	a1 05       	cpc	r26, r1
    1772:	b1 05       	cpc	r27, r1
    1774:	39 f4       	brne	.+14     	; 0x1784 <__pack_f+0x11e>
    1776:	47 ff       	sbrs	r20, 7
    1778:	09 c0       	rjmp	.+18     	; 0x178c <__pack_f+0x126>
    177a:	40 5c       	subi	r20, 0xC0	; 192
    177c:	5f 4f       	sbci	r21, 0xFF	; 255
    177e:	6f 4f       	sbci	r22, 0xFF	; 255
    1780:	7f 4f       	sbci	r23, 0xFF	; 255
    1782:	04 c0       	rjmp	.+8      	; 0x178c <__pack_f+0x126>
    1784:	41 5c       	subi	r20, 0xC1	; 193
    1786:	5f 4f       	sbci	r21, 0xFF	; 255
    1788:	6f 4f       	sbci	r22, 0xFF	; 255
    178a:	7f 4f       	sbci	r23, 0xFF	; 255
    178c:	77 fd       	sbrc	r23, 7
    178e:	04 c0       	rjmp	.+8      	; 0x1798 <__pack_f+0x132>
    1790:	c9 01       	movw	r24, r18
    1792:	81 58       	subi	r24, 0x81	; 129
    1794:	9f 4f       	sbci	r25, 0xFF	; 255
    1796:	07 c0       	rjmp	.+14     	; 0x17a6 <__pack_f+0x140>
    1798:	76 95       	lsr	r23
    179a:	67 95       	ror	r22
    179c:	57 95       	ror	r21
    179e:	47 95       	ror	r20
    17a0:	c9 01       	movw	r24, r18
    17a2:	80 58       	subi	r24, 0x80	; 128
    17a4:	9f 4f       	sbci	r25, 0xFF	; 255
    17a6:	97 e0       	ldi	r25, 0x07	; 7
    17a8:	76 95       	lsr	r23
    17aa:	67 95       	ror	r22
    17ac:	57 95       	ror	r21
    17ae:	47 95       	ror	r20
    17b0:	9a 95       	dec	r25
    17b2:	d1 f7       	brne	.-12     	; 0x17a8 <__pack_f+0x142>
    17b4:	0b c0       	rjmp	.+22     	; 0x17cc <__pack_f+0x166>
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	05 c0       	rjmp	.+10     	; 0x17c6 <__pack_f+0x160>
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	05 c0       	rjmp	.+10     	; 0x17cc <__pack_f+0x166>
    17c2:	8f ef       	ldi	r24, 0xFF	; 255
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	ba 01       	movw	r22, r20
    17cc:	98 2f       	mov	r25, r24
    17ce:	96 95       	lsr	r25
    17d0:	c0 fb       	bst	r28, 0
    17d2:	97 f9       	bld	r25, 7
    17d4:	36 2f       	mov	r19, r22
    17d6:	80 fb       	bst	r24, 0
    17d8:	37 f9       	bld	r19, 7
    17da:	64 2f       	mov	r22, r20
    17dc:	75 2f       	mov	r23, r21
    17de:	83 2f       	mov	r24, r19
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	08 95       	ret

000017e8 <__unpack_f>:
    17e8:	cf 92       	push	r12
    17ea:	df 92       	push	r13
    17ec:	ef 92       	push	r14
    17ee:	dc 01       	movw	r26, r24
    17f0:	fb 01       	movw	r30, r22
    17f2:	cc 90       	ld	r12, X
    17f4:	11 96       	adiw	r26, 0x01	; 1
    17f6:	dc 90       	ld	r13, X
    17f8:	11 97       	sbiw	r26, 0x01	; 1
    17fa:	12 96       	adiw	r26, 0x02	; 2
    17fc:	8c 91       	ld	r24, X
    17fe:	12 97       	sbiw	r26, 0x02	; 2
    1800:	3f e7       	ldi	r19, 0x7F	; 127
    1802:	e3 2e       	mov	r14, r19
    1804:	e8 22       	and	r14, r24
    1806:	6e 2d       	mov	r22, r14
    1808:	a6 01       	movw	r20, r12
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	98 2f       	mov	r25, r24
    180e:	99 1f       	adc	r25, r25
    1810:	99 27       	eor	r25, r25
    1812:	99 1f       	adc	r25, r25
    1814:	13 96       	adiw	r26, 0x03	; 3
    1816:	2c 91       	ld	r18, X
    1818:	82 2f       	mov	r24, r18
    181a:	88 0f       	add	r24, r24
    181c:	89 2b       	or	r24, r25
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	27 fb       	bst	r18, 7
    1822:	22 27       	eor	r18, r18
    1824:	20 f9       	bld	r18, 0
    1826:	21 83       	std	Z+1, r18	; 0x01
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	29 f5       	brne	.+74     	; 0x1876 <__unpack_f+0x8e>
    182c:	41 15       	cp	r20, r1
    182e:	51 05       	cpc	r21, r1
    1830:	61 05       	cpc	r22, r1
    1832:	71 05       	cpc	r23, r1
    1834:	11 f4       	brne	.+4      	; 0x183a <__unpack_f+0x52>
    1836:	82 e0       	ldi	r24, 0x02	; 2
    1838:	27 c0       	rjmp	.+78     	; 0x1888 <__unpack_f+0xa0>
    183a:	82 e8       	ldi	r24, 0x82	; 130
    183c:	9f ef       	ldi	r25, 0xFF	; 255
    183e:	93 83       	std	Z+3, r25	; 0x03
    1840:	82 83       	std	Z+2, r24	; 0x02
    1842:	27 e0       	ldi	r18, 0x07	; 7
    1844:	44 0f       	add	r20, r20
    1846:	55 1f       	adc	r21, r21
    1848:	66 1f       	adc	r22, r22
    184a:	77 1f       	adc	r23, r23
    184c:	2a 95       	dec	r18
    184e:	d1 f7       	brne	.-12     	; 0x1844 <__unpack_f+0x5c>
    1850:	83 e0       	ldi	r24, 0x03	; 3
    1852:	80 83       	st	Z, r24
    1854:	09 c0       	rjmp	.+18     	; 0x1868 <__unpack_f+0x80>
    1856:	44 0f       	add	r20, r20
    1858:	55 1f       	adc	r21, r21
    185a:	66 1f       	adc	r22, r22
    185c:	77 1f       	adc	r23, r23
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	93 83       	std	Z+3, r25	; 0x03
    1866:	82 83       	std	Z+2, r24	; 0x02
    1868:	41 15       	cp	r20, r1
    186a:	51 05       	cpc	r21, r1
    186c:	61 05       	cpc	r22, r1
    186e:	80 e4       	ldi	r24, 0x40	; 64
    1870:	78 07       	cpc	r23, r24
    1872:	88 f3       	brcs	.-30     	; 0x1856 <__unpack_f+0x6e>
    1874:	20 c0       	rjmp	.+64     	; 0x18b6 <__unpack_f+0xce>
    1876:	8f 3f       	cpi	r24, 0xFF	; 255
    1878:	91 05       	cpc	r25, r1
    187a:	79 f4       	brne	.+30     	; 0x189a <__unpack_f+0xb2>
    187c:	41 15       	cp	r20, r1
    187e:	51 05       	cpc	r21, r1
    1880:	61 05       	cpc	r22, r1
    1882:	71 05       	cpc	r23, r1
    1884:	19 f4       	brne	.+6      	; 0x188c <__unpack_f+0xa4>
    1886:	84 e0       	ldi	r24, 0x04	; 4
    1888:	80 83       	st	Z, r24
    188a:	19 c0       	rjmp	.+50     	; 0x18be <__unpack_f+0xd6>
    188c:	e4 fe       	sbrs	r14, 4
    188e:	03 c0       	rjmp	.+6      	; 0x1896 <__unpack_f+0xae>
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	80 83       	st	Z, r24
    1894:	10 c0       	rjmp	.+32     	; 0x18b6 <__unpack_f+0xce>
    1896:	10 82       	st	Z, r1
    1898:	0e c0       	rjmp	.+28     	; 0x18b6 <__unpack_f+0xce>
    189a:	8f 57       	subi	r24, 0x7F	; 127
    189c:	91 09       	sbc	r25, r1
    189e:	93 83       	std	Z+3, r25	; 0x03
    18a0:	82 83       	std	Z+2, r24	; 0x02
    18a2:	83 e0       	ldi	r24, 0x03	; 3
    18a4:	80 83       	st	Z, r24
    18a6:	87 e0       	ldi	r24, 0x07	; 7
    18a8:	44 0f       	add	r20, r20
    18aa:	55 1f       	adc	r21, r21
    18ac:	66 1f       	adc	r22, r22
    18ae:	77 1f       	adc	r23, r23
    18b0:	8a 95       	dec	r24
    18b2:	d1 f7       	brne	.-12     	; 0x18a8 <__unpack_f+0xc0>
    18b4:	70 64       	ori	r23, 0x40	; 64
    18b6:	44 83       	std	Z+4, r20	; 0x04
    18b8:	55 83       	std	Z+5, r21	; 0x05
    18ba:	66 83       	std	Z+6, r22	; 0x06
    18bc:	77 83       	std	Z+7, r23	; 0x07
    18be:	ef 90       	pop	r14
    18c0:	df 90       	pop	r13
    18c2:	cf 90       	pop	r12
    18c4:	08 95       	ret

000018c6 <__fpcmp_parts_f>:
    18c6:	cf 93       	push	r28
    18c8:	fc 01       	movw	r30, r24
    18ca:	db 01       	movw	r26, r22
    18cc:	90 81       	ld	r25, Z
    18ce:	92 30       	cpi	r25, 0x02	; 2
    18d0:	08 f4       	brcc	.+2      	; 0x18d4 <__fpcmp_parts_f+0xe>
    18d2:	52 c0       	rjmp	.+164    	; 0x1978 <__fpcmp_parts_f+0xb2>
    18d4:	8c 91       	ld	r24, X
    18d6:	82 30       	cpi	r24, 0x02	; 2
    18d8:	08 f4       	brcc	.+2      	; 0x18dc <__fpcmp_parts_f+0x16>
    18da:	4e c0       	rjmp	.+156    	; 0x1978 <__fpcmp_parts_f+0xb2>
    18dc:	94 30       	cpi	r25, 0x04	; 4
    18de:	71 f4       	brne	.+28     	; 0x18fc <__fpcmp_parts_f+0x36>
    18e0:	84 30       	cpi	r24, 0x04	; 4
    18e2:	39 f4       	brne	.+14     	; 0x18f2 <__fpcmp_parts_f+0x2c>
    18e4:	11 96       	adiw	r26, 0x01	; 1
    18e6:	2c 91       	ld	r18, X
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 81       	ldd	r24, Z+1	; 0x01
    18ec:	28 1b       	sub	r18, r24
    18ee:	31 09       	sbc	r19, r1
    18f0:	48 c0       	rjmp	.+144    	; 0x1982 <__fpcmp_parts_f+0xbc>
    18f2:	81 81       	ldd	r24, Z+1	; 0x01
    18f4:	88 23       	and	r24, r24
    18f6:	09 f4       	brne	.+2      	; 0x18fa <__fpcmp_parts_f+0x34>
    18f8:	3f c0       	rjmp	.+126    	; 0x1978 <__fpcmp_parts_f+0xb2>
    18fa:	3b c0       	rjmp	.+118    	; 0x1972 <__fpcmp_parts_f+0xac>
    18fc:	84 30       	cpi	r24, 0x04	; 4
    18fe:	29 f4       	brne	.+10     	; 0x190a <__fpcmp_parts_f+0x44>
    1900:	11 96       	adiw	r26, 0x01	; 1
    1902:	8c 91       	ld	r24, X
    1904:	81 11       	cpse	r24, r1
    1906:	38 c0       	rjmp	.+112    	; 0x1978 <__fpcmp_parts_f+0xb2>
    1908:	34 c0       	rjmp	.+104    	; 0x1972 <__fpcmp_parts_f+0xac>
    190a:	92 30       	cpi	r25, 0x02	; 2
    190c:	19 f4       	brne	.+6      	; 0x1914 <__fpcmp_parts_f+0x4e>
    190e:	82 30       	cpi	r24, 0x02	; 2
    1910:	b9 f7       	brne	.-18     	; 0x1900 <__fpcmp_parts_f+0x3a>
    1912:	35 c0       	rjmp	.+106    	; 0x197e <__fpcmp_parts_f+0xb8>
    1914:	82 30       	cpi	r24, 0x02	; 2
    1916:	69 f3       	breq	.-38     	; 0x18f2 <__fpcmp_parts_f+0x2c>
    1918:	c1 81       	ldd	r28, Z+1	; 0x01
    191a:	11 96       	adiw	r26, 0x01	; 1
    191c:	8c 91       	ld	r24, X
    191e:	11 97       	sbiw	r26, 0x01	; 1
    1920:	c8 13       	cpse	r28, r24
    1922:	1d c0       	rjmp	.+58     	; 0x195e <__fpcmp_parts_f+0x98>
    1924:	22 81       	ldd	r18, Z+2	; 0x02
    1926:	33 81       	ldd	r19, Z+3	; 0x03
    1928:	12 96       	adiw	r26, 0x02	; 2
    192a:	8d 91       	ld	r24, X+
    192c:	9c 91       	ld	r25, X
    192e:	13 97       	sbiw	r26, 0x03	; 3
    1930:	82 17       	cp	r24, r18
    1932:	93 07       	cpc	r25, r19
    1934:	0c f4       	brge	.+2      	; 0x1938 <__fpcmp_parts_f+0x72>
    1936:	13 c0       	rjmp	.+38     	; 0x195e <__fpcmp_parts_f+0x98>
    1938:	28 17       	cp	r18, r24
    193a:	39 07       	cpc	r19, r25
    193c:	0c f4       	brge	.+2      	; 0x1940 <__fpcmp_parts_f+0x7a>
    193e:	17 c0       	rjmp	.+46     	; 0x196e <__fpcmp_parts_f+0xa8>
    1940:	44 81       	ldd	r20, Z+4	; 0x04
    1942:	55 81       	ldd	r21, Z+5	; 0x05
    1944:	66 81       	ldd	r22, Z+6	; 0x06
    1946:	77 81       	ldd	r23, Z+7	; 0x07
    1948:	14 96       	adiw	r26, 0x04	; 4
    194a:	8d 91       	ld	r24, X+
    194c:	9d 91       	ld	r25, X+
    194e:	0d 90       	ld	r0, X+
    1950:	bc 91       	ld	r27, X
    1952:	a0 2d       	mov	r26, r0
    1954:	84 17       	cp	r24, r20
    1956:	95 07       	cpc	r25, r21
    1958:	a6 07       	cpc	r26, r22
    195a:	b7 07       	cpc	r27, r23
    195c:	18 f4       	brcc	.+6      	; 0x1964 <__fpcmp_parts_f+0x9e>
    195e:	c1 11       	cpse	r28, r1
    1960:	08 c0       	rjmp	.+16     	; 0x1972 <__fpcmp_parts_f+0xac>
    1962:	0a c0       	rjmp	.+20     	; 0x1978 <__fpcmp_parts_f+0xb2>
    1964:	48 17       	cp	r20, r24
    1966:	59 07       	cpc	r21, r25
    1968:	6a 07       	cpc	r22, r26
    196a:	7b 07       	cpc	r23, r27
    196c:	40 f4       	brcc	.+16     	; 0x197e <__fpcmp_parts_f+0xb8>
    196e:	c1 11       	cpse	r28, r1
    1970:	03 c0       	rjmp	.+6      	; 0x1978 <__fpcmp_parts_f+0xb2>
    1972:	2f ef       	ldi	r18, 0xFF	; 255
    1974:	3f ef       	ldi	r19, 0xFF	; 255
    1976:	05 c0       	rjmp	.+10     	; 0x1982 <__fpcmp_parts_f+0xbc>
    1978:	21 e0       	ldi	r18, 0x01	; 1
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <__fpcmp_parts_f+0xbc>
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	c9 01       	movw	r24, r18
    1984:	cf 91       	pop	r28
    1986:	08 95       	ret

00001988 <main>:
    1988:	8e d4       	rcall	.+2332   	; 0x22a6 <__data_load_end+0x826>
    198a:	c0 ec       	ldi	r28, 0xC0	; 192
    198c:	65 e0       	ldi	r22, 0x05	; 5
    198e:	87 e0       	ldi	r24, 0x07	; 7
    1990:	f1 d8       	rcall	.-3614   	; 0xb74 <rfm_22_write>
    1992:	ca bf       	out	0x3a, r28	; 58
    1994:	78 94       	sei
    1996:	81 b3       	in	r24, 0x11	; 17
    1998:	83 7f       	andi	r24, 0xF3	; 243
    199a:	81 bb       	out	0x11, r24	; 17
    199c:	85 b7       	in	r24, 0x35	; 53
    199e:	80 68       	ori	r24, 0x80	; 128
    19a0:	85 bf       	out	0x35, r24	; 53
    19a2:	f4 cf       	rjmp	.-24     	; 0x198c <main+0x4>

000019a4 <__prologue_saves__>:
    19a4:	2f 92       	push	r2
    19a6:	3f 92       	push	r3
    19a8:	4f 92       	push	r4
    19aa:	5f 92       	push	r5
    19ac:	6f 92       	push	r6
    19ae:	7f 92       	push	r7
    19b0:	8f 92       	push	r8
    19b2:	9f 92       	push	r9
    19b4:	af 92       	push	r10
    19b6:	bf 92       	push	r11
    19b8:	cf 92       	push	r12
    19ba:	df 92       	push	r13
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	ca 1b       	sub	r28, r26
    19ce:	db 0b       	sbc	r29, r27
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	09 94       	ijmp

000019dc <__epilogue_restores__>:
    19dc:	2a 88       	ldd	r2, Y+18	; 0x12
    19de:	39 88       	ldd	r3, Y+17	; 0x11
    19e0:	48 88       	ldd	r4, Y+16	; 0x10
    19e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    19e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    19e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    19e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    19ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    19ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    19ee:	b9 84       	ldd	r11, Y+9	; 0x09
    19f0:	c8 84       	ldd	r12, Y+8	; 0x08
    19f2:	df 80       	ldd	r13, Y+7	; 0x07
    19f4:	ee 80       	ldd	r14, Y+6	; 0x06
    19f6:	fd 80       	ldd	r15, Y+5	; 0x05
    19f8:	0c 81       	ldd	r16, Y+4	; 0x04
    19fa:	1b 81       	ldd	r17, Y+3	; 0x03
    19fc:	aa 81       	ldd	r26, Y+2	; 0x02
    19fe:	b9 81       	ldd	r27, Y+1	; 0x01
    1a00:	ce 0f       	add	r28, r30
    1a02:	d1 1d       	adc	r29, r1
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	ed 01       	movw	r28, r26
    1a10:	08 95       	ret

00001a12 <__clzsi2>:
    1a12:	06 d0       	rcall	.+12     	; 0x1a20 <__clzhi2>
    1a14:	84 ff       	sbrs	r24, 4
    1a16:	08 95       	ret
    1a18:	cb 01       	movw	r24, r22
    1a1a:	02 d0       	rcall	.+4      	; 0x1a20 <__clzhi2>
    1a1c:	80 5f       	subi	r24, 0xF0	; 240
    1a1e:	08 95       	ret

00001a20 <__clzhi2>:
    1a20:	aa 27       	eor	r26, r26
    1a22:	99 23       	and	r25, r25
    1a24:	29 f4       	brne	.+10     	; 0x1a30 <__clzhi2+0x10>
    1a26:	a8 5f       	subi	r26, 0xF8	; 248
    1a28:	98 2b       	or	r25, r24
    1a2a:	11 f4       	brne	.+4      	; 0x1a30 <__clzhi2+0x10>
    1a2c:	80 e1       	ldi	r24, 0x10	; 16
    1a2e:	08 95       	ret
    1a30:	90 31       	cpi	r25, 0x10	; 16
    1a32:	18 f4       	brcc	.+6      	; 0x1a3a <__clzhi2+0x1a>
    1a34:	ad 5f       	subi	r26, 0xFD	; 253
    1a36:	92 95       	swap	r25
    1a38:	a3 95       	inc	r26
    1a3a:	99 0f       	add	r25, r25
    1a3c:	e8 f7       	brcc	.-6      	; 0x1a38 <__clzhi2+0x18>
    1a3e:	8a 2f       	mov	r24, r26
    1a40:	99 27       	eor	r25, r25
    1a42:	08 95       	ret

00001a44 <__eerd_byte_m8>:
    1a44:	e1 99       	sbic	0x1c, 1	; 28
    1a46:	fe cf       	rjmp	.-4      	; 0x1a44 <__eerd_byte_m8>
    1a48:	9f bb       	out	0x1f, r25	; 31
    1a4a:	8e bb       	out	0x1e, r24	; 30
    1a4c:	e0 9a       	sbi	0x1c, 0	; 28
    1a4e:	99 27       	eor	r25, r25
    1a50:	8d b3       	in	r24, 0x1d	; 29
    1a52:	08 95       	ret

00001a54 <__eewr_byte_m8>:
    1a54:	26 2f       	mov	r18, r22

00001a56 <__eewr_r18_m8>:
    1a56:	e1 99       	sbic	0x1c, 1	; 28
    1a58:	fe cf       	rjmp	.-4      	; 0x1a56 <__eewr_r18_m8>
    1a5a:	9f bb       	out	0x1f, r25	; 31
    1a5c:	8e bb       	out	0x1e, r24	; 30
    1a5e:	2d bb       	out	0x1d, r18	; 29
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	e2 9a       	sbi	0x1c, 2	; 28
    1a66:	e1 9a       	sbi	0x1c, 1	; 28
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	01 96       	adiw	r24, 0x01	; 1
    1a6c:	08 95       	ret

00001a6e <_exit>:
    1a6e:	f8 94       	cli

00001a70 <__stop_program>:
    1a70:	ff cf       	rjmp	.-2      	; 0x1a70 <__stop_program>
