
bin/Debug/point-to-point.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000906  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000906  000009ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000108  00800074  00800074  000009ce  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  000009ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000031a4  00000000  00000000  000009d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00002bcd  00000000  00000000  00003b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00006745  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	b3 c0       	rjmp	.+358    	; 0x16a <__vector_1>
   4:	d8 c0       	rjmp	.+432    	; 0x1b6 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	6c c0       	rjmp	.+216    	; 0xf0 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e0       	ldi	r30, 0x06	; 6
  3a:	f9 e0       	ldi	r31, 0x09	; 9
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 37       	cpi	r26, 0x7C	; 124
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	27 d1       	rcall	.+590    	; 0x2a8 <main>
  5a:	53 c4       	rjmp	.+2214   	; 0x902 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <led_flash>:



/* отладочная функция (тупо мигает светодиодами) */

void led_flash(register uint8_t i, uint8_t type) {
  5e:	0f 93       	push	r16
  60:	1f 93       	push	r17
	uint8_t led = LED_PIN, flash1, flash2;
  62:	00 b3       	in	r16, 0x10	; 16
	switch (type) {
  64:	61 30       	cpi	r22, 0x01	; 1
  66:	39 f0       	breq	.+14     	; 0x76 <led_flash+0x18>
  68:	61 30       	cpi	r22, 0x01	; 1
  6a:	70 f0       	brcs	.+28     	; 0x88 <led_flash+0x2a>
  6c:	62 30       	cpi	r22, 0x02	; 2
  6e:	49 f0       	breq	.+18     	; 0x82 <led_flash+0x24>
  70:	63 30       	cpi	r22, 0x03	; 3
  72:	61 f4       	brne	.+24     	; 0x8c <led_flash+0x2e>
  74:	03 c0       	rjmp	.+6      	; 0x7c <led_flash+0x1e>
		case 0 : flash1=0;
				 flash2=0;
				 break;
		case 1 : flash1=RED_LED;
				 flash2=GREEN_LED;
  76:	a0 e4       	ldi	r26, 0x40	; 64
	uint8_t led = LED_PIN, flash1, flash2;
	switch (type) {
		case 0 : flash1=0;
				 flash2=0;
				 break;
		case 1 : flash1=RED_LED;
  78:	70 e2       	ldi	r23, 0x20	; 32
				 flash2=GREEN_LED;
				 break;
  7a:	08 c0       	rjmp	.+16     	; 0x8c <led_flash+0x2e>
		case 3 : flash1=RED_LED;
				 flash2=0;
  7c:	a0 e0       	ldi	r26, 0x00	; 0
				 flash2=0;
				 break;
		case 1 : flash1=RED_LED;
				 flash2=GREEN_LED;
				 break;
		case 3 : flash1=RED_LED;
  7e:	70 e2       	ldi	r23, 0x20	; 32
				 flash2=0;
				 break;
  80:	05 c0       	rjmp	.+10     	; 0x8c <led_flash+0x2e>
		case 2 : flash1=GREEN_LED;
				 flash2=0;
  82:	a0 e0       	ldi	r26, 0x00	; 0
				 flash2=GREEN_LED;
				 break;
		case 3 : flash1=RED_LED;
				 flash2=0;
				 break;
		case 2 : flash1=GREEN_LED;
  84:	70 e4       	ldi	r23, 0x40	; 64
				 flash2=0;
				 break;
  86:	02 c0       	rjmp	.+4      	; 0x8c <led_flash+0x2e>

void led_flash(register uint8_t i, uint8_t type) {
	uint8_t led = LED_PIN, flash1, flash2;
	switch (type) {
		case 0 : flash1=0;
				 flash2=0;
  88:	a0 e0       	ldi	r26, 0x00	; 0
/* отладочная функция (тупо мигает светодиодами) */

void led_flash(register uint8_t i, uint8_t type) {
	uint8_t led = LED_PIN, flash1, flash2;
	switch (type) {
		case 0 : flash1=0;
  8a:	70 e0       	ldi	r23, 0x00	; 0
				 break;
		case 2 : flash1=GREEN_LED;
				 flash2=0;
				 break;
		}
	++i;
  8c:	68 2f       	mov	r22, r24
  8e:	6f 5f       	subi	r22, 0xFF	; 255
	while(--i) {
		LED_PORT |= flash1;
		LED_PORT &= ~flash2;
  90:	1a 2f       	mov	r17, r26
  92:	10 95       	com	r17
  94:	40 ed       	ldi	r20, 0xD0	; 208
  96:	57 e0       	ldi	r21, 0x07	; 7
  98:	28 ec       	ldi	r18, 0xC8	; 200
  9a:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(200);
		LED_PORT |= flash2;
		LED_PORT &= ~flash1;
  9c:	b7 2f       	mov	r27, r23
  9e:	b0 95       	com	r27
		case 2 : flash1=GREEN_LED;
				 flash2=0;
				 break;
		}
	++i;
	while(--i) {
  a0:	18 c0       	rjmp	.+48     	; 0xd2 <led_flash+0x74>
		LED_PORT |= flash1;
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	87 2b       	or	r24, r23
  a6:	82 bb       	out	0x12, r24	; 18
		LED_PORT &= ~flash2;
  a8:	82 b3       	in	r24, 0x12	; 18
  aa:	81 23       	and	r24, r17
  ac:	82 bb       	out	0x12, r24	; 18
  ae:	ca 01       	movw	r24, r20
  b0:	f9 01       	movw	r30, r18
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <led_flash+0x54>
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	d9 f7       	brne	.-10     	; 0xb0 <led_flash+0x52>
		_delay_ms(200);
		LED_PORT |= flash2;
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	8a 2b       	or	r24, r26
  be:	82 bb       	out	0x12, r24	; 18
		LED_PORT &= ~flash1;
  c0:	82 b3       	in	r24, 0x12	; 18
  c2:	8b 23       	and	r24, r27
  c4:	82 bb       	out	0x12, r24	; 18
  c6:	ca 01       	movw	r24, r20
  c8:	f9 01       	movw	r30, r18
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <led_flash+0x6c>
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	d9 f7       	brne	.-10     	; 0xc8 <led_flash+0x6a>
		case 2 : flash1=GREEN_LED;
				 flash2=0;
				 break;
		}
	++i;
	while(--i) {
  d2:	61 50       	subi	r22, 0x01	; 1
  d4:	31 f7       	brne	.-52     	; 0xa2 <led_flash+0x44>
		_delay_ms(200);
		LED_PORT |= flash2;
		LED_PORT &= ~flash1;
		_delay_ms(200);
		}
	LED_PORT = led;
  d6:	02 bb       	out	0x12, r16	; 18
  d8:	80 ea       	ldi	r24, 0xA0	; 160
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	28 ec       	ldi	r18, 0xC8	; 200
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	f9 01       	movw	r30, r18
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <led_flash+0x84>
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	d9 f7       	brne	.-10     	; 0xe0 <led_flash+0x82>
	_delay_ms(400);
	}
  ea:	1f 91       	pop	r17
  ec:	0f 91       	pop	r16
  ee:	08 95       	ret

000000f0 <__vector_11>:



/*   обработчики прерываний   */

ISR (USART_RXC_vect) {                              // если модем разбудил пакет, пришедший по RS485
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31

	cli();                                          // выключает прерывания
 112:	f8 94       	cli

	rs485_receive_packet();                         // принимает пакет по RS485
 114:	6f d3       	rcall	.+1758   	; 0x7f4 <rs485_receive_packet>

    if (packet_condition == 0xff) {
 116:	80 91 75 00 	lds	r24, 0x0075
 11a:	8f 3f       	cpi	r24, 0xFF	; 255
 11c:	a1 f4       	brne	.+40     	; 0x146 <__vector_11+0x56>
        if (npack == 256) {
 11e:	80 91 76 00 	lds	r24, 0x0076
 122:	90 91 77 00 	lds	r25, 0x0077
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	80 30       	cpi	r24, 0x00	; 0
 12a:	92 07       	cpc	r25, r18
 12c:	29 f4       	brne	.+10     	; 0x138 <__vector_11+0x48>
            rfm_22_write(0x3b,0x02);
 12e:	8b e3       	ldi	r24, 0x3B	; 59
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	4e d1       	rcall	.+668    	; 0x3d0 <rfm_22_write>
            rfm_22_transmit_packet_256();
 134:	93 d2       	rcall	.+1318   	; 0x65c <rfm_22_transmit_packet_256>
 136:	04 c0       	rjmp	.+8      	; 0x140 <__vector_11+0x50>
            }
        else {
            rfm_22_write(0x3b,0x01);
 138:	8b e3       	ldi	r24, 0x3B	; 59
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	49 d1       	rcall	.+658    	; 0x3d0 <rfm_22_write>
            rfm_22_transmit_packet();
 13e:	54 d2       	rcall	.+1192   	; 0x5e8 <rfm_22_transmit_packet>
            }
    packet_condition = 0x10;        // обнуляет состояние пакета для исключения еще одной пересылки
 140:	80 e1       	ldi	r24, 0x10	; 16
 142:	80 93 75 00 	sts	0x0075, r24
    }

    register uint8_t rubbish = UDR;
 146:	8c b1       	in	r24, 0x0c	; 12

	return;
	}
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_1>:




ISR (INT0_vect) {									// если RFM принял пакет
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31

	cli();                                          // выключает прерывания
 18c:	f8 94       	cli

    packet_handler();                               // запуск обработчика пакета
 18e:	95 d0       	rcall	.+298    	; 0x2ba <packet_handler>

    GIFR = 0xc0; 						            // обнуляет прерывания
 190:	80 ec       	ldi	r24, 0xC0	; 192
 192:	8a bf       	out	0x3a, r24	; 58

    return;
	}
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <__vector_2>:




ISR (INT1_vect) {									// если была нажата кнопка reset
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31

	cli();
 1d8:	f8 94       	cli

    led_flash(2,1);
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	3f df       	rcall	.-386    	; 0x5e <led_flash>

    GIFR = 0xc0; 						            // обнуляет прерывания
 1e0:	80 ec       	ldi	r24, 0xC0	; 192
 1e2:	8a bf       	out	0x3a, r24	; 58

    return;
	}
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	bf 91       	pop	r27
 1ea:	af 91       	pop	r26
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	7f 91       	pop	r23
 1f2:	6f 91       	pop	r22
 1f4:	5f 91       	pop	r21
 1f6:	4f 91       	pop	r20
 1f8:	3f 91       	pop	r19
 1fa:	2f 91       	pop	r18
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <init>:



/*  инициализация модема  */

void init (void) {
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	84 ef       	ldi	r24, 0xF4	; 244
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	28 ec       	ldi	r18, 0xC8	; 200
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	f9 01       	movw	r30, r18
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <init+0x10>
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	d9 f7       	brne	.-10     	; 0x214 <init+0xe>

	uint8_t temp;

    _delay_ms(50);

	LED_DDR |= GREEN_LED + RED_LED;				// инициалиация светодиодов
 21e:	81 b3       	in	r24, 0x11	; 17
 220:	80 66       	ori	r24, 0x60	; 96
 222:	81 bb       	out	0x11, r24	; 17

	device_address = eeprom_read_byte(&device_address_eep);	    // считывет адрес устроства
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	64 d3       	rcall	.+1736   	; 0x8f2 <__eerd_byte_m8>
 22a:	80 93 74 00 	sts	0x0074, r24

    connect_address = eeprom_read_byte(&connect_address_eep);   // считывает адрес устройства на радиоканале
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	5f d3       	rcall	.+1726   	; 0x8f2 <__eerd_byte_m8>
 234:	80 93 78 01 	sts	0x0178, r24
    if (connect_address == 0)   LED_PORT |= RED_LED;
 238:	80 91 78 01 	lds	r24, 0x0178
 23c:	88 23       	and	r24, r24
 23e:	09 f4       	brne	.+2      	; 0x242 <init+0x3c>
 240:	95 9a       	sbi	0x12, 5	; 18


	temp = rfm_22_init();						// инициализация RFM
 242:	df d0       	rcall	.+446    	; 0x402 <rfm_22_init>

	if(temp == 1) {
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	a1 f4       	brne	.+40     	; 0x270 <init+0x6a>
 248:	15 e0       	ldi	r17, 0x05	; 5
 24a:	c0 ea       	ldi	r28, 0xA0	; 160
 24c:	df e0       	ldi	r29, 0x0F	; 15

		for (i=0 ; i<5 ; ++i) {
		RFM_22_SDN_PORT |= RFM_22_SDN_EN;		// если RFM не отвечает, выключает, пробует инициализировать еще 5 раз
 24e:	aa 9a       	sbi	0x15, 2	; 21
 250:	ce 01       	movw	r24, r28
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <init+0x4c>
		_delay_ms(2);
		temp = rfm_22_init();
 256:	d5 d0       	rcall	.+426    	; 0x402 <rfm_22_init>
		if (temp == 0) break;
 258:	88 23       	and	r24, r24
 25a:	51 f0       	breq	.+20     	; 0x270 <init+0x6a>
 25c:	11 50       	subi	r17, 0x01	; 1

	temp = rfm_22_init();						// инициализация RFM

	if(temp == 1) {

		for (i=0 ; i<5 ; ++i) {
 25e:	b9 f7       	brne	.-18     	; 0x24e <init+0x48>
		_delay_ms(2);
		temp = rfm_22_init();
		if (temp == 0) break;
		}

		if (temp == 1) {						// если все равно не отвечает - выключает RFM
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	31 f4       	brne	.+12     	; 0x270 <init+0x6a>
			RFM_22_SDN_PORT |= RFM_22_SDN_EN;
 264:	aa 9a       	sbi	0x15, 2	; 21
			device_address = 0;
 266:	10 92 74 00 	sts	0x0074, r1

			led_flash(2,3);
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	63 e0       	ldi	r22, 0x03	; 3
 26e:	f7 de       	rcall	.-530    	; 0x5e <led_flash>
			}
		}


	if ( device_address == 0 ) {
 270:	80 91 74 00 	lds	r24, 0x0074
 274:	88 23       	and	r24, r24
 276:	11 f4       	brne	.+4      	; 0x27c <init+0x76>
		LED_PORT |= RED_LED;			// если адрес устройства отсутствует, или RFM не была инициализирована включает красный светодиод
 278:	95 9a       	sbi	0x12, 5	; 18
 27a:	12 c0       	rjmp	.+36     	; 0x2a0 <init+0x9a>
		}
	else {

		LED_PORT |= GREEN_LED; 			// если RFM инициализирован успешно и адрес устройтва успешно считан - включает зеленый светодиод
 27c:	96 9a       	sbi	0x12, 6	; 18
//		BUTTON_PORT |= BUTTON_EN;		// вкл подтягивающий резистор на кнопке, не включаем, тк с внутренней подтяжкой работа нестабильна

		TCCR1B = INIT_TCCR1B;           // инициализация таймера для формирования задержек
 27e:	85 e0       	ldi	r24, 0x05	; 5
 280:	8e bd       	out	0x2e, r24	; 46

		MCUCR = INIT_MCUCR;				// конфигурирует внешние прерывания
 282:	83 e8       	ldi	r24, 0x83	; 131
 284:	85 bf       	out	0x35, r24	; 53
		GICR = INIT_GICR;
 286:	80 ec       	ldi	r24, 0xC0	; 192
 288:	8b bf       	out	0x3b, r24	; 59

        rs485_init();
 28a:	a7 d2       	rcall	.+1358   	; 0x7da <rs485_init>

		rfm_22_write(0x07,0x05);		// вкл приемник
 28c:	87 e0       	ldi	r24, 0x07	; 7
 28e:	65 e0       	ldi	r22, 0x05	; 5
 290:	9f d0       	rcall	.+318    	; 0x3d0 <rfm_22_write>
 292:	88 e5       	ldi	r24, 0x58	; 88
 294:	92 e0       	ldi	r25, 0x02	; 2
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <init+0x90>
		_delay_us(300);

        DDRD &= ~0x0c;
 29a:	81 b3       	in	r24, 0x11	; 17
 29c:	83 7f       	andi	r24, 0xF3	; 243
 29e:	81 bb       	out	0x11, r24	; 17

		}
	}
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	08 95       	ret

000002a8 <main>:


/* Основная функция, инициализирует модем, переключает RFM в режим приемника, включает прерывания, и уводит МК в спящий режим.
    Пакет приходит, и будит МК прерыванием, когда пакет будет обработан, проц опять заснет до следущего пакета. */

int main (void) {
 2a8:	1f 93       	push	r17

    uint8_t eee;

	init();									// инициализирует модем
 2aa:	ad df       	rcall	.-166    	; 0x206 <init>

	while(1) {

        rfm_22_clear();

		GIFR = 0xc0; 						// обнуляет прерывания
 2ac:	10 ec       	ldi	r17, 0xC0	; 192
	init();									// инициализирует модем


	while(1) {

        rfm_22_clear();
 2ae:	59 d1       	rcall	.+690    	; 0x562 <rfm_22_clear>

		GIFR = 0xc0; 						// обнуляет прерывания
 2b0:	1a bf       	out	0x3a, r17	; 58
        eee = UDR;
 2b2:	8c b1       	in	r24, 0x0c	; 12

		sei();								// включает прерывания
 2b4:	78 94       	sei

		sleep_cpu();		        		// уводит контроллер в спячку
 2b6:	88 95       	sleep
 2b8:	fa cf       	rjmp	.-12     	; 0x2ae <main+0x6>

000002ba <packet_handler>:

/* Обработчик пакетов */

void packet_handler(void) {

	rfm_22_read_burst(0x47, header , 3);				// считывает заголовок
 2ba:	87 e4       	ldi	r24, 0x47	; 71
 2bc:	69 e7       	ldi	r22, 0x79	; 121
 2be:	71 e0       	ldi	r23, 0x01	; 1
 2c0:	43 e0       	ldi	r20, 0x03	; 3
 2c2:	58 d0       	rcall	.+176    	; 0x374 <rfm_22_read_burst>

    switch (header[1]) {
 2c4:	80 91 7a 01 	lds	r24, 0x017A
 2c8:	83 30       	cpi	r24, 0x03	; 3
 2ca:	11 f1       	breq	.+68     	; 0x310 <packet_handler+0x56>
 2cc:	84 30       	cpi	r24, 0x04	; 4
 2ce:	30 f4       	brcc	.+12     	; 0x2dc <packet_handler+0x22>
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	51 f0       	breq	.+20     	; 0x2e8 <packet_handler+0x2e>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	09 f0       	breq	.+2      	; 0x2da <packet_handler+0x20>
 2d8:	4c c0       	rjmp	.+152    	; 0x372 <packet_handler+0xb8>
 2da:	10 c0       	rjmp	.+32     	; 0x2fc <packet_handler+0x42>
 2dc:	84 30       	cpi	r24, 0x04	; 4
 2de:	29 f1       	breq	.+74     	; 0x32a <packet_handler+0x70>
 2e0:	86 30       	cpi	r24, 0x06	; 6
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <packet_handler+0x2c>
 2e4:	46 c0       	rjmp	.+140    	; 0x372 <packet_handler+0xb8>
 2e6:	2e c0       	rjmp	.+92     	; 0x344 <packet_handler+0x8a>

        case 0x01 : rfm_22_receive_packet();
 2e8:	e7 d1       	rcall	.+974    	; 0x6b8 <rfm_22_receive_packet>
                    if (packet_condition == 0xff)      // если пакет успешно принят и находится в буфере
 2ea:	80 91 75 00 	lds	r24, 0x0075
 2ee:	8f 3f       	cpi	r24, 0xFF	; 255
 2f0:	11 f4       	brne	.+4      	; 0x2f6 <packet_handler+0x3c>
                        rs485_transmit_packet();       // передает пакет по RS485
 2f2:	dd d2       	rcall	.+1466   	; 0x8ae <rs485_transmit_packet>
 2f4:	08 95       	ret
                    else
                        rfm_22_transmit_command(0x06); // иначе просит переслать его снова
 2f6:	86 e0       	ldi	r24, 0x06	; 6
 2f8:	67 d1       	rcall	.+718    	; 0x5c8 <rfm_22_transmit_command>
 2fa:	08 95       	ret
                    break;

        case 0x02 : rfm_22_receive_packet_256();
 2fc:	24 d2       	rcall	.+1096   	; 0x746 <rfm_22_receive_packet_256>
                    if (packet_condition == 0xff)
 2fe:	80 91 75 00 	lds	r24, 0x0075
 302:	8f 3f       	cpi	r24, 0xFF	; 255
 304:	11 f4       	brne	.+4      	; 0x30a <packet_handler+0x50>
                        rs485_transmit_packet();
 306:	d3 d2       	rcall	.+1446   	; 0x8ae <rs485_transmit_packet>
 308:	08 95       	ret
                    else
                        rfm_22_transmit_command(0x06);
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	5d d1       	rcall	.+698    	; 0x5c8 <rfm_22_transmit_command>
 30e:	08 95       	ret
                    break;

        case 0x03 : if (packet_condition == 0x01) {
 310:	80 91 75 00 	lds	r24, 0x0075
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	31 f4       	brne	.+12     	; 0x324 <packet_handler+0x6a>
                        rfm_22_receive_packet();
 318:	cf d1       	rcall	.+926    	; 0x6b8 <rfm_22_receive_packet>
                        if (packet_condition == 0xff)   // если пакет успешно принят и находится в буфере
 31a:	80 91 75 00 	lds	r24, 0x0075
 31e:	8f 3f       	cpi	r24, 0xFF	; 255
 320:	09 f4       	brne	.+2      	; 0x324 <packet_handler+0x6a>
                            rs485_transmit_packet();    // передает пакет по RS485
 322:	c5 d2       	rcall	.+1418   	; 0x8ae <rs485_transmit_packet>
                        }
                    packet_condition = 0x00;
 324:	10 92 75 00 	sts	0x0075, r1
                    break;
 328:	08 95       	ret

        case 0x04 : if (packet_condition == 0x01) {
 32a:	80 91 75 00 	lds	r24, 0x0075
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	31 f4       	brne	.+12     	; 0x33e <packet_handler+0x84>
                        rfm_22_receive_packet_256();
 332:	09 d2       	rcall	.+1042   	; 0x746 <rfm_22_receive_packet_256>
                        if (packet_condition == 0xff)   // если пакет успешно принят и находится в буфере
 334:	80 91 75 00 	lds	r24, 0x0075
 338:	8f 3f       	cpi	r24, 0xFF	; 255
 33a:	09 f4       	brne	.+2      	; 0x33e <packet_handler+0x84>
                            rs485_transmit_packet();    // передает пакет по RS485
 33c:	b8 d2       	rcall	.+1392   	; 0x8ae <rs485_transmit_packet>
                        }
                    packet_condition = 0x00;
 33e:	10 92 75 00 	sts	0x0075, r1
                    break;
 342:	08 95       	ret

        case 0x06 : if (packet_condition == 0x10) {
 344:	80 91 75 00 	lds	r24, 0x0075
 348:	80 31       	cpi	r24, 0x10	; 16
 34a:	99 f4       	brne	.+38     	; 0x372 <packet_handler+0xb8>
                        if (npack == 256) {
 34c:	80 91 76 00 	lds	r24, 0x0076
 350:	90 91 77 00 	lds	r25, 0x0077
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	80 30       	cpi	r24, 0x00	; 0
 358:	92 07       	cpc	r25, r18
 35a:	29 f4       	brne	.+10     	; 0x366 <packet_handler+0xac>
                            rfm_22_write(0x3b,0x04);
 35c:	8b e3       	ldi	r24, 0x3B	; 59
 35e:	64 e0       	ldi	r22, 0x04	; 4
 360:	37 d0       	rcall	.+110    	; 0x3d0 <rfm_22_write>
                            rfm_22_transmit_packet_256();
 362:	7c d1       	rcall	.+760    	; 0x65c <rfm_22_transmit_packet_256>
 364:	04 c0       	rjmp	.+8      	; 0x36e <packet_handler+0xb4>
                            }
                        else {
                            rfm_22_write(0x3b,0x03);
 366:	8b e3       	ldi	r24, 0x3B	; 59
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	32 d0       	rcall	.+100    	; 0x3d0 <rfm_22_write>
                            rfm_22_transmit_packet();
 36c:	3d d1       	rcall	.+634    	; 0x5e8 <rfm_22_transmit_packet>
                            }
                        packet_condition = 0x00;        // обнуляет состояние пакета для исключения еще одной пересылки
 36e:	10 92 75 00 	sts	0x0075, r1
 372:	08 95       	ret

00000374 <rfm_22_read_burst>:

void  rfm_22_read_burst  (uint8_t address, volatile uint8_t *data, uint8_t lenght) {

	register uint8_t i=0;

	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;
 374:	a8 98       	cbi	0x15, 0	; 21

	SPDR = address;		 			// записывает адрес
 376:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR<<7));
 378:	8e b1       	in	r24, 0x0e	; 14
 37a:	88 23       	and	r24, r24
 37c:	e9 f3       	breq	.-6      	; 0x378 <rfm_22_read_burst+0x4>

	for(i=0 ; i<lenght ; ++i) {		// считывает данные
 37e:	44 23       	and	r20, r20
 380:	71 f0       	breq	.+28     	; 0x39e <rfm_22_read_burst+0x2a>
 382:	26 2f       	mov	r18, r22
 384:	e6 2f       	mov	r30, r22
 386:	f7 2f       	mov	r31, r23
		SPDR=0xff;
 388:	9f ef       	ldi	r25, 0xFF	; 255
 38a:	9f b9       	out	0x0f, r25	; 15
		while (!(SPSR<<7));
 38c:	8e b1       	in	r24, 0x0e	; 14
 38e:	88 23       	and	r24, r24
 390:	e9 f3       	breq	.-6      	; 0x38c <rfm_22_read_burst+0x18>
		*(data+i) = SPDR;
 392:	8f b1       	in	r24, 0x0f	; 15
 394:	81 93       	st	Z+, r24
	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;

	SPDR = address;		 			// записывает адрес
	while (!(SPSR<<7));

	for(i=0 ; i<lenght ; ++i) {		// считывает данные
 396:	8e 2f       	mov	r24, r30
 398:	82 1b       	sub	r24, r18
 39a:	84 17       	cp	r24, r20
 39c:	b0 f3       	brcs	.-20     	; 0x38a <rfm_22_read_burst+0x16>
		SPDR=0xff;
		while (!(SPSR<<7));
		*(data+i) = SPDR;
		}

	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
 39e:	a8 9a       	sbi	0x15, 0	; 21
 3a0:	08 95       	ret

000003a2 <rfm_22_write_burst>:

void rfm_22_write_burst (uint8_t address, volatile uint8_t *data, uint8_t lenght) {

	register uint8_t i=0;

	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;
 3a2:	a8 98       	cbi	0x15, 0	; 21

	SPDR = address | (1 << 7);		 // записывает адрес
 3a4:	80 68       	ori	r24, 0x80	; 128
 3a6:	8f b9       	out	0x0f, r24	; 15

	while(!(SPSR<<7));
 3a8:	8e b1       	in	r24, 0x0e	; 14
 3aa:	88 23       	and	r24, r24
 3ac:	e9 f3       	breq	.-6      	; 0x3a8 <rfm_22_write_burst+0x6>

	for(i=0 ; i<lenght ; ++i) {		// записывает данные
 3ae:	44 23       	and	r20, r20
 3b0:	69 f0       	breq	.+26     	; 0x3cc <rfm_22_write_burst+0x2a>
 3b2:	96 2f       	mov	r25, r22
 3b4:	e6 2f       	mov	r30, r22
 3b6:	f7 2f       	mov	r31, r23
		SPDR = *(data+i);
 3b8:	80 81       	ld	r24, Z
 3ba:	8f b9       	out	0x0f, r24	; 15
		while (!(SPSR<<7));
 3bc:	8e b1       	in	r24, 0x0e	; 14
 3be:	88 23       	and	r24, r24
 3c0:	e9 f3       	breq	.-6      	; 0x3bc <rfm_22_write_burst+0x1a>
 3c2:	31 96       	adiw	r30, 0x01	; 1

	SPDR = address | (1 << 7);		 // записывает адрес

	while(!(SPSR<<7));

	for(i=0 ; i<lenght ; ++i) {		// записывает данные
 3c4:	8e 2f       	mov	r24, r30
 3c6:	89 1b       	sub	r24, r25
 3c8:	84 17       	cp	r24, r20
 3ca:	b0 f3       	brcs	.-20     	; 0x3b8 <rfm_22_write_burst+0x16>
		SPDR = *(data+i);
		while (!(SPSR<<7));
		}

	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
 3cc:	a8 9a       	sbi	0x15, 0	; 21
 3ce:	08 95       	ret

000003d0 <rfm_22_write>:

/* Записывает по SPI data по адресу address */

void rfm_22_write (unsigned char address,unsigned char data) {

	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;
 3d0:	a8 98       	cbi	0x15, 0	; 21

	SPDR = address | (1<<7);		 // записывает адрес
 3d2:	80 68       	ori	r24, 0x80	; 128
 3d4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR<<7));
 3d6:	8e b1       	in	r24, 0x0e	; 14
 3d8:	88 23       	and	r24, r24
 3da:	e9 f3       	breq	.-6      	; 0x3d6 <rfm_22_write+0x6>

	SPDR = data;         			// записывает данные
 3dc:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR<<7));
 3de:	8e b1       	in	r24, 0x0e	; 14
 3e0:	88 23       	and	r24, r24
 3e2:	e9 f3       	breq	.-6      	; 0x3de <rfm_22_write+0xe>

	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
 3e4:	a8 9a       	sbi	0x15, 0	; 21
 3e6:	08 95       	ret

000003e8 <rfm_22_read>:

uint8_t rfm_22_read(unsigned char address) {

	unsigned char data;

	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;
 3e8:	a8 98       	cbi	0x15, 0	; 21

	SPDR = address;		 		// записывает адрес
 3ea:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR<<7));
 3ec:	8e b1       	in	r24, 0x0e	; 14
 3ee:	88 23       	and	r24, r24
 3f0:	e9 f3       	breq	.-6      	; 0x3ec <rfm_22_read+0x4>

	SPDR = 0xff;         		// записывает пустые данные
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	8f b9       	out	0x0f, r24	; 15

	while (!(SPSR<<7));
 3f6:	8e b1       	in	r24, 0x0e	; 14
 3f8:	88 23       	and	r24, r24
 3fa:	e9 f3       	breq	.-6      	; 0x3f6 <rfm_22_read+0xe>

	data = SPDR;
 3fc:	8f b1       	in	r24, 0x0f	; 15

	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
 3fe:	a8 9a       	sbi	0x15, 0	; 21

	return data;
	}
 400:	08 95       	ret

00000402 <rfm_22_init>:



/* Записывает все необходимые конфигурационные регистры в RFM, проверяет связь с RFM. Если RFM не отвечает - возвращает 1, иначе - 0 */

uint8_t rfm_22_init(void) {
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	67 97       	sbiw	r28, 0x17	; 23
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	f8 94       	cli
 410:	de bf       	out	0x3e, r29	; 62
 412:	0f be       	out	0x3f, r0	; 63
 414:	cd bf       	out	0x3d, r28	; 61

uint8_t		init_table_io[3] = {0x53, 0x5c, 0x56},
 416:	83 e5       	ldi	r24, 0x53	; 83
 418:	89 83       	std	Y+1, r24	; 0x01
 41a:	8c e5       	ldi	r24, 0x5C	; 92
 41c:	8a 83       	std	Y+2, r24	; 0x02
 41e:	86 e5       	ldi	r24, 0x56	; 86
 420:	8b 83       	std	Y+3, r24	; 0x03
            init_table_freq[6] = {0x5e, 0x01, 0x5d, 0x86, 0x03, 0x7e},
 422:	86 e0       	ldi	r24, 0x06	; 6
 424:	ed e6       	ldi	r30, 0x6D	; 109
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	de 01       	movw	r26, r28
 42a:	14 96       	adiw	r26, 0x04	; 4
 42c:	01 90       	ld	r0, Z+
 42e:	0d 92       	st	X+, r0
 430:	8a 95       	dec	r24
 432:	e1 f7       	brne	.-8      	; 0x42c <rfm_22_init+0x2a>
            init_table_ph[4] = {0x11, 0x46, 0x0a, 0x20},
 434:	81 e1       	ldi	r24, 0x11	; 17
 436:	8a 87       	std	Y+10, r24	; 0x0a
 438:	86 e4       	ldi	r24, 0x46	; 70
 43a:	8b 87       	std	Y+11, r24	; 0x0b
 43c:	8a e0       	ldi	r24, 0x0A	; 10
 43e:	8c 87       	std	Y+12, r24	; 0x0c
 440:	80 e2       	ldi	r24, 0x20	; 32
 442:	8d 87       	std	Y+13, r24	; 0x0d
            init_table_synch[4] = {0x28, 0x15, 0x23, 0x42},
 444:	88 e2       	ldi	r24, 0x28	; 40
 446:	8e 87       	std	Y+14, r24	; 0x0e
 448:	85 e1       	ldi	r24, 0x15	; 21
 44a:	8f 87       	std	Y+15, r24	; 0x0f
 44c:	83 e2       	ldi	r24, 0x23	; 35
 44e:	88 8b       	std	Y+16, r24	; 0x10
 450:	92 e4       	ldi	r25, 0x42	; 66
 452:	99 8b       	std	Y+17, r25	; 0x11
            init_table_mod[3] = {0x0c, 0x23, 0x50},
 454:	9c e0       	ldi	r25, 0x0C	; 12
 456:	9a 8b       	std	Y+18, r25	; 0x12
 458:	8b 8b       	std	Y+19, r24	; 0x13
 45a:	80 e5       	ldi	r24, 0x50	; 80
 45c:	8c 8b       	std	Y+20, r24	; 0x14
            init_table_freqdiv[3] = {0x73, 0x64, 0x00};
 45e:	83 e7       	ldi	r24, 0x73	; 115
 460:	8d 8b       	std	Y+21, r24	; 0x15
 462:	84 e6       	ldi	r24, 0x64	; 100
 464:	8e 8b       	std	Y+22, r24	; 0x16
 466:	1f 8a       	std	Y+23, r1	; 0x17

	uint8_t error;

	RFM_22_SDN_DDR |= RFM_22_SDN_EN;					//включает RFM
 468:	a2 9a       	sbi	0x14, 2	; 20
	RFM_22_SDN_PORT &= ~RFM_22_SDN_EN;
 46a:	aa 98       	cbi	0x15, 2	; 21

	RFM_22_SPI_DDR |= RFM_22_SPI_PIN; 					//инициализация SPI
 46c:	87 b3       	in	r24, 0x17	; 23
 46e:	8c 62       	ori	r24, 0x2C	; 44
 470:	87 bb       	out	0x17, r24	; 23
	RFM_22_SPI_EN_DDR |= RFM_22_SPI_EN_PIN;
 472:	a0 9a       	sbi	0x14, 0	; 20
	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
 474:	a8 9a       	sbi	0x15, 0	; 21
	SPCR = RFM_22_SPCR;
 476:	81 e5       	ldi	r24, 0x51	; 81
 478:	8d b9       	out	0x0d, r24	; 13

	rfm_22_write(0x07,0x00); 							// режим standby
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	87 e0       	ldi	r24, 0x07	; 7
 47e:	a8 df       	rcall	.-176    	; 0x3d0 <rfm_22_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 480:	8f ef       	ldi	r24, 0xFF	; 255
 482:	9f e3       	ldi	r25, 0x3F	; 63
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <__stack+0x25>
 488:	00 c0       	rjmp	.+0      	; 0x48a <__stack+0x2b>

    _delay_ms(100);                                     // ждет пока RFM включится

	rfm_22_write(0x05,0x33);							// включает прерывания
 48a:	63 e3       	ldi	r22, 0x33	; 51
 48c:	85 e0       	ldi	r24, 0x05	; 5
 48e:	a0 df       	rcall	.-192    	; 0x3d0 <rfm_22_write>
	rfm_22_write(0x06,0x00);
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	86 e0       	ldi	r24, 0x06	; 6
 494:	9d df       	rcall	.-198    	; 0x3d0 <rfm_22_write>

	rfm_22_read(0x03);						 			// обнуляет прерывания
 496:	83 e0       	ldi	r24, 0x03	; 3
 498:	a7 df       	rcall	.-178    	; 0x3e8 <rfm_22_read>
	rfm_22_read(0x04);
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	a5 df       	rcall	.-182    	; 0x3e8 <rfm_22_read>

	rfm_22_write(0x09,0x7f);							// емкость 12,5пФ
 49e:	6f e7       	ldi	r22, 0x7F	; 127
 4a0:	89 e0       	ldi	r24, 0x09	; 9
 4a2:	96 df       	rcall	.-212    	; 0x3d0 <rfm_22_write>

	rfm_22_write_burst(0x0b, init_table_io, 3);			// порты вода-вывода
 4a4:	43 e0       	ldi	r20, 0x03	; 3
 4a6:	be 01       	movw	r22, r28
 4a8:	6f 5f       	subi	r22, 0xFF	; 255
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255
 4ac:	8b e0       	ldi	r24, 0x0B	; 11
 4ae:	79 df       	rcall	.-270    	; 0x3a2 <rfm_22_write_burst>

	rfm_22_write(0x6d,0x1f);    						// мощность 13dBm
 4b0:	6f e1       	ldi	r22, 0x1F	; 31
 4b2:	8d e6       	ldi	r24, 0x6D	; 109
 4b4:	8d df       	rcall	.-230    	; 0x3d0 <rfm_22_write>

	rfm_22_write(0x1c,0x95);
 4b6:	65 e9       	ldi	r22, 0x95	; 149
 4b8:	8c e1       	ldi	r24, 0x1C	; 28
 4ba:	8a df       	rcall	.-236    	; 0x3d0 <rfm_22_write>
	rfm_22_write(0x1d,0x40);
 4bc:	60 e4       	ldi	r22, 0x40	; 64
 4be:	8d e1       	ldi	r24, 0x1D	; 29
 4c0:	87 df       	rcall	.-242    	; 0x3d0 <rfm_22_write>

	rfm_22_write_burst(0x20, init_table_freq, 6);		// частоты
 4c2:	46 e0       	ldi	r20, 0x06	; 6
 4c4:	be 01       	movw	r22, r28
 4c6:	6c 5f       	subi	r22, 0xFC	; 252
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ca:	80 e2       	ldi	r24, 0x20	; 32
 4cc:	6a df       	rcall	.-300    	; 0x3a2 <rfm_22_write_burst>

	rfm_22_write(0x27,0x1e);							// порог RSSI
 4ce:	6e e1       	ldi	r22, 0x1E	; 30
 4d0:	87 e2       	ldi	r24, 0x27	; 39
 4d2:	7e df       	rcall	.-260    	; 0x3d0 <rfm_22_write>

	rfm_22_write(0x30, 0x8d);
 4d4:	6d e8       	ldi	r22, 0x8D	; 141
 4d6:	80 e3       	ldi	r24, 0x30	; 48
 4d8:	7b df       	rcall	.-266    	; 0x3d0 <rfm_22_write>

	rfm_22_write_burst(0x32, init_table_ph, 4);			// обработчик пакетов
 4da:	44 e0       	ldi	r20, 0x04	; 4
 4dc:	be 01       	movw	r22, r28
 4de:	66 5f       	subi	r22, 0xF6	; 246
 4e0:	7f 4f       	sbci	r23, 0xFF	; 255
 4e2:	82 e3       	ldi	r24, 0x32	; 50
 4e4:	5e df       	rcall	.-324    	; 0x3a2 <rfm_22_write_burst>

	rfm_22_write_burst(0x36, init_table_synch, 4);		// синхронизация
 4e6:	44 e0       	ldi	r20, 0x04	; 4
 4e8:	be 01       	movw	r22, r28
 4ea:	62 5f       	subi	r22, 0xF2	; 242
 4ec:	7f 4f       	sbci	r23, 0xFF	; 255
 4ee:	86 e3       	ldi	r24, 0x36	; 54
 4f0:	58 df       	rcall	.-336    	; 0x3a2 <rfm_22_write_burst>

	rfm_22_write(0x3a, device_address);					// адрес возврата
 4f2:	60 91 74 00 	lds	r22, 0x0074
 4f6:	8a e3       	ldi	r24, 0x3A	; 58
 4f8:	6b df       	rcall	.-298    	; 0x3d0 <rfm_22_write>
	rfm_22_write(0x3d, connect_address);
 4fa:	60 91 78 01 	lds	r22, 0x0178
 4fe:	8d e3       	ldi	r24, 0x3D	; 61
 500:	67 df       	rcall	.-306    	; 0x3d0 <rfm_22_write>
	rfm_22_write(0x42, device_address);					// адрес устройства
 502:	60 91 74 00 	lds	r22, 0x0074
 506:	82 e4       	ldi	r24, 0x42	; 66
 508:	63 df       	rcall	.-314    	; 0x3d0 <rfm_22_write>
	rfm_22_write(0x46,0xff);							// маска адреса
 50a:	6f ef       	ldi	r22, 0xFF	; 255
 50c:	86 e4       	ldi	r24, 0x46	; 70
 50e:	60 df       	rcall	.-320    	; 0x3d0 <rfm_22_write>



	rfm_22_write(0x6e,0x10);							// скорость передачи
 510:	60 e1       	ldi	r22, 0x10	; 16
 512:	8e e6       	ldi	r24, 0x6E	; 110
 514:	5d df       	rcall	.-326    	; 0x3d0 <rfm_22_write>
	rfm_22_write(0x6f,0x62);
 516:	62 e6       	ldi	r22, 0x62	; 98
 518:	8f e6       	ldi	r24, 0x6F	; 111
 51a:	5a df       	rcall	.-332    	; 0x3d0 <rfm_22_write>

	rfm_22_write_burst(0x70, init_table_mod, 3);		// модуляция
 51c:	43 e0       	ldi	r20, 0x03	; 3
 51e:	be 01       	movw	r22, r28
 520:	6e 5e       	subi	r22, 0xEE	; 238
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	80 e7       	ldi	r24, 0x70	; 112
 526:	3d df       	rcall	.-390    	; 0x3a2 <rfm_22_write_burst>

	rfm_22_write_burst(0x75, init_table_freqdiv, 3);	// конфигурация несущей частоты и девиации
 528:	43 e0       	ldi	r20, 0x03	; 3
 52a:	be 01       	movw	r22, r28
 52c:	6b 5e       	subi	r22, 0xEB	; 235
 52e:	7f 4f       	sbci	r23, 0xFF	; 255
 530:	85 e7       	ldi	r24, 0x75	; 117
 532:	37 df       	rcall	.-402    	; 0x3a2 <rfm_22_write_burst>

    rfm_22_write(0x7d,0x0a);                            // нижний порог fifo передатчика
 534:	6a e0       	ldi	r22, 0x0A	; 10
 536:	8d e7       	ldi	r24, 0x7D	; 125
 538:	4b df       	rcall	.-362    	; 0x3d0 <rfm_22_write>
	rfm_22_write(0x7e,0x00);							// порог заполнения fifo приемника
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	8e e7       	ldi	r24, 0x7E	; 126
 53e:	48 df       	rcall	.-368    	; 0x3d0 <rfm_22_write>

	error=rfm_22_read(0x20);
 540:	80 e2       	ldi	r24, 0x20	; 32
 542:	52 df       	rcall	.-348    	; 0x3e8 <rfm_22_read>

	if (  *init_table_freq != error ) error=1;			// проверка модуля
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	2c 81       	ldd	r18, Y+4	; 0x04
 548:	82 13       	cpse	r24, r18
 54a:	01 c0       	rjmp	.+2      	; 0x54e <__stack+0xef>
 54c:	90 e0       	ldi	r25, 0x00	; 0
	else error=0;

	return error;
	}
 54e:	89 2f       	mov	r24, r25
 550:	67 96       	adiw	r28, 0x17	; 23
 552:	0f b6       	in	r0, 0x3f	; 63
 554:	f8 94       	cli
 556:	de bf       	out	0x3e, r29	; 62
 558:	0f be       	out	0x3f, r0	; 63
 55a:	cd bf       	out	0x3d, r28	; 61
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <rfm_22_clear>:

/* Обнуляет FIFO и прерывания RFM, включая режим приемника */

void rfm_22_clear(void) {

    rfm_22_write(0x07,0x05);            // переключает RFM в режим приемника
 562:	65 e0       	ldi	r22, 0x05	; 5
 564:	87 e0       	ldi	r24, 0x07	; 7
 566:	34 df       	rcall	.-408    	; 0x3d0 <rfm_22_write>

    rfm_22_write(0x7e,0x00);            // Порог заполнения FIFO 0.
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	8e e7       	ldi	r24, 0x7E	; 126
 56c:	31 df       	rcall	.-414    	; 0x3d0 <rfm_22_write>

    rfm_22_write(0x08,0x03);			// стирает fifo RFM
 56e:	63 e0       	ldi	r22, 0x03	; 3
 570:	88 e0       	ldi	r24, 0x08	; 8
 572:	2e df       	rcall	.-420    	; 0x3d0 <rfm_22_write>
    rfm_22_write(0x08,0x00);
 574:	60 e0       	ldi	r22, 0x00	; 0
 576:	88 e0       	ldi	r24, 0x08	; 8
 578:	2b df       	rcall	.-426    	; 0x3d0 <rfm_22_write>

    rfm_22_read(0x03);                  // обнуляет прерывания
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	35 df       	rcall	.-406    	; 0x3e8 <rfm_22_read>
    rfm_22_read(0x04);
 57e:	84 e0       	ldi	r24, 0x04	; 4
 580:	33 df       	rcall	.-410    	; 0x3e8 <rfm_22_read>
 582:	08 95       	ret

00000584 <rfm_22_wait_event>:


/* Функция ожидания определенного события. Ждет пока не сработает определенное прерывание в RFM. В качестве аргумента передается ожидаемый регистр флагов прерываний RFM.
    Если событие не произошло - срабатывает таймаут. Возвращает последний считанный регистр флагов или ноль (если ничего не происходило).   */

uint8_t rfm_22_wait_event (uint8_t event) {
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	d8 2f       	mov	r29, r24

    uint8_t interrupt = 0;

    TCNT1 = 0;
 58c:	1d bc       	out	0x2d, r1	; 45
 58e:	1c bc       	out	0x2c, r1	; 44
/* Функция ожидания определенного события. Ждет пока не сработает определенное прерывание в RFM. В качестве аргумента передается ожидаемый регистр флагов прерываний RFM.
    Если событие не произошло - срабатывает таймаут. Возвращает последний считанный регистр флагов или ноль (если ничего не происходило).   */

uint8_t rfm_22_wait_event (uint8_t event) {

    uint8_t interrupt = 0;
 590:	80 e0       	ldi	r24, 0x00	; 0

    TCNT1 = 0;

    while (((interrupt & event) == 0) & (TCNT1<RFM_22_WAIT_TIME))
 592:	c1 e0       	ldi	r28, 0x01	; 1
 594:	10 e0       	ldi	r17, 0x00	; 0
 596:	04 c0       	rjmp	.+8      	; 0x5a0 <rfm_22_wait_event+0x1c>
        if ((RFM_22_NIRQ_PIN & RFM_22_NIRQ_EN) == 0)
 598:	99 99       	sbic	0x13, 1	; 19
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <rfm_22_wait_event+0x1c>
            interrupt = rfm_22_read(0x03);
 59c:	83 e0       	ldi	r24, 0x03	; 3
 59e:	24 df       	rcall	.-440    	; 0x3e8 <rfm_22_read>

    uint8_t interrupt = 0;

    TCNT1 = 0;

    while (((interrupt & event) == 0) & (TCNT1<RFM_22_WAIT_TIME))
 5a0:	2c b5       	in	r18, 0x2c	; 44
 5a2:	3d b5       	in	r19, 0x2d	; 45
 5a4:	48 2f       	mov	r20, r24
 5a6:	4d 23       	and	r20, r29
 5a8:	9c 2f       	mov	r25, r28
 5aa:	09 f0       	breq	.+2      	; 0x5ae <rfm_22_wait_event+0x2a>
 5ac:	91 2f       	mov	r25, r17
 5ae:	99 23       	and	r25, r25
 5b0:	39 f0       	breq	.+14     	; 0x5c0 <rfm_22_wait_event+0x3c>
 5b2:	9c 2f       	mov	r25, r28
 5b4:	21 15       	cp	r18, r1
 5b6:	34 40       	sbci	r19, 0x04	; 4
 5b8:	08 f0       	brcs	.+2      	; 0x5bc <rfm_22_wait_event+0x38>
 5ba:	91 2f       	mov	r25, r17
 5bc:	91 11       	cpse	r25, r1
 5be:	ec cf       	rjmp	.-40     	; 0x598 <rfm_22_wait_event+0x14>
        if ((RFM_22_NIRQ_PIN & RFM_22_NIRQ_EN) == 0)
            interrupt = rfm_22_read(0x03);

    return interrupt;
    }
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	1f 91       	pop	r17
 5c6:	08 95       	ret

000005c8 <rfm_22_transmit_command>:


/* Функция для передачи команд. Передает пакет состоящий из заголовка и одного байта. Задержка, связанная с ожиданием передачи пакета учтена.
    В качестве аргумента передается команда.    */

void rfm_22_transmit_command(uint8_t command) {
 5c8:	cf 93       	push	r28
 5ca:	c8 2f       	mov	r28, r24

    rfm_22_write(0x3e,0x01);						// костыль из за долбанутых настроек порта RFM
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	8e e3       	ldi	r24, 0x3E	; 62
 5d0:	ff de       	rcall	.-514    	; 0x3d0 <rfm_22_write>
    rfm_22_write(0x7f,0xee);
 5d2:	6e ee       	ldi	r22, 0xEE	; 238
 5d4:	8f e7       	ldi	r24, 0x7F	; 127
 5d6:	fc de       	rcall	.-520    	; 0x3d0 <rfm_22_write>

    rfm_22_write(0x3b,command);
 5d8:	6c 2f       	mov	r22, r28
 5da:	8b e3       	ldi	r24, 0x3B	; 59
 5dc:	f9 de       	rcall	.-526    	; 0x3d0 <rfm_22_write>

	rfm_22_write(0x07,0x09);					    // вкл режим передатчика
 5de:	69 e0       	ldi	r22, 0x09	; 9
 5e0:	87 e0       	ldi	r24, 0x07	; 7
 5e2:	f6 de       	rcall	.-532    	; 0x3d0 <rfm_22_write>

//	delay_timer(20);								// задержка, чтобы при передаче пакета не беспокоить RFM

	return;
	}
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <rfm_22_transmit_packet>:


/* Отправляет пакет длиной от 1 до 255 байт. Пакет считывается из буфера, размер пакета определяется глобальной переменной npack.
    Задержка, связанная с ожиданием передачи пакета учтена. Также подразумевается что первые 64 байта уже есть в fifo. */

void rfm_22_transmit_packet(void) {
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29

    uint8_t nbyte = npack;
 5ec:	60 91 76 00 	lds	r22, 0x0076
 5f0:	70 91 77 00 	lds	r23, 0x0077
 5f4:	d6 2f       	mov	r29, r22

//	rfm_22_write(0x07,0x05);							        // вкл приемник

    rfm_22_write(0x3e,nbyte);						            // размер пакета данных в RFM
 5f6:	8e e3       	ldi	r24, 0x3E	; 62
 5f8:	eb de       	rcall	.-554    	; 0x3d0 <rfm_22_write>
    rfm_22_write(0x07,0x09);						            // вкл режим передатчика
 5fa:	69 e0       	ldi	r22, 0x09	; 9
 5fc:	87 e0       	ldi	r24, 0x07	; 7
 5fe:	e8 de       	rcall	.-560    	; 0x3d0 <rfm_22_write>

    if ( nbyte>64 ) {
 600:	d1 34       	cpi	r29, 0x41	; 65
 602:	38 f1       	brcs	.+78     	; 0x652 <rfm_22_transmit_packet+0x6a>
        nbyte -= 64;                                            // корректирует количество оставшихся байт в пакете
 604:	cd 2f       	mov	r28, r29
 606:	c0 54       	subi	r28, 0x40	; 64

        while (nbyte>32) {
 608:	c1 32       	cpi	r28, 0x21	; 33
 60a:	b0 f0       	brcs	.+44     	; 0x638 <rfm_22_transmit_packet+0x50>

            rfm_22_wait_event(0x20);                            // ждет пока FIFO опустеет
 60c:	80 e2       	ldi	r24, 0x20	; 32
 60e:	ba df       	rcall	.-140    	; 0x584 <rfm_22_wait_event>
            rfm_22_write_burst(0x7f,buffer+npack-nbyte,32);     // шлет очередную порцию данных в FIFO
 610:	60 91 76 00 	lds	r22, 0x0076
 614:	70 91 77 00 	lds	r23, 0x0077
 618:	6c 1b       	sub	r22, r28
 61a:	71 09       	sbc	r23, r1
 61c:	68 58       	subi	r22, 0x88	; 136
 61e:	7f 4f       	sbci	r23, 0xFF	; 255
 620:	40 e2       	ldi	r20, 0x20	; 32
 622:	8f e7       	ldi	r24, 0x7F	; 127
 624:	be de       	rcall	.-644    	; 0x3a2 <rfm_22_write_burst>
            nbyte -= 32;
 626:	c0 52       	subi	r28, 0x20	; 32
    rfm_22_write(0x07,0x09);						            // вкл режим передатчика

    if ( nbyte>64 ) {
        nbyte -= 64;                                            // корректирует количество оставшихся байт в пакете

        while (nbyte>32) {
 628:	c1 32       	cpi	r28, 0x21	; 33
 62a:	80 f7       	brcc	.-32     	; 0x60c <rfm_22_transmit_packet+0x24>


/* Отправляет пакет длиной от 1 до 255 байт. Пакет считывается из буфера, размер пакета определяется глобальной переменной npack.
    Задержка, связанная с ожиданием передачи пакета учтена. Также подразумевается что первые 64 байта уже есть в fifo. */

void rfm_22_transmit_packet(void) {
 62c:	8d 2f       	mov	r24, r29
 62e:	81 56       	subi	r24, 0x61	; 97
 630:	80 7e       	andi	r24, 0xE0	; 224
 632:	cd 2f       	mov	r28, r29
 634:	c0 56       	subi	r28, 0x60	; 96
 636:	c8 1b       	sub	r28, r24
            rfm_22_write_burst(0x7f,buffer+npack-nbyte,32);     // шлет очередную порцию данных в FIFO
            nbyte -= 32;
            }


        rfm_22_wait_event(0x20);                                // ждет пока FIFO опустеет окончательно
 638:	80 e2       	ldi	r24, 0x20	; 32
 63a:	a4 df       	rcall	.-184    	; 0x584 <rfm_22_wait_event>

        rfm_22_write_burst(0x7f,buffer+npack-nbyte,nbyte);      // шлет оставшиеся байты в FIFO
 63c:	60 91 76 00 	lds	r22, 0x0076
 640:	70 91 77 00 	lds	r23, 0x0077
 644:	6c 1b       	sub	r22, r28
 646:	71 09       	sbc	r23, r1
 648:	68 58       	subi	r22, 0x88	; 136
 64a:	7f 4f       	sbci	r23, 0xFF	; 255
 64c:	4c 2f       	mov	r20, r28
 64e:	8f e7       	ldi	r24, 0x7F	; 127
 650:	a8 de       	rcall	.-688    	; 0x3a2 <rfm_22_write_burst>
        }

    rfm_22_wait_event(0x04);                                    // ждет пока пакет дойдет окончательно
 652:	84 e0       	ldi	r24, 0x04	; 4
 654:	97 df       	rcall	.-210    	; 0x584 <rfm_22_wait_event>

	return;
	}
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	08 95       	ret

0000065c <rfm_22_transmit_packet_256>:

/* Специальная функция для передачи пакета в 256 байт. 256й байт пихается в заголовок. */

void rfm_22_transmit_packet_256(void) {

    --npack;
 65c:	80 91 76 00 	lds	r24, 0x0076
 660:	90 91 77 00 	lds	r25, 0x0077
 664:	01 97       	sbiw	r24, 0x01	; 1
 666:	90 93 77 00 	sts	0x0077, r25
 66a:	80 93 76 00 	sts	0x0076, r24
    rfm_22_write(0x3a,buffer[255]);
 66e:	60 91 77 01 	lds	r22, 0x0177
 672:	8a e3       	ldi	r24, 0x3A	; 58
 674:	ad de       	rcall	.-678    	; 0x3d0 <rfm_22_write>

    rfm_22_transmit_packet();                       // передает остальной пакет
 676:	b8 df       	rcall	.-144    	; 0x5e8 <rfm_22_transmit_packet>
 678:	08 95       	ret

0000067a <rfm_22_transmit_small_packet>:


/* Отправляет пакет, предварительно проверяя уровень сигнала. startn - указатель на передаваемые данные, lenght - длина пакета.
	Если вызвать с параметрами 0,0 - передает пустой пакет (команду). Задержка, связанная с ожиданием передачи пакета учтена. */

void rfm_22_transmit_small_packet(uint8_t startn, unsigned char lenght) {
 67a:	cf 93       	push	r28
 67c:	df 93       	push	r29
 67e:	d8 2f       	mov	r29, r24
 680:	c6 2f       	mov	r28, r22
//	rfm_22_write(0x07,0x05);							// вкл приемник

//	rfm_22_write(0x08,0x01);							// стирает fifo
//	rfm_22_write(0x08,0x00);

	if (lenght) {										// если размер пакета не 0
 682:	66 23       	and	r22, r22
 684:	59 f0       	breq	.+22     	; 0x69c <rfm_22_transmit_small_packet+0x22>

		rfm_22_write(0x3e,lenght);						// размер пакета данных
 686:	8e e3       	ldi	r24, 0x3E	; 62
 688:	a3 de       	rcall	.-698    	; 0x3d0 <rfm_22_write>
		rfm_22_write_burst(0x7f,buffer+startn,lenght);	// отправляет пакет в fifo
 68a:	8d 2f       	mov	r24, r29
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	bc 01       	movw	r22, r24
 690:	68 58       	subi	r22, 0x88	; 136
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	4c 2f       	mov	r20, r28
 696:	8f e7       	ldi	r24, 0x7F	; 127
 698:	84 de       	rcall	.-760    	; 0x3a2 <rfm_22_write_burst>
 69a:	08 c0       	rjmp	.+16     	; 0x6ac <rfm_22_transmit_small_packet+0x32>
		}
	else if (startn) {	 								// если размер пакета 0
 69c:	88 23       	and	r24, r24
 69e:	31 f0       	breq	.+12     	; 0x6ac <rfm_22_transmit_small_packet+0x32>

		rfm_22_write(0x3e,0x01);						//костыль из за долбанутых настроек порта RFM
 6a0:	61 e0       	ldi	r22, 0x01	; 1
 6a2:	8e e3       	ldi	r24, 0x3E	; 62
 6a4:	95 de       	rcall	.-726    	; 0x3d0 <rfm_22_write>
		rfm_22_write(0x7f,0xee);
 6a6:	6e ee       	ldi	r22, 0xEE	; 238
 6a8:	8f e7       	ldi	r24, 0x7F	; 127
 6aa:	92 de       	rcall	.-732    	; 0x3d0 <rfm_22_write>

//	_delay_us(220);

//	while(!(RFM_22_GPIO0_PIN & RFM_22_GPIO0_EN));		// проверяет эфир

	rfm_22_write(0x07,0x09);							// вкл режим передатчика
 6ac:	69 e0       	ldi	r22, 0x09	; 9
 6ae:	87 e0       	ldi	r24, 0x07	; 7
 6b0:	8f de       	rcall	.-738    	; 0x3d0 <rfm_22_write>

//	delay_timer(lenght+20);								// задержка, чтобы при передаче пакета не беспокоить RFM

	return;
	}
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	08 95       	ret

000006b8 <rfm_22_receive_packet>:


/* Принимает пакет длиной от 1 до 255 байт. Пакет считывается в буфер, размер пакета записывается в глобальную переменную npack.
    Также проверяет контрольную сумму и корректирует байт состояния пакета. */

void rfm_22_receive_packet(void) {
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29

    uint8_t nbyte, interrupt=0;

    rfm_22_write(0x7e,0x36);
 6bc:	66 e3       	ldi	r22, 0x36	; 54
 6be:	8e e7       	ldi	r24, 0x7E	; 126
 6c0:	87 de       	rcall	.-754    	; 0x3d0 <rfm_22_write>

    rfm_22_read(0x03);                                                      // обнуляет прерывания RFM
 6c2:	83 e0       	ldi	r24, 0x03	; 3
 6c4:	91 de       	rcall	.-734    	; 0x3e8 <rfm_22_read>

    nbyte = rfm_22_read(0x4b);						// считывает длину пакета
 6c6:	8b e4       	ldi	r24, 0x4B	; 75
 6c8:	8f de       	rcall	.-738    	; 0x3e8 <rfm_22_read>
 6ca:	d8 2f       	mov	r29, r24
    npack = nbyte;
 6cc:	28 2f       	mov	r18, r24
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	30 93 77 00 	sts	0x0077, r19
 6d4:	20 93 76 00 	sts	0x0076, r18

    while (nbyte>64) {                                                      // пока количество непринятых байт больше 64
 6d8:	81 34       	cpi	r24, 0x41	; 65
 6da:	b0 f0       	brcs	.+44     	; 0x708 <rfm_22_receive_packet+0x50>

    rfm_22_write(0x7e,0x36);

    rfm_22_read(0x03);                                                      // обнуляет прерывания RFM

    nbyte = rfm_22_read(0x4b);						// считывает длину пакета
 6dc:	c8 2f       	mov	r28, r24
    npack = nbyte;

    while (nbyte>64) {                                                      // пока количество непринятых байт больше 64

        rfm_22_wait_event(0x10);                                            // ждет пока FIFO не заполнится
 6de:	80 e1       	ldi	r24, 0x10	; 16
 6e0:	51 df       	rcall	.-350    	; 0x584 <rfm_22_wait_event>

        rfm_22_read_burst(0x7f, buffer+npack-nbyte, 32);	                // считывает данные
 6e2:	60 91 76 00 	lds	r22, 0x0076
 6e6:	70 91 77 00 	lds	r23, 0x0077
 6ea:	6c 1b       	sub	r22, r28
 6ec:	71 09       	sbc	r23, r1
 6ee:	68 58       	subi	r22, 0x88	; 136
 6f0:	7f 4f       	sbci	r23, 0xFF	; 255
 6f2:	40 e2       	ldi	r20, 0x20	; 32
 6f4:	8f e7       	ldi	r24, 0x7F	; 127
 6f6:	3e de       	rcall	.-900    	; 0x374 <rfm_22_read_burst>
        nbyte -= 32;                                                        // коректирует количество оставшихся байт
 6f8:	c0 52       	subi	r28, 0x20	; 32
    rfm_22_read(0x03);                                                      // обнуляет прерывания RFM

    nbyte = rfm_22_read(0x4b);						// считывает длину пакета
    npack = nbyte;

    while (nbyte>64) {                                                      // пока количество непринятых байт больше 64
 6fa:	c1 34       	cpi	r28, 0x41	; 65
 6fc:	80 f7       	brcc	.-32     	; 0x6de <rfm_22_receive_packet+0x26>


/* Принимает пакет длиной от 1 до 255 байт. Пакет считывается в буфер, размер пакета записывается в глобальную переменную npack.
    Также проверяет контрольную сумму и корректирует байт состояния пакета. */

void rfm_22_receive_packet(void) {
 6fe:	8d 2f       	mov	r24, r29
 700:	81 54       	subi	r24, 0x41	; 65
 702:	80 7e       	andi	r24, 0xE0	; 224
 704:	d0 52       	subi	r29, 0x20	; 32
 706:	d8 1b       	sub	r29, r24

        rfm_22_read_burst(0x7f, buffer+npack-nbyte, 32);	                // считывает данные
        nbyte -= 32;                                                        // коректирует количество оставшихся байт
        }

    interrupt = rfm_22_wait_event(0x02);                                    // ждет пока дойдет весь пакет
 708:	82 e0       	ldi	r24, 0x02	; 2
 70a:	3c df       	rcall	.-392    	; 0x584 <rfm_22_wait_event>
 70c:	c8 2f       	mov	r28, r24

    rfm_22_read_burst(0x7f, buffer+npack-nbyte, nbyte);                    // считывает последние байты
 70e:	60 91 76 00 	lds	r22, 0x0076
 712:	70 91 77 00 	lds	r23, 0x0077
 716:	6d 1b       	sub	r22, r29
 718:	71 09       	sbc	r23, r1
 71a:	68 58       	subi	r22, 0x88	; 136
 71c:	7f 4f       	sbci	r23, 0xFF	; 255
 71e:	4d 2f       	mov	r20, r29
 720:	8f e7       	ldi	r24, 0x7F	; 127
 722:	28 de       	rcall	.-944    	; 0x374 <rfm_22_read_burst>

    if ((interrupt & 0x01) | (interrupt == 0)) packet_condition = 0x01;     // проверяет контрольную сумму
 724:	c0 fd       	sbrc	r28, 0
 726:	05 c0       	rjmp	.+10     	; 0x732 <rfm_22_receive_packet+0x7a>
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	c1 11       	cpse	r28, r1
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	88 23       	and	r24, r24
 730:	21 f0       	breq	.+8      	; 0x73a <rfm_22_receive_packet+0x82>
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	80 93 75 00 	sts	0x0075, r24
 738:	03 c0       	rjmp	.+6      	; 0x740 <rfm_22_receive_packet+0x88>
    else                                       packet_condition = 0xff;
 73a:	8f ef       	ldi	r24, 0xFF	; 255
 73c:	80 93 75 00 	sts	0x0075, r24

	return;
	}
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	08 95       	ret

00000746 <rfm_22_receive_packet_256>:

/* Специальная функция для приема пакета в 256 байт. 256й байт считывается из заголовка. */

void rfm_22_receive_packet_256(void) {

    rfm_22_receive_packet();
 746:	b8 df       	rcall	.-144    	; 0x6b8 <rfm_22_receive_packet>

    buffer[255] = rfm_22_read(0x47);
 748:	87 e4       	ldi	r24, 0x47	; 71
 74a:	4e de       	rcall	.-868    	; 0x3e8 <rfm_22_read>
 74c:	80 93 77 01 	sts	0x0177, r24
    ++npack;
 750:	80 91 76 00 	lds	r24, 0x0076
 754:	90 91 77 00 	lds	r25, 0x0077
 758:	01 96       	adiw	r24, 0x01	; 1
 75a:	90 93 77 00 	sts	0x0077, r25
 75e:	80 93 76 00 	sts	0x0076, r24
 762:	08 95       	ret

00000764 <rfm_22_read_small_packet>:



/* Считывает данные пакета */

uint8_t rfm_22_read_small_packet(uint8_t startn) {
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	d8 2f       	mov	r29, r24

	uint8_t lenght;

		lenght = rfm_22_read(0x4b);							//считывает длину пакета
 76a:	8b e4       	ldi	r24, 0x4B	; 75
 76c:	3d de       	rcall	.-902    	; 0x3e8 <rfm_22_read>
 76e:	c8 2f       	mov	r28, r24

		rfm_22_read_burst(0x7f, buffer+startn, lenght);	    //считывает данные
 770:	6d 2f       	mov	r22, r29
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	68 58       	subi	r22, 0x88	; 136
 776:	7f 4f       	sbci	r23, 0xFF	; 255
 778:	48 2f       	mov	r20, r24
 77a:	8f e7       	ldi	r24, 0x7F	; 127
 77c:	fb dd       	rcall	.-1034   	; 0x374 <rfm_22_read_burst>

		rfm_22_write(0x07,0x05);
 77e:	65 e0       	ldi	r22, 0x05	; 5
 780:	87 e0       	ldi	r24, 0x07	; 7
 782:	26 de       	rcall	.-948    	; 0x3d0 <rfm_22_write>

	rfm_22_write(0x08,0x02);								//стирает fifo
 784:	62 e0       	ldi	r22, 0x02	; 2
 786:	88 e0       	ldi	r24, 0x08	; 8
 788:	23 de       	rcall	.-954    	; 0x3d0 <rfm_22_write>
	rfm_22_write(0x08,0x00);
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	88 e0       	ldi	r24, 0x08	; 8
 78e:	20 de       	rcall	.-960    	; 0x3d0 <rfm_22_write>

	return lenght;
	}
 790:	8c 2f       	mov	r24, r28
 792:	df 91       	pop	r29
 794:	cf 91       	pop	r28
 796:	08 95       	ret

00000798 <rs485_set_baudrate>:



/* Установка скорости RS485 */

void rs485_set_baudrate(uint8_t nbaudrate) {
 798:	df 93       	push	r29
 79a:	cf 93       	push	r28
 79c:	cd b7       	in	r28, 0x3d	; 61
 79e:	de b7       	in	r29, 0x3e	; 62
 7a0:	2d 97       	sbiw	r28, 0x0d	; 13
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	f8 94       	cli
 7a6:	de bf       	out	0x3e, r29	; 62
 7a8:	0f be       	out	0x3f, r0	; 63
 7aa:	cd bf       	out	0x3d, r28	; 61

    uint8_t baudrate_table[13] = {207, 103, 51, 34, 25, 16, 12, 8, 6, 3, 1, 1, 0};
 7ac:	de 01       	movw	r26, r28
 7ae:	11 96       	adiw	r26, 0x01	; 1
 7b0:	e0 e6       	ldi	r30, 0x60	; 96
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	9d e0       	ldi	r25, 0x0D	; 13
 7b6:	01 90       	ld	r0, Z+
 7b8:	0d 92       	st	X+, r0
 7ba:	91 50       	subi	r25, 0x01	; 1
 7bc:	e1 f7       	brne	.-8      	; 0x7b6 <rs485_set_baudrate+0x1e>

    UBRRL = baudrate_table[nbaudrate];
 7be:	fe 01       	movw	r30, r28
 7c0:	e8 0f       	add	r30, r24
 7c2:	f1 1d       	adc	r31, r1
 7c4:	81 81       	ldd	r24, Z+1	; 0x01
 7c6:	89 b9       	out	0x09, r24	; 9
    }
 7c8:	2d 96       	adiw	r28, 0x0d	; 13
 7ca:	0f b6       	in	r0, 0x3f	; 63
 7cc:	f8 94       	cli
 7ce:	de bf       	out	0x3e, r29	; 62
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	cd bf       	out	0x3d, r28	; 61
 7d4:	cf 91       	pop	r28
 7d6:	df 91       	pop	r29
 7d8:	08 95       	ret

000007da <rs485_init>:



void rs485_init(void) {

	UCSRA = RS485_UCSRA;				// конфигурация UART
 7da:	82 e0       	ldi	r24, 0x02	; 2
 7dc:	8b b9       	out	0x0b, r24	; 11
	UCSRB = RS485_UCSRB;
 7de:	88 e9       	ldi	r24, 0x98	; 152
 7e0:	8a b9       	out	0x0a, r24	; 10
	UCSRC = RS485_UCSRC;
 7e2:	86 e8       	ldi	r24, 0x86	; 134
 7e4:	80 bd       	out	0x20, r24	; 32


    UBRRL = 51;
 7e6:	83 e3       	ldi	r24, 0x33	; 51
 7e8:	89 b9       	out	0x09, r24	; 9
//	rs485_set_baudrate(RS485_DEFAULT_BAUDRATE);
	UBRRH = 0;
 7ea:	10 bc       	out	0x20, r1	; 32

	TCCR0 = RS485_TCCR0;
 7ec:	84 e0       	ldi	r24, 0x04	; 4
 7ee:	83 bf       	out	0x33, r24	; 51

	RS485_DDR |= RS485_EN_PIN;
 7f0:	a5 9a       	sbi	0x14, 5	; 20
//	RS485_PORT |= RS485_EN_PIN;			// режим передатчика
	}
 7f2:	08 95       	ret

000007f4 <rs485_receive_packet>:



void rs485_receive_packet(void) {
 7f4:	cf 93       	push	r28
 7f6:	df 93       	push	r29

    packet_condition = 0xff;
 7f8:	8f ef       	ldi	r24, 0xFF	; 255
 7fa:	80 93 75 00 	sts	0x0075, r24
	npack=0;
 7fe:	10 92 77 00 	sts	0x0077, r1
 802:	10 92 76 00 	sts	0x0076, r1

	TCNT0 = 0;
 806:	12 be       	out	0x32, r1	; 50

			if(TCNT0 > SYMBOL_DELAY_TIME)   packet_condition = 0;	// если задержка более 1,5 символов - пакет игнорируется

            if (npack>256)  break;                                 // защита от переполнения буфера

			*(buffer+npack)=UDR;								    // записывает байт в буфер
 808:	c8 e7       	ldi	r28, 0x78	; 120
 80a:	d0 e0       	ldi	r29, 0x00	; 0
    packet_condition = 0xff;
	npack=0;

	TCNT0 = 0;

	while(TCNT0<PACKET_DELAY_TIME) {
 80c:	31 c0       	rjmp	.+98     	; 0x870 <rs485_receive_packet+0x7c>
		if (UCSRA & 0x80) {
 80e:	5f 9b       	sbis	0x0b, 7	; 11
 810:	2f c0       	rjmp	.+94     	; 0x870 <rs485_receive_packet+0x7c>

			if(TCNT0 > SYMBOL_DELAY_TIME)   packet_condition = 0;	// если задержка более 1,5 символов - пакет игнорируется
 812:	82 b7       	in	r24, 0x32	; 50
 814:	87 33       	cpi	r24, 0x37	; 55
 816:	10 f0       	brcs	.+4      	; 0x81c <rs485_receive_packet+0x28>
 818:	10 92 75 00 	sts	0x0075, r1

            if (npack>256)  break;                                 // защита от переполнения буфера
 81c:	80 91 76 00 	lds	r24, 0x0076
 820:	90 91 77 00 	lds	r25, 0x0077
 824:	21 e0       	ldi	r18, 0x01	; 1
 826:	81 30       	cpi	r24, 0x01	; 1
 828:	92 07       	cpc	r25, r18
 82a:	28 f5       	brcc	.+74     	; 0x876 <rs485_receive_packet+0x82>

			*(buffer+npack)=UDR;								    // записывает байт в буфер
 82c:	e0 91 76 00 	lds	r30, 0x0076
 830:	f0 91 77 00 	lds	r31, 0x0077
 834:	8c b1       	in	r24, 0x0c	; 12
 836:	ec 0f       	add	r30, r28
 838:	fd 1f       	adc	r31, r29
 83a:	80 83       	st	Z, r24
			if (npack<64) rfm_22_write(0x7f,*(buffer+npack));	    // записывает приятый байт в RFM
 83c:	80 91 76 00 	lds	r24, 0x0076
 840:	90 91 77 00 	lds	r25, 0x0077
 844:	80 34       	cpi	r24, 0x40	; 64
 846:	91 05       	cpc	r25, r1
 848:	48 f4       	brcc	.+18     	; 0x85c <rs485_receive_packet+0x68>
 84a:	e0 91 76 00 	lds	r30, 0x0076
 84e:	f0 91 77 00 	lds	r31, 0x0077
 852:	ec 0f       	add	r30, r28
 854:	fd 1f       	adc	r31, r29
 856:	60 81       	ld	r22, Z
 858:	8f e7       	ldi	r24, 0x7F	; 127
 85a:	ba dd       	rcall	.-1164   	; 0x3d0 <rfm_22_write>

			++npack;
 85c:	80 91 76 00 	lds	r24, 0x0076
 860:	90 91 77 00 	lds	r25, 0x0077
 864:	01 96       	adiw	r24, 0x01	; 1
 866:	90 93 77 00 	sts	0x0077, r25
 86a:	80 93 76 00 	sts	0x0076, r24

			TCNT0=0;											    // обнуляет таймер - счетчик
 86e:	12 be       	out	0x32, r1	; 50
    packet_condition = 0xff;
	npack=0;

	TCNT0 = 0;

	while(TCNT0<PACKET_DELAY_TIME) {
 870:	82 b7       	in	r24, 0x32	; 50
 872:	8d 37       	cpi	r24, 0x7D	; 125
 874:	60 f2       	brcs	.-104    	; 0x80e <rs485_receive_packet+0x1a>
			TCNT0=0;											    // обнуляет таймер - счетчик

			}
		}

    if ((npack > 256) | (npack == 0)) packet_condition = 0;
 876:	80 91 76 00 	lds	r24, 0x0076
 87a:	90 91 77 00 	lds	r25, 0x0077
 87e:	20 91 76 00 	lds	r18, 0x0076
 882:	30 91 77 00 	lds	r19, 0x0077
 886:	41 e0       	ldi	r20, 0x01	; 1
 888:	51 e0       	ldi	r21, 0x01	; 1
 88a:	81 30       	cpi	r24, 0x01	; 1
 88c:	95 07       	cpc	r25, r21
 88e:	08 f4       	brcc	.+2      	; 0x892 <rs485_receive_packet+0x9e>
 890:	40 e0       	ldi	r20, 0x00	; 0
 892:	44 23       	and	r20, r20
 894:	39 f4       	brne	.+14     	; 0x8a4 <rs485_receive_packet+0xb0>
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	21 15       	cp	r18, r1
 89a:	31 05       	cpc	r19, r1
 89c:	09 f0       	breq	.+2      	; 0x8a0 <rs485_receive_packet+0xac>
 89e:	80 e0       	ldi	r24, 0x00	; 0
 8a0:	88 23       	and	r24, r24
 8a2:	11 f0       	breq	.+4      	; 0x8a8 <rs485_receive_packet+0xb4>
 8a4:	10 92 75 00 	sts	0x0075, r1

    return;
	}
 8a8:	df 91       	pop	r29
 8aa:	cf 91       	pop	r28
 8ac:	08 95       	ret

000008ae <rs485_transmit_packet>:

void rs485_transmit_packet(void) {

	register uint16_t i=0;

	RS485_PORT |= RS485_EN_PIN;                                     // переключает интерфейсную микросхему в режим передачи
 8ae:	ad 9a       	sbi	0x15, 5	; 21

	for (i=0 ; i<npack ; ++i) {
 8b0:	80 91 76 00 	lds	r24, 0x0076
 8b4:	90 91 77 00 	lds	r25, 0x0077
 8b8:	00 97       	sbiw	r24, 0x00	; 0
 8ba:	89 f0       	breq	.+34     	; 0x8de <rs485_transmit_packet+0x30>
 8bc:	80 e0       	ldi	r24, 0x00	; 0
 8be:	90 e0       	ldi	r25, 0x00	; 0

        while( !(UCSRA & 0x20) );
 8c0:	5d 9b       	sbis	0x0b, 5	; 11
 8c2:	fe cf       	rjmp	.-4      	; 0x8c0 <rs485_transmit_packet+0x12>





void rs485_transmit_packet(void) {
 8c4:	fc 01       	movw	r30, r24
 8c6:	e8 58       	subi	r30, 0x88	; 136
 8c8:	ff 4f       	sbci	r31, 0xFF	; 255
	RS485_PORT |= RS485_EN_PIN;                                     // переключает интерфейсную микросхему в режим передачи

	for (i=0 ; i<npack ; ++i) {

        while( !(UCSRA & 0x20) );
        UDR = *(i+buffer);
 8ca:	20 81       	ld	r18, Z
 8cc:	2c b9       	out	0x0c, r18	; 12

	register uint16_t i=0;

	RS485_PORT |= RS485_EN_PIN;                                     // переключает интерфейсную микросхему в режим передачи

	for (i=0 ; i<npack ; ++i) {
 8ce:	01 96       	adiw	r24, 0x01	; 1
 8d0:	20 91 76 00 	lds	r18, 0x0076
 8d4:	30 91 77 00 	lds	r19, 0x0077
 8d8:	82 17       	cp	r24, r18
 8da:	93 07       	cpc	r25, r19
 8dc:	88 f3       	brcs	.-30     	; 0x8c0 <rs485_transmit_packet+0x12>

        while( !(UCSRA & 0x20) );
        UDR = *(i+buffer);
	    }

    UCSRA |= 0x40;
 8de:	5e 9a       	sbi	0x0b, 6	; 11
    while( !(UCSRA & 0x40) );                                       // ожидание передачи последнего байта
 8e0:	5e 9b       	sbis	0x0b, 6	; 11
 8e2:	fe cf       	rjmp	.-4      	; 0x8e0 <rs485_transmit_packet+0x32>

    RS485_PORT &= ~RS485_EN_PIN;                                    // переключает интерфейсную микросхему в режим приема
 8e4:	ad 98       	cbi	0x15, 5	; 21

    i = UDR;                                                        // костыль из за отсутствия подтягивающего резистора на UART
 8e6:	8c b1       	in	r24, 0x0c	; 12
    i = UDR;
 8e8:	8c b1       	in	r24, 0x0c	; 12
    i = UDR;
 8ea:	8c b1       	in	r24, 0x0c	; 12

    packet_condition = 0;                                           // после отправки пакета байт состояния обнуляется
 8ec:	10 92 75 00 	sts	0x0075, r1

	return;
	}
 8f0:	08 95       	ret

000008f2 <__eerd_byte_m8>:
 8f2:	e1 99       	sbic	0x1c, 1	; 28
 8f4:	fe cf       	rjmp	.-4      	; 0x8f2 <__eerd_byte_m8>
 8f6:	9f bb       	out	0x1f, r25	; 31
 8f8:	8e bb       	out	0x1e, r24	; 30
 8fa:	e0 9a       	sbi	0x1c, 0	; 28
 8fc:	99 27       	eor	r25, r25
 8fe:	8d b3       	in	r24, 0x1d	; 29
 900:	08 95       	ret

00000902 <_exit>:
 902:	f8 94       	cli

00000904 <__stop_program>:
 904:	ff cf       	rjmp	.-2      	; 0x904 <__stop_program>
