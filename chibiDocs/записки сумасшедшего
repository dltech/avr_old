Операционные системы можно отнести к трем основным типам:
	- системы не реального времени - "запрограммированная реакция на стимул обязательно осуществится когда нибудь в будущем"
	- системы мягкого реального времени - "Запрограмированная реакция на стимул почти всегда выполняется за известный конечный промежуток времени"
	- системы жесткого реального времени - "Запрограммированная реакция на стимул гарантированно выполняется за известный конечный промежуток времени"
Важно опмнить о том, что, система - всего лишь инструмент и её пведение зависит от того, как её использовать.

В ChibiOS, как и в множестве других RTOS используется алгоритм планировщика "упреждающий с фиксированным приоритетом". Он заключается в следующем:
	- каждый поток имеет свой уровень приоритета, приоритеты фиксированы и не меняются.
	- каждый активный поток может быть в одном из трех состояний:
		- running - выполняется в данный момент
		- ready - готов к выполнению, когда освободится процессор
		- waiting - не готов к выполнению, т.к. ожидает определенного события, в многих ОС существует несколько waiting режимов, но суть одна
	- каждое физическое ядро в системе выполняет процесс с наибольшим уровнем приоритета, который готов у к выполнению
	- когда поток становится готовым к выполнению, но при том выполняется поток с меньшим уровнем приоритета, тогда происходит вытеснение потока, и поток с большим приоритетом начинает выполняться, поток с меньшим приоритетом переходит в состояние ready.
Если в системе N ядер, тогда подразумевается, что в каждый момент времени выполняются N потоков с наивысшим приоритетом.

Обработка прерываний
Прерывания можно разделить на два основных класса:
	- Источники прерываний, связанные с RTOS (например, события, ожидаемые процессами)
	- Источники прерываний, не связанные с RTOS (такие прерывания способны вытеснить ядро)
Хорошая RTOS должна обеспечить механизмы обработки и синхонизации между прерываниями и потоками системы. Обычно в RTOS прерывания и потоки абстрагированы с использованием таких механизмов, как семафоры, флаги событий, очереди (в разных ОС используются разные механизмы).

Зачем нужна RTOS?
RTOS нужна в первую очередь в системах с фиксированным временем реакции на события. Но даже если то не обязательно приложение, реализованое с помощью RTOS более простое и понятное чем сырой код, также ртось может содержать в себе такие плюшки как драйвера, файловые системы, сеть.

Можно выделить следующие важные параметры системы:
Время реакции - ффективная ось дает очень маленькую задержку вдобавок к теориетическому минимальному времени задержки. Задержка состоит из:
	- задержка прерывания - время между срабатыванием прерывания и его обращботкой (задержка появляется из за кода ОС в прерывании, а также из за выполнения критического кода ОС с выключенными прерываниями)
	- время возврата потока - время между аппаратным событием и запуском потока, его обрабатывающего
	- время контектсного переключения - время перекючения от одного потока на другой
Также важно и колебания времени реакции, они должны быть несущественными, а еще ОС должна жрать мало памяти (и SRAM и FLASH), а также быть надежной (не использовать ненадежные решения, такие как динамическое выделение памяти)











Структура Chibios

Проект логически разделен на несколько подсистем:
HAL прослойка с реализацией драйверов под различные устройства,
базовые функции ядра под определенную архитектуру(обслуживание прерываний, переключение контекста и т.д.),
код самого ядра операционной системы.

В приложение ко всему есть несколько надстроек над этим всем делом.
Сама ChibiOS реализована на C и ассемблере но есть также обертки для C++.

Ядро

ChibiOS, как и любая другая уважающая себя RTOS имеет планировщик задач с поддержкой вытеснения и на данный момент имеет два варианта функционирования:
кооперативное распределение времени между задачами с одним приоритетом
Round-Robin планирование задач с одинаковым приоритетом с указанием кванта времени на задачу

В данным момент опции планировщика задаются глобально во время компиляции.
Для переключения контекста, планировщиком ядра используется системный счетчик который также используется для виртуальных таймеров.
Естественно, любое прерывание может привести к переключению контекста если в этом есть необходимость.

В текущей версии ChibiOS(2.x) период системного таймера фиксирован(на этапе сборки). 
В будущей версии(3.0) разработчики планируют перейти к функционированию ядра без периодических прерываний(tickless scheduler).





Стиль программирования (он упоротый немного)
- в целом K&R, но с изменениями
- для табуляции два пробела, но не табом а пробелами
- кодировка UTF8, но разделитель строки виндовый
- вместо #ifdef и ifndef рекомендуется использовать #if defined() и #if !defined()
- case на том же уровне что и switch
- имена указателей начинаются с p
- очень важные типЫ можно писать в camel style, а все остальные в нижнем регистре, у всех типов обязателен суффикс _t
- размещение нескльких выражений на одной строке не привествуется (ну эт само собой)
- между if do while switch for и ( один пробел   --- а для чиво??
- строки более 80 символов нужно резать
- использование более одной пустой строки запрещено
- одна пустая строка должна быть между функциями и для разделение блоков кода, перед блоком кода обязателен многострочный комментарий
- комменты перед функцией пишутся по следующему шаблону:
/**
 * @brief   A brief description, one sentence, one line.
 * @details A detailed description of the functionality, it can span over
 *          multiple lines, can be omitted.
 * @pre     Prerequisites about the use of the functionality, there can be
 *          more than one "pre" tags, can be omitted.
 * @post    Postrequisites about the use of the functionality, there can be
 *          more than one "post" tags, can be omitted.
 * @note    There can be one or more notes, can be omitted.
 *
 * @param[in] p1        description of parameter one
 * @param[out] p2       description of parameter two
 * @param[in,out] p3    description of parameter three
 * @return              Description of the returned value, must be omitted if
 *                      a function returns void.
 * @retval VALUE1       description of the special returned value one, can be
 *                      omitted.
 * @retval VALUE2       description of the special returned value two, can be
 *                      omitted.
 *
 * @api|@notapi|@special|@init|@sclass|@iclass
 */
- комментушки начинать с большой буквы и заканчивать точкой, после /* пробел, перед */ нет пробела, перед следующей строкой отступ без *





Следуй циклу думай-реализуй-тестируй-повторяй






























