
bin/Debug/point-to-point.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000932  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000932  000009e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000108  00800074  00800074  000009fa  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  000009fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00003234  00000000  00000000  00000a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00002cf6  00000000  00000000  00003c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000692a  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	b1 c0       	rjmp	.+354    	; 0x166 <__vector_1>
   4:	d6 c0       	rjmp	.+428    	; 0x1b2 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	6b c0       	rjmp	.+214    	; 0xee <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e3       	ldi	r30, 0x32	; 50
  3a:	f9 e0       	ldi	r31, 0x09	; 9
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 37       	cpi	r26, 0x7C	; 124
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	25 d1       	rcall	.+586    	; 0x2a4 <main>
  5a:	69 c4       	rjmp	.+2258   	; 0x92e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <led_flash>:



/* отладочная функция (тупо мигает светодиодами) */

void led_flash(register uint8_t i, uint8_t type) {
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
	uint8_t led = LED_PIN, flash1, flash2;
  62:	d0 b3       	in	r29, 0x10	; 16
	switch (type) {
  64:	61 30       	cpi	r22, 0x01	; 1
  66:	31 f0       	breq	.+12     	; 0x74 <led_flash+0x16>
  68:	70 f0       	brcs	.+28     	; 0x86 <led_flash+0x28>
  6a:	62 30       	cpi	r22, 0x02	; 2
  6c:	49 f0       	breq	.+18     	; 0x80 <led_flash+0x22>
  6e:	63 30       	cpi	r22, 0x03	; 3
  70:	61 f4       	brne	.+24     	; 0x8a <led_flash+0x2c>
  72:	03 c0       	rjmp	.+6      	; 0x7a <led_flash+0x1c>
		case 0 : flash1=0;
				 flash2=0;
				 break;
		case 1 : flash1=RED_LED;
				 flash2=GREEN_LED;
  74:	a0 e4       	ldi	r26, 0x40	; 64
	uint8_t led = LED_PIN, flash1, flash2;
	switch (type) {
		case 0 : flash1=0;
				 flash2=0;
				 break;
		case 1 : flash1=RED_LED;
  76:	70 e2       	ldi	r23, 0x20	; 32
				 flash2=GREEN_LED;
				 break;
  78:	08 c0       	rjmp	.+16     	; 0x8a <led_flash+0x2c>
		case 3 : flash1=RED_LED;
				 flash2=0;
  7a:	a0 e0       	ldi	r26, 0x00	; 0
				 flash2=0;
				 break;
		case 1 : flash1=RED_LED;
				 flash2=GREEN_LED;
				 break;
		case 3 : flash1=RED_LED;
  7c:	70 e2       	ldi	r23, 0x20	; 32
				 flash2=0;
				 break;
  7e:	05 c0       	rjmp	.+10     	; 0x8a <led_flash+0x2c>
		case 2 : flash1=GREEN_LED;
				 flash2=0;
  80:	a0 e0       	ldi	r26, 0x00	; 0
				 flash2=GREEN_LED;
				 break;
		case 3 : flash1=RED_LED;
				 flash2=0;
				 break;
		case 2 : flash1=GREEN_LED;
  82:	70 e4       	ldi	r23, 0x40	; 64
				 flash2=0;
				 break;
  84:	02 c0       	rjmp	.+4      	; 0x8a <led_flash+0x2c>

void led_flash(register uint8_t i, uint8_t type) {
	uint8_t led = LED_PIN, flash1, flash2;
	switch (type) {
		case 0 : flash1=0;
				 flash2=0;
  86:	a0 e0       	ldi	r26, 0x00	; 0
/* отладочная функция (тупо мигает светодиодами) */

void led_flash(register uint8_t i, uint8_t type) {
	uint8_t led = LED_PIN, flash1, flash2;
	switch (type) {
		case 0 : flash1=0;
  88:	70 e0       	ldi	r23, 0x00	; 0
				 break;
		case 2 : flash1=GREEN_LED;
				 flash2=0;
				 break;
		}
	++i;
  8a:	68 2f       	mov	r22, r24
  8c:	6f 5f       	subi	r22, 0xFF	; 255
	while(--i) {
		LED_PORT |= flash1;
		LED_PORT &= ~flash2;
  8e:	ca 2f       	mov	r28, r26
  90:	c0 95       	com	r28
  92:	40 ed       	ldi	r20, 0xD0	; 208
  94:	57 e0       	ldi	r21, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  96:	28 ec       	ldi	r18, 0xC8	; 200
  98:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(200);
		LED_PORT |= flash2;
		LED_PORT &= ~flash1;
  9a:	b7 2f       	mov	r27, r23
  9c:	b0 95       	com	r27
		case 2 : flash1=GREEN_LED;
				 flash2=0;
				 break;
		}
	++i;
	while(--i) {
  9e:	18 c0       	rjmp	.+48     	; 0xd0 <led_flash+0x72>
		LED_PORT |= flash1;
  a0:	82 b3       	in	r24, 0x12	; 18
  a2:	87 2b       	or	r24, r23
  a4:	82 bb       	out	0x12, r24	; 18
		LED_PORT &= ~flash2;
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	8c 23       	and	r24, r28
  aa:	82 bb       	out	0x12, r24	; 18
  ac:	ca 01       	movw	r24, r20
  ae:	f9 01       	movw	r30, r18
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <led_flash+0x52>
  b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b6:	d9 f7       	brne	.-10     	; 0xae <led_flash+0x50>
		_delay_ms(200);
		LED_PORT |= flash2;
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	8a 2b       	or	r24, r26
  bc:	82 bb       	out	0x12, r24	; 18
		LED_PORT &= ~flash1;
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	8b 23       	and	r24, r27
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	ca 01       	movw	r24, r20
  c6:	f9 01       	movw	r30, r18
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <led_flash+0x6a>
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	d9 f7       	brne	.-10     	; 0xc6 <led_flash+0x68>
		case 2 : flash1=GREEN_LED;
				 flash2=0;
				 break;
		}
	++i;
	while(--i) {
  d0:	61 50       	subi	r22, 0x01	; 1
  d2:	31 f7       	brne	.-52     	; 0xa0 <led_flash+0x42>
		_delay_ms(200);
		LED_PORT |= flash2;
		LED_PORT &= ~flash1;
		_delay_ms(200);
		}
	LED_PORT = led;
  d4:	d2 bb       	out	0x12, r29	; 18
  d6:	80 ea       	ldi	r24, 0xA0	; 160
  d8:	9f e0       	ldi	r25, 0x0F	; 15
  da:	28 ec       	ldi	r18, 0xC8	; 200
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	f9 01       	movw	r30, r18
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <led_flash+0x82>
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	d9 f7       	brne	.-10     	; 0xde <led_flash+0x80>
	_delay_ms(400);
	}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <__vector_11>:



/*   обработчики прерываний   */

ISR (USART_RXC_vect) {                              // если модем разбудил пакет, пришедший по RS485
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	4f 93       	push	r20
  fe:	5f 93       	push	r21
 100:	6f 93       	push	r22
 102:	7f 93       	push	r23
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31

	cli();                                          // выключает прерывания
 110:	f8 94       	cli

	rs485_receive_packet();                         // принимает пакет по RS485
 112:	86 d3       	rcall	.+1804   	; 0x820 <rs485_receive_packet>

    if (packet_condition == 0xff) {
 114:	80 91 75 00 	lds	r24, 0x0075
 118:	8f 3f       	cpi	r24, 0xFF	; 255
 11a:	99 f4       	brne	.+38     	; 0x142 <__vector_11+0x54>
        if (npack == 256) {
 11c:	80 91 76 00 	lds	r24, 0x0076
 120:	90 91 77 00 	lds	r25, 0x0077
 124:	81 15       	cp	r24, r1
 126:	91 40       	sbci	r25, 0x01	; 1
 128:	29 f4       	brne	.+10     	; 0x134 <__vector_11+0x46>
            rfm_22_write(0x3b,0x02);
 12a:	62 e0       	ldi	r22, 0x02	; 2
 12c:	8b e3       	ldi	r24, 0x3B	; 59
 12e:	6a d1       	rcall	.+724    	; 0x404 <rfm_22_write>
            rfm_22_transmit_packet_256();
 130:	ab d2       	rcall	.+1366   	; 0x688 <rfm_22_transmit_packet_256>
 132:	04 c0       	rjmp	.+8      	; 0x13c <__vector_11+0x4e>
            }
        else {
            rfm_22_write(0x3b,0x01);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	8b e3       	ldi	r24, 0x3B	; 59
 138:	65 d1       	rcall	.+714    	; 0x404 <rfm_22_write>
            rfm_22_transmit_packet();
 13a:	6c d2       	rcall	.+1240   	; 0x614 <rfm_22_transmit_packet>
            }
    packet_condition = 0x10;        // обнуляет состояние пакета для исключения еще одной пересылки
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	80 93 75 00 	sts	0x0075, r24
    }

    register uint8_t rubbish = UDR;
 142:	8c b1       	in	r24, 0x0c	; 12

	return;
	}
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	bf 91       	pop	r27
 14a:	af 91       	pop	r26
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	7f 91       	pop	r23
 152:	6f 91       	pop	r22
 154:	5f 91       	pop	r21
 156:	4f 91       	pop	r20
 158:	3f 91       	pop	r19
 15a:	2f 91       	pop	r18
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <__vector_1>:




ISR (INT0_vect) {									// если RFM принял пакет
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	2f 93       	push	r18
 172:	3f 93       	push	r19
 174:	4f 93       	push	r20
 176:	5f 93       	push	r21
 178:	6f 93       	push	r22
 17a:	7f 93       	push	r23
 17c:	8f 93       	push	r24
 17e:	9f 93       	push	r25
 180:	af 93       	push	r26
 182:	bf 93       	push	r27
 184:	ef 93       	push	r30
 186:	ff 93       	push	r31

	cli();                                          // выключает прерывания
 188:	f8 94       	cli

    packet_handler();                               // запуск обработчика пакета
 18a:	b1 d0       	rcall	.+354    	; 0x2ee <packet_handler>

    GIFR = 0xc0; 						            // обнуляет прерывания
 18c:	80 ec       	ldi	r24, 0xC0	; 192
 18e:	8a bf       	out	0x3a, r24	; 58

    return;
	}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <__vector_2>:




ISR (INT1_vect) {									// если была нажата кнопка reset
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	2f 93       	push	r18
 1be:	3f 93       	push	r19
 1c0:	4f 93       	push	r20
 1c2:	5f 93       	push	r21
 1c4:	6f 93       	push	r22
 1c6:	7f 93       	push	r23
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31

	cli();
 1d4:	f8 94       	cli

    led_flash(2,1);
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	41 df       	rcall	.-382    	; 0x5e <led_flash>

    GIFR = 0xc0; 						            // обнуляет прерывания
 1dc:	80 ec       	ldi	r24, 0xC0	; 192
 1de:	8a bf       	out	0x3a, r24	; 58

    return;
	}
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	bf 91       	pop	r27
 1e6:	af 91       	pop	r26
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	7f 91       	pop	r23
 1ee:	6f 91       	pop	r22
 1f0:	5f 91       	pop	r21
 1f2:	4f 91       	pop	r20
 1f4:	3f 91       	pop	r19
 1f6:	2f 91       	pop	r18
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <init>:



/*  инициализация модема  */

void init (void) {
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	84 ef       	ldi	r24, 0xF4	; 244
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	28 ec       	ldi	r18, 0xC8	; 200
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	f9 01       	movw	r30, r18
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <init+0x10>
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	d9 f7       	brne	.-10     	; 0x210 <init+0xe>

	uint8_t temp;

    _delay_ms(50);

	LED_DDR |= GREEN_LED + RED_LED;				// инициалиация светодиодов
 21a:	81 b3       	in	r24, 0x11	; 17
 21c:	80 66       	ori	r24, 0x60	; 96
 21e:	81 bb       	out	0x11, r24	; 17

	device_address = eeprom_read_byte(&device_address_eep);	    // считывет адрес устроства
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	7c d3       	rcall	.+1784   	; 0x91e <__eerd_byte_m8>
 226:	80 93 74 00 	sts	0x0074, r24

    connect_address = eeprom_read_byte(&connect_address_eep);   // считывает адрес устройства на радиоканале
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	77 d3       	rcall	.+1774   	; 0x91e <__eerd_byte_m8>
 230:	80 93 78 01 	sts	0x0178, r24
    if (connect_address == 0)   LED_PORT |= RED_LED;
 234:	80 91 78 01 	lds	r24, 0x0178
 238:	81 11       	cpse	r24, r1
 23a:	01 c0       	rjmp	.+2      	; 0x23e <init+0x3c>
 23c:	95 9a       	sbi	0x12, 5	; 18


	temp = rfm_22_init();						// инициализация RFM
 23e:	fb d0       	rcall	.+502    	; 0x436 <rfm_22_init>

	if(temp == 1) {
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	a1 f4       	brne	.+40     	; 0x26c <init+0x6a>
 244:	15 e0       	ldi	r17, 0x05	; 5
 246:	c0 ea       	ldi	r28, 0xA0	; 160
 248:	df e0       	ldi	r29, 0x0F	; 15

		for (i=0 ; i<5 ; ++i) {
		RFM_22_SDN_PORT |= RFM_22_SDN_EN;		// если RFM не отвечает, выключает, пробует инициализировать еще 5 раз
 24a:	aa 9a       	sbi	0x15, 2	; 21
 24c:	ce 01       	movw	r24, r28
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <init+0x4c>
		_delay_ms(2);
		temp = rfm_22_init();
 252:	f1 d0       	rcall	.+482    	; 0x436 <rfm_22_init>
		if (temp == 0) break;
 254:	88 23       	and	r24, r24
 256:	51 f0       	breq	.+20     	; 0x26c <init+0x6a>
 258:	11 50       	subi	r17, 0x01	; 1

	temp = rfm_22_init();						// инициализация RFM

	if(temp == 1) {

		for (i=0 ; i<5 ; ++i) {
 25a:	b9 f7       	brne	.-18     	; 0x24a <init+0x48>
		_delay_ms(2);
		temp = rfm_22_init();
		if (temp == 0) break;
		}

		if (temp == 1) {						// если все равно не отвечает - выключает RFM
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	31 f4       	brne	.+12     	; 0x26c <init+0x6a>
			RFM_22_SDN_PORT |= RFM_22_SDN_EN;
 260:	aa 9a       	sbi	0x15, 2	; 21
			device_address = 0;
 262:	10 92 74 00 	sts	0x0074, r1

			led_flash(2,3);
 266:	63 e0       	ldi	r22, 0x03	; 3
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	f9 de       	rcall	.-526    	; 0x5e <led_flash>
			}
		}


	if ( device_address == 0 ) {
 26c:	80 91 74 00 	lds	r24, 0x0074
 270:	81 11       	cpse	r24, r1
 272:	02 c0       	rjmp	.+4      	; 0x278 <init+0x76>
		LED_PORT |= RED_LED;			// если адрес устройства отсутствует, или RFM не была инициализирована включает красный светодиод
 274:	95 9a       	sbi	0x12, 5	; 18
 276:	12 c0       	rjmp	.+36     	; 0x29c <init+0x9a>
		}
	else {

		LED_PORT |= GREEN_LED; 			// если RFM инициализирован успешно и адрес устройтва успешно считан - включает зеленый светодиод
 278:	96 9a       	sbi	0x12, 6	; 18
//		BUTTON_PORT |= BUTTON_EN;		// вкл подтягивающий резистор на кнопке, не включаем, тк с внутренней подтяжкой работа нестабильна

		TCCR1B = INIT_TCCR1B;           // инициализация таймера для формирования задержек
 27a:	85 e0       	ldi	r24, 0x05	; 5
 27c:	8e bd       	out	0x2e, r24	; 46

		MCUCR = INIT_MCUCR;				// конфигурирует внешние прерывания
 27e:	83 e8       	ldi	r24, 0x83	; 131
 280:	85 bf       	out	0x35, r24	; 53
		GICR = INIT_GICR;
 282:	80 ec       	ldi	r24, 0xC0	; 192
 284:	8b bf       	out	0x3b, r24	; 59

        rs485_init();
 286:	bf d2       	rcall	.+1406   	; 0x806 <rs485_init>

		rfm_22_write(0x07,0x05);		// вкл приемник
 288:	65 e0       	ldi	r22, 0x05	; 5
 28a:	87 e0       	ldi	r24, 0x07	; 7
 28c:	bb d0       	rcall	.+374    	; 0x404 <rfm_22_write>
 28e:	88 e5       	ldi	r24, 0x58	; 88
 290:	92 e0       	ldi	r25, 0x02	; 2
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <init+0x90>
		_delay_us(300);

        DDRD &= ~0x0c;
 296:	81 b3       	in	r24, 0x11	; 17
 298:	83 7f       	andi	r24, 0xF3	; 243
 29a:	81 bb       	out	0x11, r24	; 17

		}
	}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	08 95       	ret

000002a4 <main>:

int main (void) {

    uint8_t eee;

	init();									// инициализирует модем
 2a4:	ae df       	rcall	.-164    	; 0x202 <init>

    int i;
    for (i=0 ; i<256 ; ++i) buffer[i] = 0xaa;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	2a ea       	ldi	r18, 0xAA	; 170
 2ac:	fc 01       	movw	r30, r24
 2ae:	e8 58       	subi	r30, 0x88	; 136
 2b0:	ff 4f       	sbci	r31, 0xFF	; 255
 2b2:	20 83       	st	Z, r18
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	81 15       	cp	r24, r1
 2b8:	31 e0       	ldi	r19, 0x01	; 1
 2ba:	93 07       	cpc	r25, r19
 2bc:	b9 f7       	brne	.-18     	; 0x2ac <main+0x8>

    rfm_22_write_burst(0x7f,buffer,64);
 2be:	40 e4       	ldi	r20, 0x40	; 64
 2c0:	68 e7       	ldi	r22, 0x78	; 120
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	8f e7       	ldi	r24, 0x7F	; 127
 2c6:	87 d0       	rcall	.+270    	; 0x3d6 <rfm_22_write_burst>

        rfm_22_clear();

        rfm_22_write_burst(0x7f,buffer,64);

        npack = 256;
 2c8:	00 e0       	ldi	r16, 0x00	; 0
 2ca:	11 e0       	ldi	r17, 0x01	; 1
 2cc:	c8 ec       	ldi	r28, 0xC8	; 200
 2ce:	d0 e0       	ldi	r29, 0x00	; 0
    rfm_22_write_burst(0x7f,buffer,64);

	while(1) {


        rfm_22_clear();
 2d0:	5e d1       	rcall	.+700    	; 0x58e <rfm_22_clear>

        rfm_22_write_burst(0x7f,buffer,64);
 2d2:	40 e4       	ldi	r20, 0x40	; 64
 2d4:	68 e7       	ldi	r22, 0x78	; 120
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	8f e7       	ldi	r24, 0x7F	; 127
 2da:	7d d0       	rcall	.+250    	; 0x3d6 <rfm_22_write_burst>

        npack = 256;
 2dc:	10 93 77 00 	sts	0x0077, r17
 2e0:	00 93 76 00 	sts	0x0076, r16

        rfm_22_transmit_packet_256();
 2e4:	d1 d1       	rcall	.+930    	; 0x688 <rfm_22_transmit_packet_256>
 2e6:	ce 01       	movw	r24, r28
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <main+0x44>
 2ec:	f1 cf       	rjmp	.-30     	; 0x2d0 <main+0x2c>

000002ee <packet_handler>:
 2ee:	87 e4       	ldi	r24, 0x47	; 71
 2f0:	69 e7       	ldi	r22, 0x79	; 121
 2f2:	71 e0       	ldi	r23, 0x01	; 1
 2f4:	43 e0       	ldi	r20, 0x03	; 3
 2f6:	58 d0       	rcall	.+176    	; 0x3a8 <rfm_22_read_burst>
 2f8:	80 91 7a 01 	lds	r24, 0x017A
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	11 f1       	breq	.+68     	; 0x344 <packet_handler+0x56>
 300:	84 30       	cpi	r24, 0x04	; 4
 302:	30 f4       	brcc	.+12     	; 0x310 <packet_handler+0x22>
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	51 f0       	breq	.+20     	; 0x31c <packet_handler+0x2e>
 308:	82 30       	cpi	r24, 0x02	; 2
 30a:	09 f0       	breq	.+2      	; 0x30e <packet_handler+0x20>
 30c:	4c c0       	rjmp	.+152    	; 0x3a6 <packet_handler+0xb8>
 30e:	10 c0       	rjmp	.+32     	; 0x330 <packet_handler+0x42>
 310:	84 30       	cpi	r24, 0x04	; 4
 312:	29 f1       	breq	.+74     	; 0x35e <packet_handler+0x70>
 314:	86 30       	cpi	r24, 0x06	; 6
 316:	09 f0       	breq	.+2      	; 0x31a <packet_handler+0x2c>
 318:	46 c0       	rjmp	.+140    	; 0x3a6 <packet_handler+0xb8>
 31a:	2e c0       	rjmp	.+92     	; 0x378 <packet_handler+0x8a>
 31c:	e3 d1       	rcall	.+966    	; 0x6e4 <rfm_22_receive_packet>
 31e:	80 91 75 00 	lds	r24, 0x0075
 322:	8f 3f       	cpi	r24, 0xFF	; 255
 324:	11 f4       	brne	.+4      	; 0x32a <packet_handler+0x3c>
 326:	d9 d2       	rcall	.+1458   	; 0x8da <rs485_transmit_packet>
 328:	08 95       	ret
 32a:	86 e0       	ldi	r24, 0x06	; 6
 32c:	63 d1       	rcall	.+710    	; 0x5f4 <rfm_22_transmit_command>
 32e:	08 95       	ret
 330:	20 d2       	rcall	.+1088   	; 0x772 <rfm_22_receive_packet_256>
 332:	80 91 75 00 	lds	r24, 0x0075
 336:	8f 3f       	cpi	r24, 0xFF	; 255
 338:	11 f4       	brne	.+4      	; 0x33e <packet_handler+0x50>
 33a:	cf d2       	rcall	.+1438   	; 0x8da <rs485_transmit_packet>
 33c:	08 95       	ret
 33e:	86 e0       	ldi	r24, 0x06	; 6
 340:	59 d1       	rcall	.+690    	; 0x5f4 <rfm_22_transmit_command>
 342:	08 95       	ret
 344:	80 91 75 00 	lds	r24, 0x0075
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	31 f4       	brne	.+12     	; 0x358 <packet_handler+0x6a>
 34c:	cb d1       	rcall	.+918    	; 0x6e4 <rfm_22_receive_packet>
 34e:	80 91 75 00 	lds	r24, 0x0075
 352:	8f 3f       	cpi	r24, 0xFF	; 255
 354:	09 f4       	brne	.+2      	; 0x358 <packet_handler+0x6a>
 356:	c1 d2       	rcall	.+1410   	; 0x8da <rs485_transmit_packet>
 358:	10 92 75 00 	sts	0x0075, r1
 35c:	08 95       	ret
 35e:	80 91 75 00 	lds	r24, 0x0075
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	31 f4       	brne	.+12     	; 0x372 <packet_handler+0x84>
 366:	05 d2       	rcall	.+1034   	; 0x772 <rfm_22_receive_packet_256>
 368:	80 91 75 00 	lds	r24, 0x0075
 36c:	8f 3f       	cpi	r24, 0xFF	; 255
 36e:	09 f4       	brne	.+2      	; 0x372 <packet_handler+0x84>
 370:	b4 d2       	rcall	.+1384   	; 0x8da <rs485_transmit_packet>
 372:	10 92 75 00 	sts	0x0075, r1
 376:	08 95       	ret
 378:	80 91 75 00 	lds	r24, 0x0075
 37c:	80 31       	cpi	r24, 0x10	; 16
 37e:	99 f4       	brne	.+38     	; 0x3a6 <packet_handler+0xb8>
 380:	80 91 76 00 	lds	r24, 0x0076
 384:	90 91 77 00 	lds	r25, 0x0077
 388:	21 e0       	ldi	r18, 0x01	; 1
 38a:	80 30       	cpi	r24, 0x00	; 0
 38c:	92 07       	cpc	r25, r18
 38e:	29 f4       	brne	.+10     	; 0x39a <packet_handler+0xac>
 390:	8b e3       	ldi	r24, 0x3B	; 59
 392:	64 e0       	ldi	r22, 0x04	; 4
 394:	37 d0       	rcall	.+110    	; 0x404 <rfm_22_write>
 396:	78 d1       	rcall	.+752    	; 0x688 <rfm_22_transmit_packet_256>
 398:	04 c0       	rjmp	.+8      	; 0x3a2 <packet_handler+0xb4>
 39a:	8b e3       	ldi	r24, 0x3B	; 59
 39c:	63 e0       	ldi	r22, 0x03	; 3
 39e:	32 d0       	rcall	.+100    	; 0x404 <rfm_22_write>
 3a0:	39 d1       	rcall	.+626    	; 0x614 <rfm_22_transmit_packet>
 3a2:	10 92 75 00 	sts	0x0075, r1
 3a6:	08 95       	ret

000003a8 <rfm_22_read_burst>:

void  rfm_22_read_burst  (uint8_t address, volatile uint8_t *data, uint8_t lenght) {

	register uint8_t i=0;

	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;
 3a8:	a8 98       	cbi	0x15, 0	; 21

	SPDR = address;		 			// записывает адрес
 3aa:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR<<7));
 3ac:	8e b1       	in	r24, 0x0e	; 14
 3ae:	88 23       	and	r24, r24
 3b0:	e9 f3       	breq	.-6      	; 0x3ac <rfm_22_read_burst+0x4>

	for(i=0 ; i<lenght ; ++i) {		// считывает данные
 3b2:	44 23       	and	r20, r20
 3b4:	71 f0       	breq	.+28     	; 0x3d2 <rfm_22_read_burst+0x2a>
 3b6:	26 2f       	mov	r18, r22
 3b8:	e6 2f       	mov	r30, r22
 3ba:	f7 2f       	mov	r31, r23
		SPDR=0xff;
 3bc:	9f ef       	ldi	r25, 0xFF	; 255
 3be:	9f b9       	out	0x0f, r25	; 15
		while (!(SPSR<<7));
 3c0:	8e b1       	in	r24, 0x0e	; 14
 3c2:	88 23       	and	r24, r24
 3c4:	e9 f3       	breq	.-6      	; 0x3c0 <rfm_22_read_burst+0x18>
		*(data+i) = SPDR;
 3c6:	8f b1       	in	r24, 0x0f	; 15
 3c8:	81 93       	st	Z+, r24
	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;

	SPDR = address;		 			// записывает адрес
	while (!(SPSR<<7));

	for(i=0 ; i<lenght ; ++i) {		// считывает данные
 3ca:	8e 2f       	mov	r24, r30
 3cc:	82 1b       	sub	r24, r18
 3ce:	84 17       	cp	r24, r20
 3d0:	b0 f3       	brcs	.-20     	; 0x3be <rfm_22_read_burst+0x16>
		SPDR=0xff;
		while (!(SPSR<<7));
		*(data+i) = SPDR;
		}

	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
 3d2:	a8 9a       	sbi	0x15, 0	; 21
 3d4:	08 95       	ret

000003d6 <rfm_22_write_burst>:

void rfm_22_write_burst (uint8_t address, volatile uint8_t *data, uint8_t lenght) {

	register uint8_t i=0;

	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;
 3d6:	a8 98       	cbi	0x15, 0	; 21

	SPDR = address | (1 << 7);		 // записывает адрес
 3d8:	80 68       	ori	r24, 0x80	; 128
 3da:	8f b9       	out	0x0f, r24	; 15

	while(!(SPSR<<7));
 3dc:	8e b1       	in	r24, 0x0e	; 14
 3de:	88 23       	and	r24, r24
 3e0:	e9 f3       	breq	.-6      	; 0x3dc <rfm_22_write_burst+0x6>

	for(i=0 ; i<lenght ; ++i) {		// записывает данные
 3e2:	44 23       	and	r20, r20
 3e4:	69 f0       	breq	.+26     	; 0x400 <rfm_22_write_burst+0x2a>
 3e6:	96 2f       	mov	r25, r22
 3e8:	e6 2f       	mov	r30, r22
 3ea:	f7 2f       	mov	r31, r23
		SPDR = *(data+i);
 3ec:	80 81       	ld	r24, Z
 3ee:	8f b9       	out	0x0f, r24	; 15
		while (!(SPSR<<7));
 3f0:	8e b1       	in	r24, 0x0e	; 14
 3f2:	88 23       	and	r24, r24
 3f4:	e9 f3       	breq	.-6      	; 0x3f0 <rfm_22_write_burst+0x1a>
 3f6:	31 96       	adiw	r30, 0x01	; 1

	SPDR = address | (1 << 7);		 // записывает адрес

	while(!(SPSR<<7));

	for(i=0 ; i<lenght ; ++i) {		// записывает данные
 3f8:	8e 2f       	mov	r24, r30
 3fa:	89 1b       	sub	r24, r25
 3fc:	84 17       	cp	r24, r20
 3fe:	b0 f3       	brcs	.-20     	; 0x3ec <rfm_22_write_burst+0x16>
		SPDR = *(data+i);
		while (!(SPSR<<7));
		}

	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
 400:	a8 9a       	sbi	0x15, 0	; 21
 402:	08 95       	ret

00000404 <rfm_22_write>:

/* Записывает по SPI data по адресу address */

void rfm_22_write (unsigned char address,unsigned char data) {

	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;
 404:	a8 98       	cbi	0x15, 0	; 21

	SPDR = address | (1<<7);		 // записывает адрес
 406:	80 68       	ori	r24, 0x80	; 128
 408:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR<<7));
 40a:	8e b1       	in	r24, 0x0e	; 14
 40c:	88 23       	and	r24, r24
 40e:	e9 f3       	breq	.-6      	; 0x40a <rfm_22_write+0x6>

	SPDR = data;         			// записывает данные
 410:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR<<7));
 412:	8e b1       	in	r24, 0x0e	; 14
 414:	88 23       	and	r24, r24
 416:	e9 f3       	breq	.-6      	; 0x412 <rfm_22_write+0xe>

	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
 418:	a8 9a       	sbi	0x15, 0	; 21
 41a:	08 95       	ret

0000041c <rfm_22_read>:

uint8_t rfm_22_read(unsigned char address) {

	unsigned char data;

	RFM_22_SPI_EN_PORT &= ~RFM_22_SPI_EN_PIN;
 41c:	a8 98       	cbi	0x15, 0	; 21

	SPDR = address;		 		// записывает адрес
 41e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR<<7));
 420:	8e b1       	in	r24, 0x0e	; 14
 422:	88 23       	and	r24, r24
 424:	e9 f3       	breq	.-6      	; 0x420 <rfm_22_read+0x4>

	SPDR = 0xff;         		// записывает пустые данные
 426:	8f ef       	ldi	r24, 0xFF	; 255
 428:	8f b9       	out	0x0f, r24	; 15

	while (!(SPSR<<7));
 42a:	8e b1       	in	r24, 0x0e	; 14
 42c:	88 23       	and	r24, r24
 42e:	e9 f3       	breq	.-6      	; 0x42a <rfm_22_read+0xe>

	data = SPDR;
 430:	8f b1       	in	r24, 0x0f	; 15

	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
 432:	a8 9a       	sbi	0x15, 0	; 21

	return data;
	}
 434:	08 95       	ret

00000436 <rfm_22_init>:



/* Записывает все необходимые конфигурационные регистры в RFM, проверяет связь с RFM. Если RFM не отвечает - возвращает 1, иначе - 0 */

uint8_t rfm_22_init(void) {
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62
 43e:	67 97       	sbiw	r28, 0x17	; 23
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	f8 94       	cli
 444:	de bf       	out	0x3e, r29	; 62
 446:	0f be       	out	0x3f, r0	; 63
 448:	cd bf       	out	0x3d, r28	; 61

uint8_t		init_table_io[3] = {0x53, 0x5c, 0x56},
 44a:	83 e5       	ldi	r24, 0x53	; 83
 44c:	89 83       	std	Y+1, r24	; 0x01
 44e:	8c e5       	ldi	r24, 0x5C	; 92
 450:	8a 83       	std	Y+2, r24	; 0x02
 452:	86 e5       	ldi	r24, 0x56	; 86
 454:	8b 83       	std	Y+3, r24	; 0x03
            init_table_freq[6] = {0x5e, 0x01, 0x5d, 0x86, 0x03, 0x7e},
 456:	86 e0       	ldi	r24, 0x06	; 6
 458:	ed e6       	ldi	r30, 0x6D	; 109
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	de 01       	movw	r26, r28
 45e:	14 96       	adiw	r26, 0x04	; 4
 460:	01 90       	ld	r0, Z+
 462:	0d 92       	st	X+, r0
 464:	8a 95       	dec	r24
 466:	e1 f7       	brne	.-8      	; 0x460 <__stack+0x1>
            init_table_ph[4] = {0x11, 0x46, 0x0a, 0x20},
 468:	81 e1       	ldi	r24, 0x11	; 17
 46a:	8a 87       	std	Y+10, r24	; 0x0a
 46c:	86 e4       	ldi	r24, 0x46	; 70
 46e:	8b 87       	std	Y+11, r24	; 0x0b
 470:	8a e0       	ldi	r24, 0x0A	; 10
 472:	8c 87       	std	Y+12, r24	; 0x0c
 474:	80 e2       	ldi	r24, 0x20	; 32
 476:	8d 87       	std	Y+13, r24	; 0x0d
            init_table_synch[4] = {0x28, 0x15, 0x23, 0x42},
 478:	88 e2       	ldi	r24, 0x28	; 40
 47a:	8e 87       	std	Y+14, r24	; 0x0e
 47c:	85 e1       	ldi	r24, 0x15	; 21
 47e:	8f 87       	std	Y+15, r24	; 0x0f
 480:	83 e2       	ldi	r24, 0x23	; 35
 482:	88 8b       	std	Y+16, r24	; 0x10
 484:	82 e4       	ldi	r24, 0x42	; 66
 486:	89 8b       	std	Y+17, r24	; 0x11
            init_table_mod[3] = {0x0c, 0x27, 0xe0},
 488:	8c e0       	ldi	r24, 0x0C	; 12
 48a:	8a 8b       	std	Y+18, r24	; 0x12
 48c:	87 e2       	ldi	r24, 0x27	; 39
 48e:	8b 8b       	std	Y+19, r24	; 0x13
 490:	80 ee       	ldi	r24, 0xE0	; 224
 492:	8c 8b       	std	Y+20, r24	; 0x14
            init_table_freqdiv[3] = {0x73, 0x69, 0x00};
 494:	83 e7       	ldi	r24, 0x73	; 115
 496:	8d 8b       	std	Y+21, r24	; 0x15
 498:	89 e6       	ldi	r24, 0x69	; 105
 49a:	8e 8b       	std	Y+22, r24	; 0x16
 49c:	1f 8a       	std	Y+23, r1	; 0x17

	uint8_t error;

	RFM_22_SDN_DDR |= RFM_22_SDN_EN;					//включает RFM
 49e:	a2 9a       	sbi	0x14, 2	; 20
	RFM_22_SDN_PORT &= ~RFM_22_SDN_EN;
 4a0:	aa 98       	cbi	0x15, 2	; 21

	RFM_22_SPI_DDR |= RFM_22_SPI_PIN; 					//инициализация SPI
 4a2:	87 b3       	in	r24, 0x17	; 23
 4a4:	8c 62       	ori	r24, 0x2C	; 44
 4a6:	87 bb       	out	0x17, r24	; 23
	RFM_22_SPI_EN_DDR |= RFM_22_SPI_EN_PIN;
 4a8:	a0 9a       	sbi	0x14, 0	; 20
	RFM_22_SPI_EN_PORT |= RFM_22_SPI_EN_PIN;
 4aa:	a8 9a       	sbi	0x15, 0	; 21
	SPCR = RFM_22_SPCR;
 4ac:	81 e5       	ldi	r24, 0x51	; 81
 4ae:	8d b9       	out	0x0d, r24	; 13

	rfm_22_write(0x07,0x00); 							// режим standby
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	87 e0       	ldi	r24, 0x07	; 7
 4b4:	a7 df       	rcall	.-178    	; 0x404 <rfm_22_write>

//    _delay_ms(10);                                     // ждет пока RFM включится

	rfm_22_write(0x05,0x37);							// включает прерывания
 4b6:	67 e3       	ldi	r22, 0x37	; 55
 4b8:	85 e0       	ldi	r24, 0x05	; 5
 4ba:	a4 df       	rcall	.-184    	; 0x404 <rfm_22_write>
	rfm_22_write(0x06,0x00);
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	86 e0       	ldi	r24, 0x06	; 6
 4c0:	a1 df       	rcall	.-190    	; 0x404 <rfm_22_write>

	rfm_22_read(0x03);						 			// обнуляет прерывания
 4c2:	83 e0       	ldi	r24, 0x03	; 3
 4c4:	ab df       	rcall	.-170    	; 0x41c <rfm_22_read>
	rfm_22_read(0x04);
 4c6:	84 e0       	ldi	r24, 0x04	; 4
 4c8:	a9 df       	rcall	.-174    	; 0x41c <rfm_22_read>

	rfm_22_write(0x09,0x7f);							// емкость 12,5пФ
 4ca:	6f e7       	ldi	r22, 0x7F	; 127
 4cc:	89 e0       	ldi	r24, 0x09	; 9
 4ce:	9a df       	rcall	.-204    	; 0x404 <rfm_22_write>

	rfm_22_write_burst(0x0b, init_table_io, 3);			// порты вода-вывода
 4d0:	43 e0       	ldi	r20, 0x03	; 3
 4d2:	be 01       	movw	r22, r28
 4d4:	6f 5f       	subi	r22, 0xFF	; 255
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	8b e0       	ldi	r24, 0x0B	; 11
 4da:	7d df       	rcall	.-262    	; 0x3d6 <rfm_22_write_burst>

	rfm_22_write(0x6d,0x1f);    						// мощность 13dBm
 4dc:	6f e1       	ldi	r22, 0x1F	; 31
 4de:	8d e6       	ldi	r24, 0x6D	; 109
 4e0:	91 df       	rcall	.-222    	; 0x404 <rfm_22_write>

	rfm_22_write(0x1c,0x95);
 4e2:	65 e9       	ldi	r22, 0x95	; 149
 4e4:	8c e1       	ldi	r24, 0x1C	; 28
 4e6:	8e df       	rcall	.-228    	; 0x404 <rfm_22_write>
	rfm_22_write(0x1d,0x40);
 4e8:	60 e4       	ldi	r22, 0x40	; 64
 4ea:	8d e1       	ldi	r24, 0x1D	; 29
 4ec:	8b df       	rcall	.-234    	; 0x404 <rfm_22_write>

	rfm_22_write_burst(0x20, init_table_freq, 6);		// частоты
 4ee:	46 e0       	ldi	r20, 0x06	; 6
 4f0:	be 01       	movw	r22, r28
 4f2:	6c 5f       	subi	r22, 0xFC	; 252
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255
 4f6:	80 e2       	ldi	r24, 0x20	; 32
 4f8:	6e df       	rcall	.-292    	; 0x3d6 <rfm_22_write_burst>

	rfm_22_write(0x27,0x1e);							// порог RSSI
 4fa:	6e e1       	ldi	r22, 0x1E	; 30
 4fc:	87 e2       	ldi	r24, 0x27	; 39
 4fe:	82 df       	rcall	.-252    	; 0x404 <rfm_22_write>

	rfm_22_write(0x30, 0x8d);
 500:	6d e8       	ldi	r22, 0x8D	; 141
 502:	80 e3       	ldi	r24, 0x30	; 48
 504:	7f df       	rcall	.-258    	; 0x404 <rfm_22_write>

	rfm_22_write_burst(0x32, init_table_ph, 4);			// обработчик пакетов
 506:	44 e0       	ldi	r20, 0x04	; 4
 508:	be 01       	movw	r22, r28
 50a:	66 5f       	subi	r22, 0xF6	; 246
 50c:	7f 4f       	sbci	r23, 0xFF	; 255
 50e:	82 e3       	ldi	r24, 0x32	; 50
 510:	62 df       	rcall	.-316    	; 0x3d6 <rfm_22_write_burst>

	rfm_22_write_burst(0x36, init_table_synch, 4);		// синхронизация
 512:	44 e0       	ldi	r20, 0x04	; 4
 514:	be 01       	movw	r22, r28
 516:	62 5f       	subi	r22, 0xF2	; 242
 518:	7f 4f       	sbci	r23, 0xFF	; 255
 51a:	86 e3       	ldi	r24, 0x36	; 54
 51c:	5c df       	rcall	.-328    	; 0x3d6 <rfm_22_write_burst>

	rfm_22_write(0x3a, device_address);					// адрес возврата
 51e:	60 91 74 00 	lds	r22, 0x0074
 522:	8a e3       	ldi	r24, 0x3A	; 58
 524:	6f df       	rcall	.-290    	; 0x404 <rfm_22_write>
	rfm_22_write(0x3d, connect_address);
 526:	60 91 78 01 	lds	r22, 0x0178
 52a:	8d e3       	ldi	r24, 0x3D	; 61
 52c:	6b df       	rcall	.-298    	; 0x404 <rfm_22_write>
	rfm_22_write(0x42, device_address);					// адрес устройства
 52e:	60 91 74 00 	lds	r22, 0x0074
 532:	82 e4       	ldi	r24, 0x42	; 66
 534:	67 df       	rcall	.-306    	; 0x404 <rfm_22_write>
	rfm_22_write(0x46,0xff);							// маска адреса
 536:	6f ef       	ldi	r22, 0xFF	; 255
 538:	86 e4       	ldi	r24, 0x46	; 70
 53a:	64 df       	rcall	.-312    	; 0x404 <rfm_22_write>



	rfm_22_write(0x6e,0x20);							// скорость передачи
 53c:	60 e2       	ldi	r22, 0x20	; 32
 53e:	8e e6       	ldi	r24, 0x6E	; 110
 540:	61 df       	rcall	.-318    	; 0x404 <rfm_22_write>
	rfm_22_write(0x6f,0xc5);
 542:	65 ec       	ldi	r22, 0xC5	; 197
 544:	8f e6       	ldi	r24, 0x6F	; 111
 546:	5e df       	rcall	.-324    	; 0x404 <rfm_22_write>

	rfm_22_write_burst(0x70, init_table_mod, 3);		// модуляция
 548:	43 e0       	ldi	r20, 0x03	; 3
 54a:	be 01       	movw	r22, r28
 54c:	6e 5e       	subi	r22, 0xEE	; 238
 54e:	7f 4f       	sbci	r23, 0xFF	; 255
 550:	80 e7       	ldi	r24, 0x70	; 112
 552:	41 df       	rcall	.-382    	; 0x3d6 <rfm_22_write_burst>

	rfm_22_write_burst(0x75, init_table_freqdiv, 3);	// конфигурация несущей частоты и девиации
 554:	43 e0       	ldi	r20, 0x03	; 3
 556:	be 01       	movw	r22, r28
 558:	6b 5e       	subi	r22, 0xEB	; 235
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	85 e7       	ldi	r24, 0x75	; 117
 55e:	3b df       	rcall	.-394    	; 0x3d6 <rfm_22_write_burst>

    rfm_22_write(0x7d,0x0a);                            // нижний порог fifo передатчика
 560:	6a e0       	ldi	r22, 0x0A	; 10
 562:	8d e7       	ldi	r24, 0x7D	; 125
 564:	4f df       	rcall	.-354    	; 0x404 <rfm_22_write>
	rfm_22_write(0x7e,0x00);							// порог заполнения fifo приемника
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	8e e7       	ldi	r24, 0x7E	; 126
 56a:	4c df       	rcall	.-360    	; 0x404 <rfm_22_write>

	error=rfm_22_read(0x20);
 56c:	80 e2       	ldi	r24, 0x20	; 32
 56e:	56 df       	rcall	.-340    	; 0x41c <rfm_22_read>

	if (  *init_table_freq != error ) error=1;			// проверка модуля
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	2c 81       	ldd	r18, Y+4	; 0x04
 574:	82 13       	cpse	r24, r18
 576:	01 c0       	rjmp	.+2      	; 0x57a <__stack+0x11b>
 578:	90 e0       	ldi	r25, 0x00	; 0
	else error=0;

	return error;
	}
 57a:	89 2f       	mov	r24, r25
 57c:	67 96       	adiw	r28, 0x17	; 23
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	f8 94       	cli
 582:	de bf       	out	0x3e, r29	; 62
 584:	0f be       	out	0x3f, r0	; 63
 586:	cd bf       	out	0x3d, r28	; 61
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	08 95       	ret

0000058e <rfm_22_clear>:

/* Обнуляет FIFO и прерывания RFM, включая режим приемника */

void rfm_22_clear(void) {

    rfm_22_write(0x07,0x05);            // переключает RFM в режим приемника
 58e:	65 e0       	ldi	r22, 0x05	; 5
 590:	87 e0       	ldi	r24, 0x07	; 7
 592:	38 df       	rcall	.-400    	; 0x404 <rfm_22_write>

    rfm_22_write(0x7e,0x00);            // Порог заполнения FIFO 0.
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	8e e7       	ldi	r24, 0x7E	; 126
 598:	35 df       	rcall	.-406    	; 0x404 <rfm_22_write>

    rfm_22_write(0x08,0x03);			// стирает fifo RFM
 59a:	63 e0       	ldi	r22, 0x03	; 3
 59c:	88 e0       	ldi	r24, 0x08	; 8
 59e:	32 df       	rcall	.-412    	; 0x404 <rfm_22_write>
    rfm_22_write(0x08,0x00);
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	88 e0       	ldi	r24, 0x08	; 8
 5a4:	2f df       	rcall	.-418    	; 0x404 <rfm_22_write>

    rfm_22_read(0x03);                  // обнуляет прерывания
 5a6:	83 e0       	ldi	r24, 0x03	; 3
 5a8:	39 df       	rcall	.-398    	; 0x41c <rfm_22_read>
    rfm_22_read(0x04);
 5aa:	84 e0       	ldi	r24, 0x04	; 4
 5ac:	37 df       	rcall	.-402    	; 0x41c <rfm_22_read>
 5ae:	08 95       	ret

000005b0 <rfm_22_wait_event>:


/* Функция ожидания определенного события. Ждет пока не сработает определенное прерывание в RFM. В качестве аргумента передается ожидаемый регистр флагов прерываний RFM.
    Если событие не произошло - срабатывает таймаут. Возвращает последний считанный регистр флагов или ноль (если ничего не происходило).   */

uint8_t rfm_22_wait_event (uint8_t event) {
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	d8 2f       	mov	r29, r24

    uint8_t interrupt = 0;

    TCNT1 = 0;
 5b8:	1d bc       	out	0x2d, r1	; 45
 5ba:	1c bc       	out	0x2c, r1	; 44
/* Функция ожидания определенного события. Ждет пока не сработает определенное прерывание в RFM. В качестве аргумента передается ожидаемый регистр флагов прерываний RFM.
    Если событие не произошло - срабатывает таймаут. Возвращает последний считанный регистр флагов или ноль (если ничего не происходило).   */

uint8_t rfm_22_wait_event (uint8_t event) {

    uint8_t interrupt = 0;
 5bc:	80 e0       	ldi	r24, 0x00	; 0

    TCNT1 = 0;

    while (((interrupt & event) == 0) & (TCNT1<RFM_22_WAIT_TIME))
 5be:	c1 e0       	ldi	r28, 0x01	; 1
 5c0:	10 e0       	ldi	r17, 0x00	; 0
 5c2:	04 c0       	rjmp	.+8      	; 0x5cc <rfm_22_wait_event+0x1c>
        if ((RFM_22_NIRQ_PIN & RFM_22_NIRQ_EN) == 0)
 5c4:	99 99       	sbic	0x13, 1	; 19
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <rfm_22_wait_event+0x1c>
            interrupt = rfm_22_read(0x03);
 5c8:	83 e0       	ldi	r24, 0x03	; 3
 5ca:	28 df       	rcall	.-432    	; 0x41c <rfm_22_read>

    uint8_t interrupt = 0;

    TCNT1 = 0;

    while (((interrupt & event) == 0) & (TCNT1<RFM_22_WAIT_TIME))
 5cc:	2c b5       	in	r18, 0x2c	; 44
 5ce:	3d b5       	in	r19, 0x2d	; 45
 5d0:	48 2f       	mov	r20, r24
 5d2:	4d 23       	and	r20, r29
 5d4:	9c 2f       	mov	r25, r28
 5d6:	09 f0       	breq	.+2      	; 0x5da <rfm_22_wait_event+0x2a>
 5d8:	91 2f       	mov	r25, r17
 5da:	99 23       	and	r25, r25
 5dc:	39 f0       	breq	.+14     	; 0x5ec <rfm_22_wait_event+0x3c>
 5de:	9c 2f       	mov	r25, r28
 5e0:	21 15       	cp	r18, r1
 5e2:	34 40       	sbci	r19, 0x04	; 4
 5e4:	08 f0       	brcs	.+2      	; 0x5e8 <rfm_22_wait_event+0x38>
 5e6:	91 2f       	mov	r25, r17
 5e8:	91 11       	cpse	r25, r1
 5ea:	ec cf       	rjmp	.-40     	; 0x5c4 <rfm_22_wait_event+0x14>
        if ((RFM_22_NIRQ_PIN & RFM_22_NIRQ_EN) == 0)
            interrupt = rfm_22_read(0x03);

    return interrupt;
    }
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	1f 91       	pop	r17
 5f2:	08 95       	ret

000005f4 <rfm_22_transmit_command>:


/* Функция для передачи команд. Передает пакет состоящий из заголовка и одного байта. Задержка, связанная с ожиданием передачи пакета учтена.
    В качестве аргумента передается команда.    */

void rfm_22_transmit_command(uint8_t command) {
 5f4:	cf 93       	push	r28
 5f6:	c8 2f       	mov	r28, r24

    rfm_22_write(0x3e,0x01);						// костыль из за долбанутых настроек порта RFM
 5f8:	61 e0       	ldi	r22, 0x01	; 1
 5fa:	8e e3       	ldi	r24, 0x3E	; 62
 5fc:	03 df       	rcall	.-506    	; 0x404 <rfm_22_write>
    rfm_22_write(0x7f,0xee);
 5fe:	6e ee       	ldi	r22, 0xEE	; 238
 600:	8f e7       	ldi	r24, 0x7F	; 127
 602:	00 df       	rcall	.-512    	; 0x404 <rfm_22_write>

    rfm_22_write(0x3b,command);
 604:	6c 2f       	mov	r22, r28
 606:	8b e3       	ldi	r24, 0x3B	; 59
 608:	fd de       	rcall	.-518    	; 0x404 <rfm_22_write>

	rfm_22_write(0x07,0x09);					    // вкл режим передатчика
 60a:	69 e0       	ldi	r22, 0x09	; 9
 60c:	87 e0       	ldi	r24, 0x07	; 7
 60e:	fa de       	rcall	.-524    	; 0x404 <rfm_22_write>

//	delay_timer(20);								// задержка, чтобы при передаче пакета не беспокоить RFM

	return;
	}
 610:	cf 91       	pop	r28
 612:	08 95       	ret

00000614 <rfm_22_transmit_packet>:


/* Отправляет пакет длиной от 1 до 255 байт. Пакет считывается из буфера, размер пакета определяется глобальной переменной npack.
    Задержка, связанная с ожиданием передачи пакета учтена. Также подразумевается что первые 64 байта уже есть в fifo. */

void rfm_22_transmit_packet(void) {
 614:	cf 93       	push	r28
 616:	df 93       	push	r29

    uint8_t nbyte = npack;
 618:	60 91 76 00 	lds	r22, 0x0076
 61c:	70 91 77 00 	lds	r23, 0x0077
 620:	d6 2f       	mov	r29, r22

    rfm_22_write(0x3e,nbyte);						            // размер пакета данных в RFM
 622:	8e e3       	ldi	r24, 0x3E	; 62
 624:	ef de       	rcall	.-546    	; 0x404 <rfm_22_write>
    rfm_22_write(0x07,0x09);						            // вкл режим передатчика
 626:	69 e0       	ldi	r22, 0x09	; 9
 628:	87 e0       	ldi	r24, 0x07	; 7
 62a:	ec de       	rcall	.-552    	; 0x404 <rfm_22_write>

    if ( nbyte>64 ) {
 62c:	d1 34       	cpi	r29, 0x41	; 65
 62e:	38 f1       	brcs	.+78     	; 0x67e <rfm_22_transmit_packet+0x6a>
        nbyte -= 64;                                            // корректирует количество оставшихся байт в пакете
 630:	cd 2f       	mov	r28, r29
 632:	c0 54       	subi	r28, 0x40	; 64

        while (nbyte>32) {
 634:	c1 32       	cpi	r28, 0x21	; 33
 636:	b0 f0       	brcs	.+44     	; 0x664 <rfm_22_transmit_packet+0x50>

            rfm_22_wait_event(0x20);                            // ждет пока FIFO опустеет
 638:	80 e2       	ldi	r24, 0x20	; 32
 63a:	ba df       	rcall	.-140    	; 0x5b0 <rfm_22_wait_event>
            rfm_22_write_burst(0x7f,buffer+npack-nbyte,32);     // шлет очередную порцию данных в FIFO
 63c:	60 91 76 00 	lds	r22, 0x0076
 640:	70 91 77 00 	lds	r23, 0x0077
 644:	6c 1b       	sub	r22, r28
 646:	71 09       	sbc	r23, r1
 648:	68 58       	subi	r22, 0x88	; 136
 64a:	7f 4f       	sbci	r23, 0xFF	; 255
 64c:	40 e2       	ldi	r20, 0x20	; 32
 64e:	8f e7       	ldi	r24, 0x7F	; 127
 650:	c2 de       	rcall	.-636    	; 0x3d6 <rfm_22_write_burst>
            nbyte -= 32;
 652:	c0 52       	subi	r28, 0x20	; 32
    rfm_22_write(0x07,0x09);						            // вкл режим передатчика

    if ( nbyte>64 ) {
        nbyte -= 64;                                            // корректирует количество оставшихся байт в пакете

        while (nbyte>32) {
 654:	c1 32       	cpi	r28, 0x21	; 33
 656:	80 f7       	brcc	.-32     	; 0x638 <rfm_22_transmit_packet+0x24>


/* Отправляет пакет длиной от 1 до 255 байт. Пакет считывается из буфера, размер пакета определяется глобальной переменной npack.
    Задержка, связанная с ожиданием передачи пакета учтена. Также подразумевается что первые 64 байта уже есть в fifo. */

void rfm_22_transmit_packet(void) {
 658:	8d 2f       	mov	r24, r29
 65a:	81 56       	subi	r24, 0x61	; 97
 65c:	80 7e       	andi	r24, 0xE0	; 224
 65e:	cd 2f       	mov	r28, r29
 660:	c0 56       	subi	r28, 0x60	; 96
 662:	c8 1b       	sub	r28, r24
            rfm_22_write_burst(0x7f,buffer+npack-nbyte,32);     // шлет очередную порцию данных в FIFO
            nbyte -= 32;
            }


        rfm_22_wait_event(0x20);                                // ждет пока FIFO опустеет окончательно
 664:	80 e2       	ldi	r24, 0x20	; 32
 666:	a4 df       	rcall	.-184    	; 0x5b0 <rfm_22_wait_event>

        rfm_22_write_burst(0x7f,buffer+npack-nbyte,nbyte);      // шлет оставшиеся байты в FIFO
 668:	60 91 76 00 	lds	r22, 0x0076
 66c:	70 91 77 00 	lds	r23, 0x0077
 670:	6c 1b       	sub	r22, r28
 672:	71 09       	sbc	r23, r1
 674:	68 58       	subi	r22, 0x88	; 136
 676:	7f 4f       	sbci	r23, 0xFF	; 255
 678:	4c 2f       	mov	r20, r28
 67a:	8f e7       	ldi	r24, 0x7F	; 127
 67c:	ac de       	rcall	.-680    	; 0x3d6 <rfm_22_write_burst>
        }

    rfm_22_wait_event(0x04);                                    // ждет пока пакет дойдет окончательно
 67e:	84 e0       	ldi	r24, 0x04	; 4
 680:	97 df       	rcall	.-210    	; 0x5b0 <rfm_22_wait_event>

	return;
	}
 682:	df 91       	pop	r29
 684:	cf 91       	pop	r28
 686:	08 95       	ret

00000688 <rfm_22_transmit_packet_256>:

/* Специальная функция для передачи пакета в 256 байт. 256й байт пихается в заголовок. */

void rfm_22_transmit_packet_256(void) {

    --npack;
 688:	80 91 76 00 	lds	r24, 0x0076
 68c:	90 91 77 00 	lds	r25, 0x0077
 690:	01 97       	sbiw	r24, 0x01	; 1
 692:	90 93 77 00 	sts	0x0077, r25
 696:	80 93 76 00 	sts	0x0076, r24
    rfm_22_write(0x3a,buffer[255]);
 69a:	60 91 77 01 	lds	r22, 0x0177
 69e:	8a e3       	ldi	r24, 0x3A	; 58
 6a0:	b1 de       	rcall	.-670    	; 0x404 <rfm_22_write>

    rfm_22_transmit_packet();                       // передает остальной пакет
 6a2:	b8 df       	rcall	.-144    	; 0x614 <rfm_22_transmit_packet>
 6a4:	08 95       	ret

000006a6 <rfm_22_transmit_small_packet>:


/* Отправляет пакет, предварительно проверяя уровень сигнала. startn - указатель на передаваемые данные, lenght - длина пакета.
	Если вызвать с параметрами 0,0 - передает пустой пакет (команду). Задержка, связанная с ожиданием передачи пакета учтена. */

void rfm_22_transmit_small_packet(uint8_t startn, unsigned char lenght) {
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	d8 2f       	mov	r29, r24
 6ac:	c6 2f       	mov	r28, r22
//	rfm_22_write(0x07,0x05);							// вкл приемник

//	rfm_22_write(0x08,0x01);							// стирает fifo
//	rfm_22_write(0x08,0x00);

	if (lenght)                                         // если размер пакета не 0
 6ae:	66 23       	and	r22, r22
 6b0:	59 f0       	breq	.+22     	; 0x6c8 <rfm_22_transmit_small_packet+0x22>
        {
		rfm_22_write(0x3e,lenght);						// размер пакета данных
 6b2:	8e e3       	ldi	r24, 0x3E	; 62
 6b4:	a7 de       	rcall	.-690    	; 0x404 <rfm_22_write>
		rfm_22_write_burst(0x7f,buffer+startn,lenght);	// отправляет пакет в fifo
 6b6:	8d 2f       	mov	r24, r29
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	bc 01       	movw	r22, r24
 6bc:	68 58       	subi	r22, 0x88	; 136
 6be:	7f 4f       	sbci	r23, 0xFF	; 255
 6c0:	4c 2f       	mov	r20, r28
 6c2:	8f e7       	ldi	r24, 0x7F	; 127
 6c4:	88 de       	rcall	.-752    	; 0x3d6 <rfm_22_write_burst>
 6c6:	08 c0       	rjmp	.+16     	; 0x6d8 <rfm_22_transmit_small_packet+0x32>
		}
	else if (startn)
 6c8:	88 23       	and	r24, r24
 6ca:	31 f0       	breq	.+12     	; 0x6d8 <rfm_22_transmit_small_packet+0x32>
        {	 								// если размер пакета 0
		rfm_22_write(0x3e,0x01);						//костыль из за долбанутых настроек порта RFM
 6cc:	61 e0       	ldi	r22, 0x01	; 1
 6ce:	8e e3       	ldi	r24, 0x3E	; 62
 6d0:	99 de       	rcall	.-718    	; 0x404 <rfm_22_write>
		rfm_22_write(0x7f,0xee);
 6d2:	6e ee       	ldi	r22, 0xEE	; 238
 6d4:	8f e7       	ldi	r24, 0x7F	; 127
 6d6:	96 de       	rcall	.-724    	; 0x404 <rfm_22_write>

//	_delay_us(220);

//	while(!(RFM_22_GPIO0_PIN & RFM_22_GPIO0_EN));		// проверяет эфир

	rfm_22_write(0x07,0x09);							// вкл режим передатчика
 6d8:	69 e0       	ldi	r22, 0x09	; 9
 6da:	87 e0       	ldi	r24, 0x07	; 7
 6dc:	93 de       	rcall	.-730    	; 0x404 <rfm_22_write>

//	delay_timer(lenght+20);								// задержка, чтобы при передаче пакета не беспокоить RFM

	return;
	}
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	08 95       	ret

000006e4 <rfm_22_receive_packet>:


/* Принимает пакет длиной от 1 до 255 байт. Пакет считывается в буфер, размер пакета записывается в глобальную переменную npack.
    Также проверяет контрольную сумму и корректирует байт состояния пакета. */

void rfm_22_receive_packet(void) {
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29

    uint8_t nbyte, interrupt=0;

    rfm_22_write(0x7e,0x36);
 6e8:	66 e3       	ldi	r22, 0x36	; 54
 6ea:	8e e7       	ldi	r24, 0x7E	; 126
 6ec:	8b de       	rcall	.-746    	; 0x404 <rfm_22_write>

    rfm_22_read(0x03);                                                      // обнуляет прерывания RFM
 6ee:	83 e0       	ldi	r24, 0x03	; 3
 6f0:	95 de       	rcall	.-726    	; 0x41c <rfm_22_read>

    nbyte = rfm_22_read(0x4b);						// считывает длину пакета
 6f2:	8b e4       	ldi	r24, 0x4B	; 75
 6f4:	93 de       	rcall	.-730    	; 0x41c <rfm_22_read>
 6f6:	d8 2f       	mov	r29, r24
    npack = nbyte;
 6f8:	28 2f       	mov	r18, r24
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	30 93 77 00 	sts	0x0077, r19
 700:	20 93 76 00 	sts	0x0076, r18

    while (nbyte>64) {                                                      // пока количество непринятых байт больше 64
 704:	81 34       	cpi	r24, 0x41	; 65
 706:	b0 f0       	brcs	.+44     	; 0x734 <rfm_22_receive_packet+0x50>

    rfm_22_write(0x7e,0x36);

    rfm_22_read(0x03);                                                      // обнуляет прерывания RFM

    nbyte = rfm_22_read(0x4b);						// считывает длину пакета
 708:	c8 2f       	mov	r28, r24
    npack = nbyte;

    while (nbyte>64) {                                                      // пока количество непринятых байт больше 64

        rfm_22_wait_event(0x10);                                            // ждет пока FIFO не заполнится
 70a:	80 e1       	ldi	r24, 0x10	; 16
 70c:	51 df       	rcall	.-350    	; 0x5b0 <rfm_22_wait_event>

        rfm_22_read_burst(0x7f, buffer+npack-nbyte, 32);	                // считывает данные
 70e:	60 91 76 00 	lds	r22, 0x0076
 712:	70 91 77 00 	lds	r23, 0x0077
 716:	6c 1b       	sub	r22, r28
 718:	71 09       	sbc	r23, r1
 71a:	68 58       	subi	r22, 0x88	; 136
 71c:	7f 4f       	sbci	r23, 0xFF	; 255
 71e:	40 e2       	ldi	r20, 0x20	; 32
 720:	8f e7       	ldi	r24, 0x7F	; 127
 722:	42 de       	rcall	.-892    	; 0x3a8 <rfm_22_read_burst>
        nbyte -= 32;                                                        // коректирует количество оставшихся байт
 724:	c0 52       	subi	r28, 0x20	; 32
    rfm_22_read(0x03);                                                      // обнуляет прерывания RFM

    nbyte = rfm_22_read(0x4b);						// считывает длину пакета
    npack = nbyte;

    while (nbyte>64) {                                                      // пока количество непринятых байт больше 64
 726:	c1 34       	cpi	r28, 0x41	; 65
 728:	80 f7       	brcc	.-32     	; 0x70a <rfm_22_receive_packet+0x26>


/* Принимает пакет длиной от 1 до 255 байт. Пакет считывается в буфер, размер пакета записывается в глобальную переменную npack.
    Также проверяет контрольную сумму и корректирует байт состояния пакета. */

void rfm_22_receive_packet(void) {
 72a:	8d 2f       	mov	r24, r29
 72c:	81 54       	subi	r24, 0x41	; 65
 72e:	80 7e       	andi	r24, 0xE0	; 224
 730:	d0 52       	subi	r29, 0x20	; 32
 732:	d8 1b       	sub	r29, r24

        rfm_22_read_burst(0x7f, buffer+npack-nbyte, 32);	                // считывает данные
        nbyte -= 32;                                                        // коректирует количество оставшихся байт
        }

    interrupt = rfm_22_wait_event(0x02);                                    // ждет пока дойдет весь пакет
 734:	82 e0       	ldi	r24, 0x02	; 2
 736:	3c df       	rcall	.-392    	; 0x5b0 <rfm_22_wait_event>
 738:	c8 2f       	mov	r28, r24

    rfm_22_read_burst(0x7f, buffer+npack-nbyte, nbyte);                    // считывает последние байты
 73a:	60 91 76 00 	lds	r22, 0x0076
 73e:	70 91 77 00 	lds	r23, 0x0077
 742:	6d 1b       	sub	r22, r29
 744:	71 09       	sbc	r23, r1
 746:	68 58       	subi	r22, 0x88	; 136
 748:	7f 4f       	sbci	r23, 0xFF	; 255
 74a:	4d 2f       	mov	r20, r29
 74c:	8f e7       	ldi	r24, 0x7F	; 127
 74e:	2c de       	rcall	.-936    	; 0x3a8 <rfm_22_read_burst>

    if ((interrupt & 0x01) | (interrupt == 0)) packet_condition = 0x01;     // проверяет контрольную сумму
 750:	c0 fd       	sbrc	r28, 0
 752:	05 c0       	rjmp	.+10     	; 0x75e <rfm_22_receive_packet+0x7a>
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	c1 11       	cpse	r28, r1
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	88 23       	and	r24, r24
 75c:	21 f0       	breq	.+8      	; 0x766 <rfm_22_receive_packet+0x82>
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	80 93 75 00 	sts	0x0075, r24
 764:	03 c0       	rjmp	.+6      	; 0x76c <rfm_22_receive_packet+0x88>
    else                                       packet_condition = 0xff;
 766:	8f ef       	ldi	r24, 0xFF	; 255
 768:	80 93 75 00 	sts	0x0075, r24

	return;
	}
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	08 95       	ret

00000772 <rfm_22_receive_packet_256>:

/* Специальная функция для приема пакета в 256 байт. 256й байт считывается из заголовка. */

void rfm_22_receive_packet_256(void) {

    rfm_22_receive_packet();
 772:	b8 df       	rcall	.-144    	; 0x6e4 <rfm_22_receive_packet>

    buffer[255] = rfm_22_read(0x47);
 774:	87 e4       	ldi	r24, 0x47	; 71
 776:	52 de       	rcall	.-860    	; 0x41c <rfm_22_read>
 778:	80 93 77 01 	sts	0x0177, r24
    ++npack;
 77c:	80 91 76 00 	lds	r24, 0x0076
 780:	90 91 77 00 	lds	r25, 0x0077
 784:	01 96       	adiw	r24, 0x01	; 1
 786:	90 93 77 00 	sts	0x0077, r25
 78a:	80 93 76 00 	sts	0x0076, r24
 78e:	08 95       	ret

00000790 <rfm_22_read_small_packet>:



/* Считывает данные пакета */

uint8_t rfm_22_read_small_packet(uint8_t startn) {
 790:	cf 93       	push	r28
 792:	df 93       	push	r29
 794:	d8 2f       	mov	r29, r24

	uint8_t lenght;

		lenght = rfm_22_read(0x4b);							//считывает длину пакета
 796:	8b e4       	ldi	r24, 0x4B	; 75
 798:	41 de       	rcall	.-894    	; 0x41c <rfm_22_read>
 79a:	c8 2f       	mov	r28, r24

		rfm_22_read_burst(0x7f, buffer+startn, lenght);	    //считывает данные
 79c:	6d 2f       	mov	r22, r29
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	68 58       	subi	r22, 0x88	; 136
 7a2:	7f 4f       	sbci	r23, 0xFF	; 255
 7a4:	48 2f       	mov	r20, r24
 7a6:	8f e7       	ldi	r24, 0x7F	; 127
 7a8:	ff dd       	rcall	.-1026   	; 0x3a8 <rfm_22_read_burst>

		rfm_22_write(0x07,0x05);
 7aa:	65 e0       	ldi	r22, 0x05	; 5
 7ac:	87 e0       	ldi	r24, 0x07	; 7
 7ae:	2a de       	rcall	.-940    	; 0x404 <rfm_22_write>

	rfm_22_write(0x08,0x02);								//стирает fifo
 7b0:	62 e0       	ldi	r22, 0x02	; 2
 7b2:	88 e0       	ldi	r24, 0x08	; 8
 7b4:	27 de       	rcall	.-946    	; 0x404 <rfm_22_write>
	rfm_22_write(0x08,0x00);
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	88 e0       	ldi	r24, 0x08	; 8
 7ba:	24 de       	rcall	.-952    	; 0x404 <rfm_22_write>

	return lenght;
	}
 7bc:	8c 2f       	mov	r24, r28
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	08 95       	ret

000007c4 <rs485_set_baudrate>:
 7c4:	df 93       	push	r29
 7c6:	cf 93       	push	r28
 7c8:	cd b7       	in	r28, 0x3d	; 61
 7ca:	de b7       	in	r29, 0x3e	; 62
 7cc:	2d 97       	sbiw	r28, 0x0d	; 13
 7ce:	0f b6       	in	r0, 0x3f	; 63
 7d0:	f8 94       	cli
 7d2:	de bf       	out	0x3e, r29	; 62
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	cd bf       	out	0x3d, r28	; 61
 7d8:	de 01       	movw	r26, r28
 7da:	11 96       	adiw	r26, 0x01	; 1
 7dc:	e0 e6       	ldi	r30, 0x60	; 96
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	9d e0       	ldi	r25, 0x0D	; 13
 7e2:	01 90       	ld	r0, Z+
 7e4:	0d 92       	st	X+, r0
 7e6:	91 50       	subi	r25, 0x01	; 1
 7e8:	e1 f7       	brne	.-8      	; 0x7e2 <rs485_set_baudrate+0x1e>
 7ea:	fe 01       	movw	r30, r28
 7ec:	e8 0f       	add	r30, r24
 7ee:	f1 1d       	adc	r31, r1
 7f0:	81 81       	ldd	r24, Z+1	; 0x01
 7f2:	89 b9       	out	0x09, r24	; 9
 7f4:	2d 96       	adiw	r28, 0x0d	; 13
 7f6:	0f b6       	in	r0, 0x3f	; 63
 7f8:	f8 94       	cli
 7fa:	de bf       	out	0x3e, r29	; 62
 7fc:	0f be       	out	0x3f, r0	; 63
 7fe:	cd bf       	out	0x3d, r28	; 61
 800:	cf 91       	pop	r28
 802:	df 91       	pop	r29
 804:	08 95       	ret

00000806 <rs485_init>:
 806:	82 e0       	ldi	r24, 0x02	; 2
 808:	8b b9       	out	0x0b, r24	; 11
 80a:	88 e9       	ldi	r24, 0x98	; 152
 80c:	8a b9       	out	0x0a, r24	; 10
 80e:	86 e8       	ldi	r24, 0x86	; 134
 810:	80 bd       	out	0x20, r24	; 32
 812:	83 e3       	ldi	r24, 0x33	; 51
 814:	89 b9       	out	0x09, r24	; 9
 816:	10 bc       	out	0x20, r1	; 32
 818:	84 e0       	ldi	r24, 0x04	; 4
 81a:	83 bf       	out	0x33, r24	; 51
 81c:	a5 9a       	sbi	0x14, 5	; 20
 81e:	08 95       	ret

00000820 <rs485_receive_packet>:
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	8f ef       	ldi	r24, 0xFF	; 255
 826:	80 93 75 00 	sts	0x0075, r24
 82a:	10 92 77 00 	sts	0x0077, r1
 82e:	10 92 76 00 	sts	0x0076, r1
 832:	12 be       	out	0x32, r1	; 50
 834:	c8 e7       	ldi	r28, 0x78	; 120
 836:	d0 e0       	ldi	r29, 0x00	; 0
 838:	31 c0       	rjmp	.+98     	; 0x89c <rs485_receive_packet+0x7c>
 83a:	5f 9b       	sbis	0x0b, 7	; 11
 83c:	2f c0       	rjmp	.+94     	; 0x89c <rs485_receive_packet+0x7c>
 83e:	82 b7       	in	r24, 0x32	; 50
 840:	87 33       	cpi	r24, 0x37	; 55
 842:	10 f0       	brcs	.+4      	; 0x848 <rs485_receive_packet+0x28>
 844:	10 92 75 00 	sts	0x0075, r1
 848:	80 91 76 00 	lds	r24, 0x0076
 84c:	90 91 77 00 	lds	r25, 0x0077
 850:	21 e0       	ldi	r18, 0x01	; 1
 852:	81 30       	cpi	r24, 0x01	; 1
 854:	92 07       	cpc	r25, r18
 856:	28 f5       	brcc	.+74     	; 0x8a2 <rs485_receive_packet+0x82>
 858:	e0 91 76 00 	lds	r30, 0x0076
 85c:	f0 91 77 00 	lds	r31, 0x0077
 860:	8c b1       	in	r24, 0x0c	; 12
 862:	ec 0f       	add	r30, r28
 864:	fd 1f       	adc	r31, r29
 866:	80 83       	st	Z, r24
 868:	80 91 76 00 	lds	r24, 0x0076
 86c:	90 91 77 00 	lds	r25, 0x0077
 870:	80 34       	cpi	r24, 0x40	; 64
 872:	91 05       	cpc	r25, r1
 874:	48 f4       	brcc	.+18     	; 0x888 <rs485_receive_packet+0x68>
 876:	e0 91 76 00 	lds	r30, 0x0076
 87a:	f0 91 77 00 	lds	r31, 0x0077
 87e:	ec 0f       	add	r30, r28
 880:	fd 1f       	adc	r31, r29
 882:	60 81       	ld	r22, Z
 884:	8f e7       	ldi	r24, 0x7F	; 127
 886:	be dd       	rcall	.-1156   	; 0x404 <rfm_22_write>
 888:	80 91 76 00 	lds	r24, 0x0076
 88c:	90 91 77 00 	lds	r25, 0x0077
 890:	01 96       	adiw	r24, 0x01	; 1
 892:	90 93 77 00 	sts	0x0077, r25
 896:	80 93 76 00 	sts	0x0076, r24
 89a:	12 be       	out	0x32, r1	; 50
 89c:	82 b7       	in	r24, 0x32	; 50
 89e:	8d 37       	cpi	r24, 0x7D	; 125
 8a0:	60 f2       	brcs	.-104    	; 0x83a <rs485_receive_packet+0x1a>
 8a2:	80 91 76 00 	lds	r24, 0x0076
 8a6:	90 91 77 00 	lds	r25, 0x0077
 8aa:	20 91 76 00 	lds	r18, 0x0076
 8ae:	30 91 77 00 	lds	r19, 0x0077
 8b2:	41 e0       	ldi	r20, 0x01	; 1
 8b4:	51 e0       	ldi	r21, 0x01	; 1
 8b6:	81 30       	cpi	r24, 0x01	; 1
 8b8:	95 07       	cpc	r25, r21
 8ba:	08 f4       	brcc	.+2      	; 0x8be <rs485_receive_packet+0x9e>
 8bc:	40 e0       	ldi	r20, 0x00	; 0
 8be:	44 23       	and	r20, r20
 8c0:	39 f4       	brne	.+14     	; 0x8d0 <rs485_receive_packet+0xb0>
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	21 15       	cp	r18, r1
 8c6:	31 05       	cpc	r19, r1
 8c8:	09 f0       	breq	.+2      	; 0x8cc <rs485_receive_packet+0xac>
 8ca:	80 e0       	ldi	r24, 0x00	; 0
 8cc:	88 23       	and	r24, r24
 8ce:	11 f0       	breq	.+4      	; 0x8d4 <rs485_receive_packet+0xb4>
 8d0:	10 92 75 00 	sts	0x0075, r1
 8d4:	df 91       	pop	r29
 8d6:	cf 91       	pop	r28
 8d8:	08 95       	ret

000008da <rs485_transmit_packet>:
 8da:	ad 9a       	sbi	0x15, 5	; 21
 8dc:	80 91 76 00 	lds	r24, 0x0076
 8e0:	90 91 77 00 	lds	r25, 0x0077
 8e4:	00 97       	sbiw	r24, 0x00	; 0
 8e6:	89 f0       	breq	.+34     	; 0x90a <rs485_transmit_packet+0x30>
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	5d 9b       	sbis	0x0b, 5	; 11
 8ee:	fe cf       	rjmp	.-4      	; 0x8ec <rs485_transmit_packet+0x12>
 8f0:	fc 01       	movw	r30, r24
 8f2:	e8 58       	subi	r30, 0x88	; 136
 8f4:	ff 4f       	sbci	r31, 0xFF	; 255
 8f6:	20 81       	ld	r18, Z
 8f8:	2c b9       	out	0x0c, r18	; 12
 8fa:	01 96       	adiw	r24, 0x01	; 1
 8fc:	20 91 76 00 	lds	r18, 0x0076
 900:	30 91 77 00 	lds	r19, 0x0077
 904:	82 17       	cp	r24, r18
 906:	93 07       	cpc	r25, r19
 908:	88 f3       	brcs	.-30     	; 0x8ec <rs485_transmit_packet+0x12>
 90a:	5e 9a       	sbi	0x0b, 6	; 11
 90c:	5e 9b       	sbis	0x0b, 6	; 11
 90e:	fe cf       	rjmp	.-4      	; 0x90c <rs485_transmit_packet+0x32>
 910:	ad 98       	cbi	0x15, 5	; 21
 912:	8c b1       	in	r24, 0x0c	; 12
 914:	8c b1       	in	r24, 0x0c	; 12
 916:	8c b1       	in	r24, 0x0c	; 12
 918:	10 92 75 00 	sts	0x0075, r1
 91c:	08 95       	ret

0000091e <__eerd_byte_m8>:
 91e:	e1 99       	sbic	0x1c, 1	; 28
 920:	fe cf       	rjmp	.-4      	; 0x91e <__eerd_byte_m8>
 922:	9f bb       	out	0x1f, r25	; 31
 924:	8e bb       	out	0x1e, r24	; 30
 926:	e0 9a       	sbi	0x1c, 0	; 28
 928:	99 27       	eor	r25, r25
 92a:	8d b3       	in	r24, 0x1d	; 29
 92c:	08 95       	ret

0000092e <_exit>:
 92e:	f8 94       	cli

00000930 <__stop_program>:
 930:	ff cf       	rjmp	.-2      	; 0x930 <__stop_program>
